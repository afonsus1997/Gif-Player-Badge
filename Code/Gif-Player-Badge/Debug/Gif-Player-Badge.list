
Gif-Player-Badge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ec4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08001fd0  08001fd0  00011fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002058  08002058  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08002058  08002058  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002058  08002058  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002058  08002058  00012058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800205c  0800205c  0001205c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002060  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000010  08002070  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  08002070  000200cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cc52  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ddb  00000000  00000000  0002cc8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000700  00000000  00000000  0002ea68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000638  00000000  00000000  0002f168  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014fbd  00000000  00000000  0002f7a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007798  00000000  00000000  0004475d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006b6d3  00000000  00000000  0004bef5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b75c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a80  00000000  00000000  000b7644  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08001fb8 	.word	0x08001fb8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08001fb8 	.word	0x08001fb8

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f941 	bl	80003e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f001 fdc6 	bl	8001cf8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f959 	bl	800044e <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295
 80001b4:	f000 f921 	bl	80003fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	2000000c 	.word	0x2000000c
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	2000002c 	.word	0x2000002c

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	2000002c 	.word	0x2000002c

08000210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000218:	f7ff fff0 	bl	80001fc <HAL_GetTick>
 800021c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000228:	d005      	beq.n	8000236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800022a:	4b09      	ldr	r3, [pc, #36]	; (8000250 <HAL_Delay+0x40>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	461a      	mov	r2, r3
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	4413      	add	r3, r2
 8000234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000236:	bf00      	nop
 8000238:	f7ff ffe0 	bl	80001fc <HAL_GetTick>
 800023c:	4602      	mov	r2, r0
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	1ad3      	subs	r3, r2, r3
 8000242:	68fa      	ldr	r2, [r7, #12]
 8000244:	429a      	cmp	r2, r3
 8000246:	d8f7      	bhi.n	8000238 <HAL_Delay+0x28>
  {
  }
}
 8000248:	bf00      	nop
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000004 	.word	0x20000004

08000254 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000254:	b480      	push	{r7}
 8000256:	b085      	sub	sp, #20
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f003 0307 	and.w	r3, r3, #7
 8000262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000264:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <NVIC_SetPriorityGrouping+0x44>)
 8000266:	68db      	ldr	r3, [r3, #12]
 8000268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800026a:	68ba      	ldr	r2, [r7, #8]
 800026c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000270:	4013      	ands	r3, r2
 8000272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800027c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000286:	4a04      	ldr	r2, [pc, #16]	; (8000298 <NVIC_SetPriorityGrouping+0x44>)
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	60d3      	str	r3, [r2, #12]
}
 800028c:	bf00      	nop
 800028e:	3714      	adds	r7, #20
 8000290:	46bd      	mov	sp, r7
 8000292:	bc80      	pop	{r7}
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	e000ed00 	.word	0xe000ed00

0800029c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <NVIC_GetPriorityGrouping+0x18>)
 80002a2:	68db      	ldr	r3, [r3, #12]
 80002a4:	0a1b      	lsrs	r3, r3, #8
 80002a6:	f003 0307 	and.w	r3, r3, #7
}
 80002aa:	4618      	mov	r0, r3
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	e000ed00 	.word	0xe000ed00

080002b8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002c2:	79fb      	ldrb	r3, [r7, #7]
 80002c4:	f003 021f 	and.w	r2, r3, #31
 80002c8:	4906      	ldr	r1, [pc, #24]	; (80002e4 <NVIC_EnableIRQ+0x2c>)
 80002ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ce:	095b      	lsrs	r3, r3, #5
 80002d0:	2001      	movs	r0, #1
 80002d2:	fa00 f202 	lsl.w	r2, r0, r2
 80002d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80002da:	bf00      	nop
 80002dc:	370c      	adds	r7, #12
 80002de:	46bd      	mov	sp, r7
 80002e0:	bc80      	pop	{r7}
 80002e2:	4770      	bx	lr
 80002e4:	e000e100 	.word	0xe000e100

080002e8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	4603      	mov	r3, r0
 80002f0:	6039      	str	r1, [r7, #0]
 80002f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80002f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	da0b      	bge.n	8000314 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002fc:	683b      	ldr	r3, [r7, #0]
 80002fe:	b2da      	uxtb	r2, r3
 8000300:	490c      	ldr	r1, [pc, #48]	; (8000334 <NVIC_SetPriority+0x4c>)
 8000302:	79fb      	ldrb	r3, [r7, #7]
 8000304:	f003 030f 	and.w	r3, r3, #15
 8000308:	3b04      	subs	r3, #4
 800030a:	0112      	lsls	r2, r2, #4
 800030c:	b2d2      	uxtb	r2, r2
 800030e:	440b      	add	r3, r1
 8000310:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000312:	e009      	b.n	8000328 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000314:	683b      	ldr	r3, [r7, #0]
 8000316:	b2da      	uxtb	r2, r3
 8000318:	4907      	ldr	r1, [pc, #28]	; (8000338 <NVIC_SetPriority+0x50>)
 800031a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800031e:	0112      	lsls	r2, r2, #4
 8000320:	b2d2      	uxtb	r2, r2
 8000322:	440b      	add	r3, r1
 8000324:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000328:	bf00      	nop
 800032a:	370c      	adds	r7, #12
 800032c:	46bd      	mov	sp, r7
 800032e:	bc80      	pop	{r7}
 8000330:	4770      	bx	lr
 8000332:	bf00      	nop
 8000334:	e000ed00 	.word	0xe000ed00
 8000338:	e000e100 	.word	0xe000e100

0800033c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800033c:	b480      	push	{r7}
 800033e:	b089      	sub	sp, #36	; 0x24
 8000340:	af00      	add	r7, sp, #0
 8000342:	60f8      	str	r0, [r7, #12]
 8000344:	60b9      	str	r1, [r7, #8]
 8000346:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	f003 0307 	and.w	r3, r3, #7
 800034e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000350:	69fb      	ldr	r3, [r7, #28]
 8000352:	f1c3 0307 	rsb	r3, r3, #7
 8000356:	2b04      	cmp	r3, #4
 8000358:	bf28      	it	cs
 800035a:	2304      	movcs	r3, #4
 800035c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800035e:	69fb      	ldr	r3, [r7, #28]
 8000360:	3304      	adds	r3, #4
 8000362:	2b06      	cmp	r3, #6
 8000364:	d902      	bls.n	800036c <NVIC_EncodePriority+0x30>
 8000366:	69fb      	ldr	r3, [r7, #28]
 8000368:	3b03      	subs	r3, #3
 800036a:	e000      	b.n	800036e <NVIC_EncodePriority+0x32>
 800036c:	2300      	movs	r3, #0
 800036e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000370:	f04f 32ff 	mov.w	r2, #4294967295
 8000374:	69bb      	ldr	r3, [r7, #24]
 8000376:	fa02 f303 	lsl.w	r3, r2, r3
 800037a:	43da      	mvns	r2, r3
 800037c:	68bb      	ldr	r3, [r7, #8]
 800037e:	401a      	ands	r2, r3
 8000380:	697b      	ldr	r3, [r7, #20]
 8000382:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000384:	f04f 31ff 	mov.w	r1, #4294967295
 8000388:	697b      	ldr	r3, [r7, #20]
 800038a:	fa01 f303 	lsl.w	r3, r1, r3
 800038e:	43d9      	mvns	r1, r3
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000394:	4313      	orrs	r3, r2
         );
}
 8000396:	4618      	mov	r0, r3
 8000398:	3724      	adds	r7, #36	; 0x24
 800039a:	46bd      	mov	sp, r7
 800039c:	bc80      	pop	{r7}
 800039e:	4770      	bx	lr

080003a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	3b01      	subs	r3, #1
 80003ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80003b0:	d301      	bcc.n	80003b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003b2:	2301      	movs	r3, #1
 80003b4:	e00f      	b.n	80003d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003b6:	4a0a      	ldr	r2, [pc, #40]	; (80003e0 <SysTick_Config+0x40>)
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	3b01      	subs	r3, #1
 80003bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003be:	210f      	movs	r1, #15
 80003c0:	f04f 30ff 	mov.w	r0, #4294967295
 80003c4:	f7ff ff90 	bl	80002e8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003c8:	4b05      	ldr	r3, [pc, #20]	; (80003e0 <SysTick_Config+0x40>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003ce:	4b04      	ldr	r3, [pc, #16]	; (80003e0 <SysTick_Config+0x40>)
 80003d0:	2207      	movs	r2, #7
 80003d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003d4:	2300      	movs	r3, #0
}
 80003d6:	4618      	mov	r0, r3
 80003d8:	3708      	adds	r7, #8
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	e000e010 	.word	0xe000e010

080003e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003ec:	6878      	ldr	r0, [r7, #4]
 80003ee:	f7ff ff31 	bl	8000254 <NVIC_SetPriorityGrouping>
}
 80003f2:	bf00      	nop
 80003f4:	3708      	adds	r7, #8
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}

080003fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003fa:	b580      	push	{r7, lr}
 80003fc:	b086      	sub	sp, #24
 80003fe:	af00      	add	r7, sp, #0
 8000400:	4603      	mov	r3, r0
 8000402:	60b9      	str	r1, [r7, #8]
 8000404:	607a      	str	r2, [r7, #4]
 8000406:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000408:	2300      	movs	r3, #0
 800040a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800040c:	f7ff ff46 	bl	800029c <NVIC_GetPriorityGrouping>
 8000410:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000412:	687a      	ldr	r2, [r7, #4]
 8000414:	68b9      	ldr	r1, [r7, #8]
 8000416:	6978      	ldr	r0, [r7, #20]
 8000418:	f7ff ff90 	bl	800033c <NVIC_EncodePriority>
 800041c:	4602      	mov	r2, r0
 800041e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000422:	4611      	mov	r1, r2
 8000424:	4618      	mov	r0, r3
 8000426:	f7ff ff5f 	bl	80002e8 <NVIC_SetPriority>
}
 800042a:	bf00      	nop
 800042c:	3718      	adds	r7, #24
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}

08000432 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000432:	b580      	push	{r7, lr}
 8000434:	b082      	sub	sp, #8
 8000436:	af00      	add	r7, sp, #0
 8000438:	4603      	mov	r3, r0
 800043a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800043c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000440:	4618      	mov	r0, r3
 8000442:	f7ff ff39 	bl	80002b8 <NVIC_EnableIRQ>
}
 8000446:	bf00      	nop
 8000448:	3708      	adds	r7, #8
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}

0800044e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800044e:	b580      	push	{r7, lr}
 8000450:	b082      	sub	sp, #8
 8000452:	af00      	add	r7, sp, #0
 8000454:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000456:	6878      	ldr	r0, [r7, #4]
 8000458:	f7ff ffa2 	bl	80003a0 <SysTick_Config>
 800045c:	4603      	mov	r3, r0
}
 800045e:	4618      	mov	r0, r3
 8000460:	3708      	adds	r7, #8
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
	...

08000468 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000468:	b480      	push	{r7}
 800046a:	b085      	sub	sp, #20
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000470:	2300      	movs	r3, #0
 8000472:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	2b00      	cmp	r3, #0
 8000478:	d101      	bne.n	800047e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800047a:	2301      	movs	r3, #1
 800047c:	e043      	b.n	8000506 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	461a      	mov	r2, r3
 8000484:	4b22      	ldr	r3, [pc, #136]	; (8000510 <HAL_DMA_Init+0xa8>)
 8000486:	4413      	add	r3, r2
 8000488:	4a22      	ldr	r2, [pc, #136]	; (8000514 <HAL_DMA_Init+0xac>)
 800048a:	fba2 2303 	umull	r2, r3, r2, r3
 800048e:	091b      	lsrs	r3, r3, #4
 8000490:	009a      	lsls	r2, r3, #2
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	4a1f      	ldr	r2, [pc, #124]	; (8000518 <HAL_DMA_Init+0xb0>)
 800049a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG || STM32F100xE || STM32F105xC || STM32F107xC */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	2202      	movs	r2, #2
 80004a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80004b2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80004b6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80004c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	68db      	ldr	r3, [r3, #12]
 80004c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80004cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	695b      	ldr	r3, [r3, #20]
 80004d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80004d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	69db      	ldr	r3, [r3, #28]
 80004de:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80004e0:	68fa      	ldr	r2, [r7, #12]
 80004e2:	4313      	orrs	r3, r2
 80004e4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	68fa      	ldr	r2, [r7, #12]
 80004ec:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	2200      	movs	r2, #0
 80004f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	2201      	movs	r2, #1
 80004f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2200      	movs	r2, #0
 8000500:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000504:	2300      	movs	r3, #0
}
 8000506:	4618      	mov	r0, r3
 8000508:	3714      	adds	r7, #20
 800050a:	46bd      	mov	sp, r7
 800050c:	bc80      	pop	{r7}
 800050e:	4770      	bx	lr
 8000510:	bffdfff8 	.word	0xbffdfff8
 8000514:	cccccccd 	.word	0xcccccccd
 8000518:	40020000 	.word	0x40020000

0800051c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000538:	2204      	movs	r2, #4
 800053a:	409a      	lsls	r2, r3
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	4013      	ands	r3, r2
 8000540:	2b00      	cmp	r3, #0
 8000542:	d04f      	beq.n	80005e4 <HAL_DMA_IRQHandler+0xc8>
 8000544:	68bb      	ldr	r3, [r7, #8]
 8000546:	f003 0304 	and.w	r3, r3, #4
 800054a:	2b00      	cmp	r3, #0
 800054c:	d04a      	beq.n	80005e4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f003 0320 	and.w	r3, r3, #32
 8000558:	2b00      	cmp	r3, #0
 800055a:	d107      	bne.n	800056c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	f022 0204 	bic.w	r2, r2, #4
 800056a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a66      	ldr	r2, [pc, #408]	; (800070c <HAL_DMA_IRQHandler+0x1f0>)
 8000572:	4293      	cmp	r3, r2
 8000574:	d029      	beq.n	80005ca <HAL_DMA_IRQHandler+0xae>
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4a65      	ldr	r2, [pc, #404]	; (8000710 <HAL_DMA_IRQHandler+0x1f4>)
 800057c:	4293      	cmp	r3, r2
 800057e:	d022      	beq.n	80005c6 <HAL_DMA_IRQHandler+0xaa>
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a63      	ldr	r2, [pc, #396]	; (8000714 <HAL_DMA_IRQHandler+0x1f8>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d01a      	beq.n	80005c0 <HAL_DMA_IRQHandler+0xa4>
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4a62      	ldr	r2, [pc, #392]	; (8000718 <HAL_DMA_IRQHandler+0x1fc>)
 8000590:	4293      	cmp	r3, r2
 8000592:	d012      	beq.n	80005ba <HAL_DMA_IRQHandler+0x9e>
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a60      	ldr	r2, [pc, #384]	; (800071c <HAL_DMA_IRQHandler+0x200>)
 800059a:	4293      	cmp	r3, r2
 800059c:	d00a      	beq.n	80005b4 <HAL_DMA_IRQHandler+0x98>
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4a5f      	ldr	r2, [pc, #380]	; (8000720 <HAL_DMA_IRQHandler+0x204>)
 80005a4:	4293      	cmp	r3, r2
 80005a6:	d102      	bne.n	80005ae <HAL_DMA_IRQHandler+0x92>
 80005a8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ac:	e00e      	b.n	80005cc <HAL_DMA_IRQHandler+0xb0>
 80005ae:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80005b2:	e00b      	b.n	80005cc <HAL_DMA_IRQHandler+0xb0>
 80005b4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80005b8:	e008      	b.n	80005cc <HAL_DMA_IRQHandler+0xb0>
 80005ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80005be:	e005      	b.n	80005cc <HAL_DMA_IRQHandler+0xb0>
 80005c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005c4:	e002      	b.n	80005cc <HAL_DMA_IRQHandler+0xb0>
 80005c6:	2340      	movs	r3, #64	; 0x40
 80005c8:	e000      	b.n	80005cc <HAL_DMA_IRQHandler+0xb0>
 80005ca:	2304      	movs	r3, #4
 80005cc:	4a55      	ldr	r2, [pc, #340]	; (8000724 <HAL_DMA_IRQHandler+0x208>)
 80005ce:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	f000 8094 	beq.w	8000702 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80005e2:	e08e      	b.n	8000702 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e8:	2202      	movs	r2, #2
 80005ea:	409a      	lsls	r2, r3
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	4013      	ands	r3, r2
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d056      	beq.n	80006a2 <HAL_DMA_IRQHandler+0x186>
 80005f4:	68bb      	ldr	r3, [r7, #8]
 80005f6:	f003 0302 	and.w	r3, r3, #2
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d051      	beq.n	80006a2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f003 0320 	and.w	r3, r3, #32
 8000608:	2b00      	cmp	r3, #0
 800060a:	d10b      	bne.n	8000624 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	681a      	ldr	r2, [r3, #0]
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	f022 020a 	bic.w	r2, r2, #10
 800061a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	2201      	movs	r2, #1
 8000620:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a38      	ldr	r2, [pc, #224]	; (800070c <HAL_DMA_IRQHandler+0x1f0>)
 800062a:	4293      	cmp	r3, r2
 800062c:	d029      	beq.n	8000682 <HAL_DMA_IRQHandler+0x166>
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4a37      	ldr	r2, [pc, #220]	; (8000710 <HAL_DMA_IRQHandler+0x1f4>)
 8000634:	4293      	cmp	r3, r2
 8000636:	d022      	beq.n	800067e <HAL_DMA_IRQHandler+0x162>
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a35      	ldr	r2, [pc, #212]	; (8000714 <HAL_DMA_IRQHandler+0x1f8>)
 800063e:	4293      	cmp	r3, r2
 8000640:	d01a      	beq.n	8000678 <HAL_DMA_IRQHandler+0x15c>
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a34      	ldr	r2, [pc, #208]	; (8000718 <HAL_DMA_IRQHandler+0x1fc>)
 8000648:	4293      	cmp	r3, r2
 800064a:	d012      	beq.n	8000672 <HAL_DMA_IRQHandler+0x156>
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a32      	ldr	r2, [pc, #200]	; (800071c <HAL_DMA_IRQHandler+0x200>)
 8000652:	4293      	cmp	r3, r2
 8000654:	d00a      	beq.n	800066c <HAL_DMA_IRQHandler+0x150>
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4a31      	ldr	r2, [pc, #196]	; (8000720 <HAL_DMA_IRQHandler+0x204>)
 800065c:	4293      	cmp	r3, r2
 800065e:	d102      	bne.n	8000666 <HAL_DMA_IRQHandler+0x14a>
 8000660:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000664:	e00e      	b.n	8000684 <HAL_DMA_IRQHandler+0x168>
 8000666:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800066a:	e00b      	b.n	8000684 <HAL_DMA_IRQHandler+0x168>
 800066c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000670:	e008      	b.n	8000684 <HAL_DMA_IRQHandler+0x168>
 8000672:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000676:	e005      	b.n	8000684 <HAL_DMA_IRQHandler+0x168>
 8000678:	f44f 7300 	mov.w	r3, #512	; 0x200
 800067c:	e002      	b.n	8000684 <HAL_DMA_IRQHandler+0x168>
 800067e:	2320      	movs	r3, #32
 8000680:	e000      	b.n	8000684 <HAL_DMA_IRQHandler+0x168>
 8000682:	2302      	movs	r3, #2
 8000684:	4a27      	ldr	r2, [pc, #156]	; (8000724 <HAL_DMA_IRQHandler+0x208>)
 8000686:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	2200      	movs	r2, #0
 800068c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000694:	2b00      	cmp	r3, #0
 8000696:	d034      	beq.n	8000702 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800069c:	6878      	ldr	r0, [r7, #4]
 800069e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80006a0:	e02f      	b.n	8000702 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a6:	2208      	movs	r2, #8
 80006a8:	409a      	lsls	r2, r3
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	4013      	ands	r3, r2
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d028      	beq.n	8000704 <HAL_DMA_IRQHandler+0x1e8>
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	f003 0308 	and.w	r3, r3, #8
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d023      	beq.n	8000704 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	f022 020e 	bic.w	r2, r2, #14
 80006ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80006d4:	2101      	movs	r1, #1
 80006d6:	fa01 f202 	lsl.w	r2, r1, r2
 80006da:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2201      	movs	r2, #1
 80006e0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	2201      	movs	r2, #1
 80006e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	2200      	movs	r2, #0
 80006ee:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d004      	beq.n	8000704 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	6878      	ldr	r0, [r7, #4]
 8000700:	4798      	blx	r3
    }
  }
  return;
 8000702:	bf00      	nop
 8000704:	bf00      	nop
}
 8000706:	3710      	adds	r7, #16
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	40020008 	.word	0x40020008
 8000710:	4002001c 	.word	0x4002001c
 8000714:	40020030 	.word	0x40020030
 8000718:	40020044 	.word	0x40020044
 800071c:	40020058 	.word	0x40020058
 8000720:	4002006c 	.word	0x4002006c
 8000724:	40020000 	.word	0x40020000

08000728 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000728:	b480      	push	{r7}
 800072a:	b08b      	sub	sp, #44	; 0x2c
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000732:	2300      	movs	r3, #0
 8000734:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8000736:	2300      	movs	r3, #0
 8000738:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 800073a:	2300      	movs	r3, #0
 800073c:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 800073e:	2300      	movs	r3, #0
 8000740:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8000742:	2300      	movs	r3, #0
 8000744:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000746:	2300      	movs	r3, #0
 8000748:	627b      	str	r3, [r7, #36]	; 0x24
 800074a:	e127      	b.n	800099c <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 800074c:	2201      	movs	r2, #1
 800074e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000750:	fa02 f303 	lsl.w	r3, r2, r3
 8000754:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	69fa      	ldr	r2, [r7, #28]
 800075c:	4013      	ands	r3, r2
 800075e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000760:	69ba      	ldr	r2, [r7, #24]
 8000762:	69fb      	ldr	r3, [r7, #28]
 8000764:	429a      	cmp	r2, r3
 8000766:	f040 8116 	bne.w	8000996 <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	685b      	ldr	r3, [r3, #4]
 800076e:	2b12      	cmp	r3, #18
 8000770:	d034      	beq.n	80007dc <HAL_GPIO_Init+0xb4>
 8000772:	2b12      	cmp	r3, #18
 8000774:	d80d      	bhi.n	8000792 <HAL_GPIO_Init+0x6a>
 8000776:	2b02      	cmp	r3, #2
 8000778:	d02b      	beq.n	80007d2 <HAL_GPIO_Init+0xaa>
 800077a:	2b02      	cmp	r3, #2
 800077c:	d804      	bhi.n	8000788 <HAL_GPIO_Init+0x60>
 800077e:	2b00      	cmp	r3, #0
 8000780:	d031      	beq.n	80007e6 <HAL_GPIO_Init+0xbe>
 8000782:	2b01      	cmp	r3, #1
 8000784:	d01c      	beq.n	80007c0 <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000786:	e048      	b.n	800081a <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000788:	2b03      	cmp	r3, #3
 800078a:	d043      	beq.n	8000814 <HAL_GPIO_Init+0xec>
 800078c:	2b11      	cmp	r3, #17
 800078e:	d01b      	beq.n	80007c8 <HAL_GPIO_Init+0xa0>
          break;
 8000790:	e043      	b.n	800081a <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000792:	4a87      	ldr	r2, [pc, #540]	; (80009b0 <HAL_GPIO_Init+0x288>)
 8000794:	4293      	cmp	r3, r2
 8000796:	d026      	beq.n	80007e6 <HAL_GPIO_Init+0xbe>
 8000798:	4a85      	ldr	r2, [pc, #532]	; (80009b0 <HAL_GPIO_Init+0x288>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d806      	bhi.n	80007ac <HAL_GPIO_Init+0x84>
 800079e:	4a85      	ldr	r2, [pc, #532]	; (80009b4 <HAL_GPIO_Init+0x28c>)
 80007a0:	4293      	cmp	r3, r2
 80007a2:	d020      	beq.n	80007e6 <HAL_GPIO_Init+0xbe>
 80007a4:	4a84      	ldr	r2, [pc, #528]	; (80009b8 <HAL_GPIO_Init+0x290>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d01d      	beq.n	80007e6 <HAL_GPIO_Init+0xbe>
          break;
 80007aa:	e036      	b.n	800081a <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 80007ac:	4a83      	ldr	r2, [pc, #524]	; (80009bc <HAL_GPIO_Init+0x294>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d019      	beq.n	80007e6 <HAL_GPIO_Init+0xbe>
 80007b2:	4a83      	ldr	r2, [pc, #524]	; (80009c0 <HAL_GPIO_Init+0x298>)
 80007b4:	4293      	cmp	r3, r2
 80007b6:	d016      	beq.n	80007e6 <HAL_GPIO_Init+0xbe>
 80007b8:	4a82      	ldr	r2, [pc, #520]	; (80009c4 <HAL_GPIO_Init+0x29c>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d013      	beq.n	80007e6 <HAL_GPIO_Init+0xbe>
          break;
 80007be:	e02c      	b.n	800081a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	68db      	ldr	r3, [r3, #12]
 80007c4:	623b      	str	r3, [r7, #32]
          break;
 80007c6:	e028      	b.n	800081a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	68db      	ldr	r3, [r3, #12]
 80007cc:	3304      	adds	r3, #4
 80007ce:	623b      	str	r3, [r7, #32]
          break;
 80007d0:	e023      	b.n	800081a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	68db      	ldr	r3, [r3, #12]
 80007d6:	3308      	adds	r3, #8
 80007d8:	623b      	str	r3, [r7, #32]
          break;
 80007da:	e01e      	b.n	800081a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	68db      	ldr	r3, [r3, #12]
 80007e0:	330c      	adds	r3, #12
 80007e2:	623b      	str	r3, [r7, #32]
          break;
 80007e4:	e019      	b.n	800081a <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	689b      	ldr	r3, [r3, #8]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d102      	bne.n	80007f4 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80007ee:	2304      	movs	r3, #4
 80007f0:	623b      	str	r3, [r7, #32]
          break;
 80007f2:	e012      	b.n	800081a <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	689b      	ldr	r3, [r3, #8]
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	d105      	bne.n	8000808 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80007fc:	2308      	movs	r3, #8
 80007fe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	69fa      	ldr	r2, [r7, #28]
 8000804:	611a      	str	r2, [r3, #16]
          break;
 8000806:	e008      	b.n	800081a <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000808:	2308      	movs	r3, #8
 800080a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	69fa      	ldr	r2, [r7, #28]
 8000810:	615a      	str	r2, [r3, #20]
          break;
 8000812:	e002      	b.n	800081a <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000814:	2300      	movs	r3, #0
 8000816:	623b      	str	r3, [r7, #32]
          break;
 8000818:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800081a:	69bb      	ldr	r3, [r7, #24]
 800081c:	2bff      	cmp	r3, #255	; 0xff
 800081e:	d801      	bhi.n	8000824 <HAL_GPIO_Init+0xfc>
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	e001      	b.n	8000828 <HAL_GPIO_Init+0x100>
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	3304      	adds	r3, #4
 8000828:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 800082a:	69bb      	ldr	r3, [r7, #24]
 800082c:	2bff      	cmp	r3, #255	; 0xff
 800082e:	d802      	bhi.n	8000836 <HAL_GPIO_Init+0x10e>
 8000830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000832:	009b      	lsls	r3, r3, #2
 8000834:	e002      	b.n	800083c <HAL_GPIO_Init+0x114>
 8000836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000838:	3b08      	subs	r3, #8
 800083a:	009b      	lsls	r3, r3, #2
 800083c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	681a      	ldr	r2, [r3, #0]
 8000842:	210f      	movs	r1, #15
 8000844:	693b      	ldr	r3, [r7, #16]
 8000846:	fa01 f303 	lsl.w	r3, r1, r3
 800084a:	43db      	mvns	r3, r3
 800084c:	401a      	ands	r2, r3
 800084e:	6a39      	ldr	r1, [r7, #32]
 8000850:	693b      	ldr	r3, [r7, #16]
 8000852:	fa01 f303 	lsl.w	r3, r1, r3
 8000856:	431a      	orrs	r2, r3
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	685b      	ldr	r3, [r3, #4]
 8000860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000864:	2b00      	cmp	r3, #0
 8000866:	f000 8096 	beq.w	8000996 <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800086a:	4b57      	ldr	r3, [pc, #348]	; (80009c8 <HAL_GPIO_Init+0x2a0>)
 800086c:	699b      	ldr	r3, [r3, #24]
 800086e:	4a56      	ldr	r2, [pc, #344]	; (80009c8 <HAL_GPIO_Init+0x2a0>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	6193      	str	r3, [r2, #24]
 8000876:	4b54      	ldr	r3, [pc, #336]	; (80009c8 <HAL_GPIO_Init+0x2a0>)
 8000878:	699b      	ldr	r3, [r3, #24]
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	60bb      	str	r3, [r7, #8]
 8000880:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8000882:	4a52      	ldr	r2, [pc, #328]	; (80009cc <HAL_GPIO_Init+0x2a4>)
 8000884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000886:	089b      	lsrs	r3, r3, #2
 8000888:	3302      	adds	r3, #2
 800088a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800088e:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000892:	f003 0303 	and.w	r3, r3, #3
 8000896:	009b      	lsls	r3, r3, #2
 8000898:	220f      	movs	r2, #15
 800089a:	fa02 f303 	lsl.w	r3, r2, r3
 800089e:	43db      	mvns	r3, r3
 80008a0:	697a      	ldr	r2, [r7, #20]
 80008a2:	4013      	ands	r3, r2
 80008a4:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	4a49      	ldr	r2, [pc, #292]	; (80009d0 <HAL_GPIO_Init+0x2a8>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d013      	beq.n	80008d6 <HAL_GPIO_Init+0x1ae>
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	4a48      	ldr	r2, [pc, #288]	; (80009d4 <HAL_GPIO_Init+0x2ac>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d00d      	beq.n	80008d2 <HAL_GPIO_Init+0x1aa>
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	4a47      	ldr	r2, [pc, #284]	; (80009d8 <HAL_GPIO_Init+0x2b0>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d007      	beq.n	80008ce <HAL_GPIO_Init+0x1a6>
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	4a46      	ldr	r2, [pc, #280]	; (80009dc <HAL_GPIO_Init+0x2b4>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d101      	bne.n	80008ca <HAL_GPIO_Init+0x1a2>
 80008c6:	2303      	movs	r3, #3
 80008c8:	e006      	b.n	80008d8 <HAL_GPIO_Init+0x1b0>
 80008ca:	2304      	movs	r3, #4
 80008cc:	e004      	b.n	80008d8 <HAL_GPIO_Init+0x1b0>
 80008ce:	2302      	movs	r3, #2
 80008d0:	e002      	b.n	80008d8 <HAL_GPIO_Init+0x1b0>
 80008d2:	2301      	movs	r3, #1
 80008d4:	e000      	b.n	80008d8 <HAL_GPIO_Init+0x1b0>
 80008d6:	2300      	movs	r3, #0
 80008d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008da:	f002 0203 	and.w	r2, r2, #3
 80008de:	0092      	lsls	r2, r2, #2
 80008e0:	4093      	lsls	r3, r2
 80008e2:	697a      	ldr	r2, [r7, #20]
 80008e4:	4313      	orrs	r3, r2
 80008e6:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 80008e8:	4938      	ldr	r1, [pc, #224]	; (80009cc <HAL_GPIO_Init+0x2a4>)
 80008ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ec:	089b      	lsrs	r3, r3, #2
 80008ee:	3302      	adds	r3, #2
 80008f0:	697a      	ldr	r2, [r7, #20]
 80008f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	685b      	ldr	r3, [r3, #4]
 80008fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d006      	beq.n	8000910 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000902:	4b37      	ldr	r3, [pc, #220]	; (80009e0 <HAL_GPIO_Init+0x2b8>)
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	4936      	ldr	r1, [pc, #216]	; (80009e0 <HAL_GPIO_Init+0x2b8>)
 8000908:	69bb      	ldr	r3, [r7, #24]
 800090a:	4313      	orrs	r3, r2
 800090c:	600b      	str	r3, [r1, #0]
 800090e:	e006      	b.n	800091e <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000910:	4b33      	ldr	r3, [pc, #204]	; (80009e0 <HAL_GPIO_Init+0x2b8>)
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	69bb      	ldr	r3, [r7, #24]
 8000916:	43db      	mvns	r3, r3
 8000918:	4931      	ldr	r1, [pc, #196]	; (80009e0 <HAL_GPIO_Init+0x2b8>)
 800091a:	4013      	ands	r3, r2
 800091c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000926:	2b00      	cmp	r3, #0
 8000928:	d006      	beq.n	8000938 <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800092a:	4b2d      	ldr	r3, [pc, #180]	; (80009e0 <HAL_GPIO_Init+0x2b8>)
 800092c:	685a      	ldr	r2, [r3, #4]
 800092e:	492c      	ldr	r1, [pc, #176]	; (80009e0 <HAL_GPIO_Init+0x2b8>)
 8000930:	69bb      	ldr	r3, [r7, #24]
 8000932:	4313      	orrs	r3, r2
 8000934:	604b      	str	r3, [r1, #4]
 8000936:	e006      	b.n	8000946 <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000938:	4b29      	ldr	r3, [pc, #164]	; (80009e0 <HAL_GPIO_Init+0x2b8>)
 800093a:	685a      	ldr	r2, [r3, #4]
 800093c:	69bb      	ldr	r3, [r7, #24]
 800093e:	43db      	mvns	r3, r3
 8000940:	4927      	ldr	r1, [pc, #156]	; (80009e0 <HAL_GPIO_Init+0x2b8>)
 8000942:	4013      	ands	r3, r2
 8000944:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	685b      	ldr	r3, [r3, #4]
 800094a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800094e:	2b00      	cmp	r3, #0
 8000950:	d006      	beq.n	8000960 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000952:	4b23      	ldr	r3, [pc, #140]	; (80009e0 <HAL_GPIO_Init+0x2b8>)
 8000954:	689a      	ldr	r2, [r3, #8]
 8000956:	4922      	ldr	r1, [pc, #136]	; (80009e0 <HAL_GPIO_Init+0x2b8>)
 8000958:	69bb      	ldr	r3, [r7, #24]
 800095a:	4313      	orrs	r3, r2
 800095c:	608b      	str	r3, [r1, #8]
 800095e:	e006      	b.n	800096e <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000960:	4b1f      	ldr	r3, [pc, #124]	; (80009e0 <HAL_GPIO_Init+0x2b8>)
 8000962:	689a      	ldr	r2, [r3, #8]
 8000964:	69bb      	ldr	r3, [r7, #24]
 8000966:	43db      	mvns	r3, r3
 8000968:	491d      	ldr	r1, [pc, #116]	; (80009e0 <HAL_GPIO_Init+0x2b8>)
 800096a:	4013      	ands	r3, r2
 800096c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000976:	2b00      	cmp	r3, #0
 8000978:	d006      	beq.n	8000988 <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800097a:	4b19      	ldr	r3, [pc, #100]	; (80009e0 <HAL_GPIO_Init+0x2b8>)
 800097c:	68da      	ldr	r2, [r3, #12]
 800097e:	4918      	ldr	r1, [pc, #96]	; (80009e0 <HAL_GPIO_Init+0x2b8>)
 8000980:	69bb      	ldr	r3, [r7, #24]
 8000982:	4313      	orrs	r3, r2
 8000984:	60cb      	str	r3, [r1, #12]
 8000986:	e006      	b.n	8000996 <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000988:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <HAL_GPIO_Init+0x2b8>)
 800098a:	68da      	ldr	r2, [r3, #12]
 800098c:	69bb      	ldr	r3, [r7, #24]
 800098e:	43db      	mvns	r3, r3
 8000990:	4913      	ldr	r1, [pc, #76]	; (80009e0 <HAL_GPIO_Init+0x2b8>)
 8000992:	4013      	ands	r3, r2
 8000994:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000998:	3301      	adds	r3, #1
 800099a:	627b      	str	r3, [r7, #36]	; 0x24
 800099c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099e:	2b0f      	cmp	r3, #15
 80009a0:	f67f aed4 	bls.w	800074c <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 80009a4:	bf00      	nop
 80009a6:	372c      	adds	r7, #44	; 0x2c
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bc80      	pop	{r7}
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	10210000 	.word	0x10210000
 80009b4:	10110000 	.word	0x10110000
 80009b8:	10120000 	.word	0x10120000
 80009bc:	10310000 	.word	0x10310000
 80009c0:	10320000 	.word	0x10320000
 80009c4:	10220000 	.word	0x10220000
 80009c8:	40021000 	.word	0x40021000
 80009cc:	40010000 	.word	0x40010000
 80009d0:	40010800 	.word	0x40010800
 80009d4:	40010c00 	.word	0x40010c00
 80009d8:	40011000 	.word	0x40011000
 80009dc:	40011400 	.word	0x40011400
 80009e0:	40010400 	.word	0x40010400

080009e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	460b      	mov	r3, r1
 80009ee:	807b      	strh	r3, [r7, #2]
 80009f0:	4613      	mov	r3, r2
 80009f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80009f4:	787b      	ldrb	r3, [r7, #1]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d003      	beq.n	8000a02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80009fa:	887a      	ldrh	r2, [r7, #2]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000a00:	e003      	b.n	8000a0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000a02:	887b      	ldrh	r3, [r7, #2]
 8000a04:	041a      	lsls	r2, r3, #16
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	611a      	str	r2, [r3, #16]
}
 8000a0a:	bf00      	nop
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bc80      	pop	{r7}
 8000a12:	4770      	bx	lr

08000a14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b086      	sub	sp, #24
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f003 0301 	and.w	r3, r3, #1
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	f000 8087 	beq.w	8000b3c <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000a2e:	4b92      	ldr	r3, [pc, #584]	; (8000c78 <HAL_RCC_OscConfig+0x264>)
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	f003 030c 	and.w	r3, r3, #12
 8000a36:	2b04      	cmp	r3, #4
 8000a38:	d00c      	beq.n	8000a54 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a3a:	4b8f      	ldr	r3, [pc, #572]	; (8000c78 <HAL_RCC_OscConfig+0x264>)
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	f003 030c 	and.w	r3, r3, #12
 8000a42:	2b08      	cmp	r3, #8
 8000a44:	d112      	bne.n	8000a6c <HAL_RCC_OscConfig+0x58>
 8000a46:	4b8c      	ldr	r3, [pc, #560]	; (8000c78 <HAL_RCC_OscConfig+0x264>)
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a52:	d10b      	bne.n	8000a6c <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a54:	4b88      	ldr	r3, [pc, #544]	; (8000c78 <HAL_RCC_OscConfig+0x264>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d06c      	beq.n	8000b3a <HAL_RCC_OscConfig+0x126>
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d168      	bne.n	8000b3a <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	e22d      	b.n	8000ec8 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a74:	d106      	bne.n	8000a84 <HAL_RCC_OscConfig+0x70>
 8000a76:	4b80      	ldr	r3, [pc, #512]	; (8000c78 <HAL_RCC_OscConfig+0x264>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a7f      	ldr	r2, [pc, #508]	; (8000c78 <HAL_RCC_OscConfig+0x264>)
 8000a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a80:	6013      	str	r3, [r2, #0]
 8000a82:	e02e      	b.n	8000ae2 <HAL_RCC_OscConfig+0xce>
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d10c      	bne.n	8000aa6 <HAL_RCC_OscConfig+0x92>
 8000a8c:	4b7a      	ldr	r3, [pc, #488]	; (8000c78 <HAL_RCC_OscConfig+0x264>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a79      	ldr	r2, [pc, #484]	; (8000c78 <HAL_RCC_OscConfig+0x264>)
 8000a92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a96:	6013      	str	r3, [r2, #0]
 8000a98:	4b77      	ldr	r3, [pc, #476]	; (8000c78 <HAL_RCC_OscConfig+0x264>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a76      	ldr	r2, [pc, #472]	; (8000c78 <HAL_RCC_OscConfig+0x264>)
 8000a9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000aa2:	6013      	str	r3, [r2, #0]
 8000aa4:	e01d      	b.n	8000ae2 <HAL_RCC_OscConfig+0xce>
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000aae:	d10c      	bne.n	8000aca <HAL_RCC_OscConfig+0xb6>
 8000ab0:	4b71      	ldr	r3, [pc, #452]	; (8000c78 <HAL_RCC_OscConfig+0x264>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a70      	ldr	r2, [pc, #448]	; (8000c78 <HAL_RCC_OscConfig+0x264>)
 8000ab6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000aba:	6013      	str	r3, [r2, #0]
 8000abc:	4b6e      	ldr	r3, [pc, #440]	; (8000c78 <HAL_RCC_OscConfig+0x264>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a6d      	ldr	r2, [pc, #436]	; (8000c78 <HAL_RCC_OscConfig+0x264>)
 8000ac2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ac6:	6013      	str	r3, [r2, #0]
 8000ac8:	e00b      	b.n	8000ae2 <HAL_RCC_OscConfig+0xce>
 8000aca:	4b6b      	ldr	r3, [pc, #428]	; (8000c78 <HAL_RCC_OscConfig+0x264>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a6a      	ldr	r2, [pc, #424]	; (8000c78 <HAL_RCC_OscConfig+0x264>)
 8000ad0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ad4:	6013      	str	r3, [r2, #0]
 8000ad6:	4b68      	ldr	r3, [pc, #416]	; (8000c78 <HAL_RCC_OscConfig+0x264>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a67      	ldr	r2, [pc, #412]	; (8000c78 <HAL_RCC_OscConfig+0x264>)
 8000adc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ae0:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d013      	beq.n	8000b12 <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000aea:	f7ff fb87 	bl	80001fc <HAL_GetTick>
 8000aee:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000af0:	e008      	b.n	8000b04 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000af2:	f7ff fb83 	bl	80001fc <HAL_GetTick>
 8000af6:	4602      	mov	r2, r0
 8000af8:	693b      	ldr	r3, [r7, #16]
 8000afa:	1ad3      	subs	r3, r2, r3
 8000afc:	2b64      	cmp	r3, #100	; 0x64
 8000afe:	d901      	bls.n	8000b04 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8000b00:	2303      	movs	r3, #3
 8000b02:	e1e1      	b.n	8000ec8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b04:	4b5c      	ldr	r3, [pc, #368]	; (8000c78 <HAL_RCC_OscConfig+0x264>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d0f0      	beq.n	8000af2 <HAL_RCC_OscConfig+0xde>
 8000b10:	e014      	b.n	8000b3c <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b12:	f7ff fb73 	bl	80001fc <HAL_GetTick>
 8000b16:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b18:	e008      	b.n	8000b2c <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b1a:	f7ff fb6f 	bl	80001fc <HAL_GetTick>
 8000b1e:	4602      	mov	r2, r0
 8000b20:	693b      	ldr	r3, [r7, #16]
 8000b22:	1ad3      	subs	r3, r2, r3
 8000b24:	2b64      	cmp	r3, #100	; 0x64
 8000b26:	d901      	bls.n	8000b2c <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8000b28:	2303      	movs	r3, #3
 8000b2a:	e1cd      	b.n	8000ec8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b2c:	4b52      	ldr	r3, [pc, #328]	; (8000c78 <HAL_RCC_OscConfig+0x264>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d1f0      	bne.n	8000b1a <HAL_RCC_OscConfig+0x106>
 8000b38:	e000      	b.n	8000b3c <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b3a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f003 0302 	and.w	r3, r3, #2
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d063      	beq.n	8000c10 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000b48:	4b4b      	ldr	r3, [pc, #300]	; (8000c78 <HAL_RCC_OscConfig+0x264>)
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	f003 030c 	and.w	r3, r3, #12
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d00b      	beq.n	8000b6c <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000b54:	4b48      	ldr	r3, [pc, #288]	; (8000c78 <HAL_RCC_OscConfig+0x264>)
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	f003 030c 	and.w	r3, r3, #12
 8000b5c:	2b08      	cmp	r3, #8
 8000b5e:	d11c      	bne.n	8000b9a <HAL_RCC_OscConfig+0x186>
 8000b60:	4b45      	ldr	r3, [pc, #276]	; (8000c78 <HAL_RCC_OscConfig+0x264>)
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d116      	bne.n	8000b9a <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b6c:	4b42      	ldr	r3, [pc, #264]	; (8000c78 <HAL_RCC_OscConfig+0x264>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f003 0302 	and.w	r3, r3, #2
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d005      	beq.n	8000b84 <HAL_RCC_OscConfig+0x170>
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	691b      	ldr	r3, [r3, #16]
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d001      	beq.n	8000b84 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8000b80:	2301      	movs	r3, #1
 8000b82:	e1a1      	b.n	8000ec8 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b84:	4b3c      	ldr	r3, [pc, #240]	; (8000c78 <HAL_RCC_OscConfig+0x264>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	695b      	ldr	r3, [r3, #20]
 8000b90:	00db      	lsls	r3, r3, #3
 8000b92:	4939      	ldr	r1, [pc, #228]	; (8000c78 <HAL_RCC_OscConfig+0x264>)
 8000b94:	4313      	orrs	r3, r2
 8000b96:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b98:	e03a      	b.n	8000c10 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	691b      	ldr	r3, [r3, #16]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d020      	beq.n	8000be4 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ba2:	4b36      	ldr	r3, [pc, #216]	; (8000c7c <HAL_RCC_OscConfig+0x268>)
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ba8:	f7ff fb28 	bl	80001fc <HAL_GetTick>
 8000bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bae:	e008      	b.n	8000bc2 <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000bb0:	f7ff fb24 	bl	80001fc <HAL_GetTick>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	693b      	ldr	r3, [r7, #16]
 8000bb8:	1ad3      	subs	r3, r2, r3
 8000bba:	2b02      	cmp	r3, #2
 8000bbc:	d901      	bls.n	8000bc2 <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	e182      	b.n	8000ec8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bc2:	4b2d      	ldr	r3, [pc, #180]	; (8000c78 <HAL_RCC_OscConfig+0x264>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f003 0302 	and.w	r3, r3, #2
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d0f0      	beq.n	8000bb0 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bce:	4b2a      	ldr	r3, [pc, #168]	; (8000c78 <HAL_RCC_OscConfig+0x264>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	695b      	ldr	r3, [r3, #20]
 8000bda:	00db      	lsls	r3, r3, #3
 8000bdc:	4926      	ldr	r1, [pc, #152]	; (8000c78 <HAL_RCC_OscConfig+0x264>)
 8000bde:	4313      	orrs	r3, r2
 8000be0:	600b      	str	r3, [r1, #0]
 8000be2:	e015      	b.n	8000c10 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000be4:	4b25      	ldr	r3, [pc, #148]	; (8000c7c <HAL_RCC_OscConfig+0x268>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bea:	f7ff fb07 	bl	80001fc <HAL_GetTick>
 8000bee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000bf0:	e008      	b.n	8000c04 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000bf2:	f7ff fb03 	bl	80001fc <HAL_GetTick>
 8000bf6:	4602      	mov	r2, r0
 8000bf8:	693b      	ldr	r3, [r7, #16]
 8000bfa:	1ad3      	subs	r3, r2, r3
 8000bfc:	2b02      	cmp	r3, #2
 8000bfe:	d901      	bls.n	8000c04 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8000c00:	2303      	movs	r3, #3
 8000c02:	e161      	b.n	8000ec8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c04:	4b1c      	ldr	r3, [pc, #112]	; (8000c78 <HAL_RCC_OscConfig+0x264>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f003 0302 	and.w	r3, r3, #2
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d1f0      	bne.n	8000bf2 <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f003 0308 	and.w	r3, r3, #8
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d039      	beq.n	8000c90 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d019      	beq.n	8000c58 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c24:	4b16      	ldr	r3, [pc, #88]	; (8000c80 <HAL_RCC_OscConfig+0x26c>)
 8000c26:	2201      	movs	r2, #1
 8000c28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c2a:	f7ff fae7 	bl	80001fc <HAL_GetTick>
 8000c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c30:	e008      	b.n	8000c44 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c32:	f7ff fae3 	bl	80001fc <HAL_GetTick>
 8000c36:	4602      	mov	r2, r0
 8000c38:	693b      	ldr	r3, [r7, #16]
 8000c3a:	1ad3      	subs	r3, r2, r3
 8000c3c:	2b02      	cmp	r3, #2
 8000c3e:	d901      	bls.n	8000c44 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8000c40:	2303      	movs	r3, #3
 8000c42:	e141      	b.n	8000ec8 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c44:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <HAL_RCC_OscConfig+0x264>)
 8000c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c48:	f003 0302 	and.w	r3, r3, #2
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d0f0      	beq.n	8000c32 <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8000c50:	2001      	movs	r0, #1
 8000c52:	f000 fab1 	bl	80011b8 <RCC_Delay>
 8000c56:	e01b      	b.n	8000c90 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000c58:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <HAL_RCC_OscConfig+0x26c>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c5e:	f7ff facd 	bl	80001fc <HAL_GetTick>
 8000c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c64:	e00e      	b.n	8000c84 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c66:	f7ff fac9 	bl	80001fc <HAL_GetTick>
 8000c6a:	4602      	mov	r2, r0
 8000c6c:	693b      	ldr	r3, [r7, #16]
 8000c6e:	1ad3      	subs	r3, r2, r3
 8000c70:	2b02      	cmp	r3, #2
 8000c72:	d907      	bls.n	8000c84 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8000c74:	2303      	movs	r3, #3
 8000c76:	e127      	b.n	8000ec8 <HAL_RCC_OscConfig+0x4b4>
 8000c78:	40021000 	.word	0x40021000
 8000c7c:	42420000 	.word	0x42420000
 8000c80:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c84:	4b92      	ldr	r3, [pc, #584]	; (8000ed0 <HAL_RCC_OscConfig+0x4bc>)
 8000c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c88:	f003 0302 	and.w	r3, r3, #2
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d1ea      	bne.n	8000c66 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f003 0304 	and.w	r3, r3, #4
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	f000 80a6 	beq.w	8000dea <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ca2:	4b8b      	ldr	r3, [pc, #556]	; (8000ed0 <HAL_RCC_OscConfig+0x4bc>)
 8000ca4:	69db      	ldr	r3, [r3, #28]
 8000ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d10d      	bne.n	8000cca <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000cae:	4b88      	ldr	r3, [pc, #544]	; (8000ed0 <HAL_RCC_OscConfig+0x4bc>)
 8000cb0:	69db      	ldr	r3, [r3, #28]
 8000cb2:	4a87      	ldr	r2, [pc, #540]	; (8000ed0 <HAL_RCC_OscConfig+0x4bc>)
 8000cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cb8:	61d3      	str	r3, [r2, #28]
 8000cba:	4b85      	ldr	r3, [pc, #532]	; (8000ed0 <HAL_RCC_OscConfig+0x4bc>)
 8000cbc:	69db      	ldr	r3, [r3, #28]
 8000cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cca:	4b82      	ldr	r3, [pc, #520]	; (8000ed4 <HAL_RCC_OscConfig+0x4c0>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d118      	bne.n	8000d08 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000cd6:	4b7f      	ldr	r3, [pc, #508]	; (8000ed4 <HAL_RCC_OscConfig+0x4c0>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4a7e      	ldr	r2, [pc, #504]	; (8000ed4 <HAL_RCC_OscConfig+0x4c0>)
 8000cdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ce0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ce2:	f7ff fa8b 	bl	80001fc <HAL_GetTick>
 8000ce6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ce8:	e008      	b.n	8000cfc <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000cea:	f7ff fa87 	bl	80001fc <HAL_GetTick>
 8000cee:	4602      	mov	r2, r0
 8000cf0:	693b      	ldr	r3, [r7, #16]
 8000cf2:	1ad3      	subs	r3, r2, r3
 8000cf4:	2b64      	cmp	r3, #100	; 0x64
 8000cf6:	d901      	bls.n	8000cfc <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	e0e5      	b.n	8000ec8 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cfc:	4b75      	ldr	r3, [pc, #468]	; (8000ed4 <HAL_RCC_OscConfig+0x4c0>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d0f0      	beq.n	8000cea <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d106      	bne.n	8000d1e <HAL_RCC_OscConfig+0x30a>
 8000d10:	4b6f      	ldr	r3, [pc, #444]	; (8000ed0 <HAL_RCC_OscConfig+0x4bc>)
 8000d12:	6a1b      	ldr	r3, [r3, #32]
 8000d14:	4a6e      	ldr	r2, [pc, #440]	; (8000ed0 <HAL_RCC_OscConfig+0x4bc>)
 8000d16:	f043 0301 	orr.w	r3, r3, #1
 8000d1a:	6213      	str	r3, [r2, #32]
 8000d1c:	e02d      	b.n	8000d7a <HAL_RCC_OscConfig+0x366>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	68db      	ldr	r3, [r3, #12]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d10c      	bne.n	8000d40 <HAL_RCC_OscConfig+0x32c>
 8000d26:	4b6a      	ldr	r3, [pc, #424]	; (8000ed0 <HAL_RCC_OscConfig+0x4bc>)
 8000d28:	6a1b      	ldr	r3, [r3, #32]
 8000d2a:	4a69      	ldr	r2, [pc, #420]	; (8000ed0 <HAL_RCC_OscConfig+0x4bc>)
 8000d2c:	f023 0301 	bic.w	r3, r3, #1
 8000d30:	6213      	str	r3, [r2, #32]
 8000d32:	4b67      	ldr	r3, [pc, #412]	; (8000ed0 <HAL_RCC_OscConfig+0x4bc>)
 8000d34:	6a1b      	ldr	r3, [r3, #32]
 8000d36:	4a66      	ldr	r2, [pc, #408]	; (8000ed0 <HAL_RCC_OscConfig+0x4bc>)
 8000d38:	f023 0304 	bic.w	r3, r3, #4
 8000d3c:	6213      	str	r3, [r2, #32]
 8000d3e:	e01c      	b.n	8000d7a <HAL_RCC_OscConfig+0x366>
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	2b05      	cmp	r3, #5
 8000d46:	d10c      	bne.n	8000d62 <HAL_RCC_OscConfig+0x34e>
 8000d48:	4b61      	ldr	r3, [pc, #388]	; (8000ed0 <HAL_RCC_OscConfig+0x4bc>)
 8000d4a:	6a1b      	ldr	r3, [r3, #32]
 8000d4c:	4a60      	ldr	r2, [pc, #384]	; (8000ed0 <HAL_RCC_OscConfig+0x4bc>)
 8000d4e:	f043 0304 	orr.w	r3, r3, #4
 8000d52:	6213      	str	r3, [r2, #32]
 8000d54:	4b5e      	ldr	r3, [pc, #376]	; (8000ed0 <HAL_RCC_OscConfig+0x4bc>)
 8000d56:	6a1b      	ldr	r3, [r3, #32]
 8000d58:	4a5d      	ldr	r2, [pc, #372]	; (8000ed0 <HAL_RCC_OscConfig+0x4bc>)
 8000d5a:	f043 0301 	orr.w	r3, r3, #1
 8000d5e:	6213      	str	r3, [r2, #32]
 8000d60:	e00b      	b.n	8000d7a <HAL_RCC_OscConfig+0x366>
 8000d62:	4b5b      	ldr	r3, [pc, #364]	; (8000ed0 <HAL_RCC_OscConfig+0x4bc>)
 8000d64:	6a1b      	ldr	r3, [r3, #32]
 8000d66:	4a5a      	ldr	r2, [pc, #360]	; (8000ed0 <HAL_RCC_OscConfig+0x4bc>)
 8000d68:	f023 0301 	bic.w	r3, r3, #1
 8000d6c:	6213      	str	r3, [r2, #32]
 8000d6e:	4b58      	ldr	r3, [pc, #352]	; (8000ed0 <HAL_RCC_OscConfig+0x4bc>)
 8000d70:	6a1b      	ldr	r3, [r3, #32]
 8000d72:	4a57      	ldr	r2, [pc, #348]	; (8000ed0 <HAL_RCC_OscConfig+0x4bc>)
 8000d74:	f023 0304 	bic.w	r3, r3, #4
 8000d78:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	68db      	ldr	r3, [r3, #12]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d015      	beq.n	8000dae <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d82:	f7ff fa3b 	bl	80001fc <HAL_GetTick>
 8000d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d88:	e00a      	b.n	8000da0 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d8a:	f7ff fa37 	bl	80001fc <HAL_GetTick>
 8000d8e:	4602      	mov	r2, r0
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	1ad3      	subs	r3, r2, r3
 8000d94:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d901      	bls.n	8000da0 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	e093      	b.n	8000ec8 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000da0:	4b4b      	ldr	r3, [pc, #300]	; (8000ed0 <HAL_RCC_OscConfig+0x4bc>)
 8000da2:	6a1b      	ldr	r3, [r3, #32]
 8000da4:	f003 0302 	and.w	r3, r3, #2
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d0ee      	beq.n	8000d8a <HAL_RCC_OscConfig+0x376>
 8000dac:	e014      	b.n	8000dd8 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dae:	f7ff fa25 	bl	80001fc <HAL_GetTick>
 8000db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000db4:	e00a      	b.n	8000dcc <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000db6:	f7ff fa21 	bl	80001fc <HAL_GetTick>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	1ad3      	subs	r3, r2, r3
 8000dc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d901      	bls.n	8000dcc <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	e07d      	b.n	8000ec8 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000dcc:	4b40      	ldr	r3, [pc, #256]	; (8000ed0 <HAL_RCC_OscConfig+0x4bc>)
 8000dce:	6a1b      	ldr	r3, [r3, #32]
 8000dd0:	f003 0302 	and.w	r3, r3, #2
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d1ee      	bne.n	8000db6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000dd8:	7dfb      	ldrb	r3, [r7, #23]
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d105      	bne.n	8000dea <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000dde:	4b3c      	ldr	r3, [pc, #240]	; (8000ed0 <HAL_RCC_OscConfig+0x4bc>)
 8000de0:	69db      	ldr	r3, [r3, #28]
 8000de2:	4a3b      	ldr	r2, [pc, #236]	; (8000ed0 <HAL_RCC_OscConfig+0x4bc>)
 8000de4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000de8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	69db      	ldr	r3, [r3, #28]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d069      	beq.n	8000ec6 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000df2:	4b37      	ldr	r3, [pc, #220]	; (8000ed0 <HAL_RCC_OscConfig+0x4bc>)
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f003 030c 	and.w	r3, r3, #12
 8000dfa:	2b08      	cmp	r3, #8
 8000dfc:	d061      	beq.n	8000ec2 <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	69db      	ldr	r3, [r3, #28]
 8000e02:	2b02      	cmp	r3, #2
 8000e04:	d146      	bne.n	8000e94 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e06:	4b34      	ldr	r3, [pc, #208]	; (8000ed8 <HAL_RCC_OscConfig+0x4c4>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e0c:	f7ff f9f6 	bl	80001fc <HAL_GetTick>
 8000e10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e12:	e008      	b.n	8000e26 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e14:	f7ff f9f2 	bl	80001fc <HAL_GetTick>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	2b02      	cmp	r3, #2
 8000e20:	d901      	bls.n	8000e26 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8000e22:	2303      	movs	r3, #3
 8000e24:	e050      	b.n	8000ec8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e26:	4b2a      	ldr	r3, [pc, #168]	; (8000ed0 <HAL_RCC_OscConfig+0x4bc>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d1f0      	bne.n	8000e14 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6a1b      	ldr	r3, [r3, #32]
 8000e36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e3a:	d108      	bne.n	8000e4e <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e3c:	4b24      	ldr	r3, [pc, #144]	; (8000ed0 <HAL_RCC_OscConfig+0x4bc>)
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	4921      	ldr	r1, [pc, #132]	; (8000ed0 <HAL_RCC_OscConfig+0x4bc>)
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e4e:	4b20      	ldr	r3, [pc, #128]	; (8000ed0 <HAL_RCC_OscConfig+0x4bc>)
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6a19      	ldr	r1, [r3, #32]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e5e:	430b      	orrs	r3, r1
 8000e60:	491b      	ldr	r1, [pc, #108]	; (8000ed0 <HAL_RCC_OscConfig+0x4bc>)
 8000e62:	4313      	orrs	r3, r2
 8000e64:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000e66:	4b1c      	ldr	r3, [pc, #112]	; (8000ed8 <HAL_RCC_OscConfig+0x4c4>)
 8000e68:	2201      	movs	r2, #1
 8000e6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e6c:	f7ff f9c6 	bl	80001fc <HAL_GetTick>
 8000e70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e72:	e008      	b.n	8000e86 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e74:	f7ff f9c2 	bl	80001fc <HAL_GetTick>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	2b02      	cmp	r3, #2
 8000e80:	d901      	bls.n	8000e86 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8000e82:	2303      	movs	r3, #3
 8000e84:	e020      	b.n	8000ec8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e86:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <HAL_RCC_OscConfig+0x4bc>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d0f0      	beq.n	8000e74 <HAL_RCC_OscConfig+0x460>
 8000e92:	e018      	b.n	8000ec6 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e94:	4b10      	ldr	r3, [pc, #64]	; (8000ed8 <HAL_RCC_OscConfig+0x4c4>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e9a:	f7ff f9af 	bl	80001fc <HAL_GetTick>
 8000e9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ea0:	e008      	b.n	8000eb4 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ea2:	f7ff f9ab 	bl	80001fc <HAL_GetTick>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	1ad3      	subs	r3, r2, r3
 8000eac:	2b02      	cmp	r3, #2
 8000eae:	d901      	bls.n	8000eb4 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	e009      	b.n	8000ec8 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000eb4:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_RCC_OscConfig+0x4bc>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d1f0      	bne.n	8000ea2 <HAL_RCC_OscConfig+0x48e>
 8000ec0:	e001      	b.n	8000ec6 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e000      	b.n	8000ec8 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8000ec6:	2300      	movs	r3, #0
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3718      	adds	r7, #24
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	40007000 	.word	0x40007000
 8000ed8:	42420060 	.word	0x42420060

08000edc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000eea:	4b7e      	ldr	r3, [pc, #504]	; (80010e4 <HAL_RCC_ClockConfig+0x208>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f003 0307 	and.w	r3, r3, #7
 8000ef2:	683a      	ldr	r2, [r7, #0]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d910      	bls.n	8000f1a <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ef8:	4b7a      	ldr	r3, [pc, #488]	; (80010e4 <HAL_RCC_ClockConfig+0x208>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f023 0207 	bic.w	r2, r3, #7
 8000f00:	4978      	ldr	r1, [pc, #480]	; (80010e4 <HAL_RCC_ClockConfig+0x208>)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000f08:	4b76      	ldr	r3, [pc, #472]	; (80010e4 <HAL_RCC_ClockConfig+0x208>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f003 0307 	and.w	r3, r3, #7
 8000f10:	683a      	ldr	r2, [r7, #0]
 8000f12:	429a      	cmp	r2, r3
 8000f14:	d001      	beq.n	8000f1a <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e0e0      	b.n	80010dc <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f003 0302 	and.w	r3, r3, #2
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d020      	beq.n	8000f68 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f003 0304 	and.w	r3, r3, #4
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d005      	beq.n	8000f3e <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f32:	4b6d      	ldr	r3, [pc, #436]	; (80010e8 <HAL_RCC_ClockConfig+0x20c>)
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	4a6c      	ldr	r2, [pc, #432]	; (80010e8 <HAL_RCC_ClockConfig+0x20c>)
 8000f38:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000f3c:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f003 0308 	and.w	r3, r3, #8
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d005      	beq.n	8000f56 <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f4a:	4b67      	ldr	r3, [pc, #412]	; (80010e8 <HAL_RCC_ClockConfig+0x20c>)
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	4a66      	ldr	r2, [pc, #408]	; (80010e8 <HAL_RCC_ClockConfig+0x20c>)
 8000f50:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000f54:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f56:	4b64      	ldr	r3, [pc, #400]	; (80010e8 <HAL_RCC_ClockConfig+0x20c>)
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	4961      	ldr	r1, [pc, #388]	; (80010e8 <HAL_RCC_ClockConfig+0x20c>)
 8000f64:	4313      	orrs	r3, r2
 8000f66:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f003 0301 	and.w	r3, r3, #1
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d06a      	beq.n	800104a <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d107      	bne.n	8000f8c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f7c:	4b5a      	ldr	r3, [pc, #360]	; (80010e8 <HAL_RCC_ClockConfig+0x20c>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d115      	bne.n	8000fb4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	e0a7      	b.n	80010dc <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d107      	bne.n	8000fa4 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f94:	4b54      	ldr	r3, [pc, #336]	; (80010e8 <HAL_RCC_ClockConfig+0x20c>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d109      	bne.n	8000fb4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	e09b      	b.n	80010dc <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fa4:	4b50      	ldr	r3, [pc, #320]	; (80010e8 <HAL_RCC_ClockConfig+0x20c>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f003 0302 	and.w	r3, r3, #2
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d101      	bne.n	8000fb4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e093      	b.n	80010dc <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000fb4:	4b4c      	ldr	r3, [pc, #304]	; (80010e8 <HAL_RCC_ClockConfig+0x20c>)
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f023 0203 	bic.w	r2, r3, #3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	4949      	ldr	r1, [pc, #292]	; (80010e8 <HAL_RCC_ClockConfig+0x20c>)
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000fc6:	f7ff f919 	bl	80001fc <HAL_GetTick>
 8000fca:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d112      	bne.n	8000ffa <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fd4:	e00a      	b.n	8000fec <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fd6:	f7ff f911 	bl	80001fc <HAL_GetTick>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d901      	bls.n	8000fec <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	e077      	b.n	80010dc <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fec:	4b3e      	ldr	r3, [pc, #248]	; (80010e8 <HAL_RCC_ClockConfig+0x20c>)
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f003 030c 	and.w	r3, r3, #12
 8000ff4:	2b04      	cmp	r3, #4
 8000ff6:	d1ee      	bne.n	8000fd6 <HAL_RCC_ClockConfig+0xfa>
 8000ff8:	e027      	b.n	800104a <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	2b02      	cmp	r3, #2
 8001000:	d11d      	bne.n	800103e <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001002:	e00a      	b.n	800101a <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001004:	f7ff f8fa 	bl	80001fc <HAL_GetTick>
 8001008:	4602      	mov	r2, r0
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001012:	4293      	cmp	r3, r2
 8001014:	d901      	bls.n	800101a <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8001016:	2303      	movs	r3, #3
 8001018:	e060      	b.n	80010dc <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800101a:	4b33      	ldr	r3, [pc, #204]	; (80010e8 <HAL_RCC_ClockConfig+0x20c>)
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f003 030c 	and.w	r3, r3, #12
 8001022:	2b08      	cmp	r3, #8
 8001024:	d1ee      	bne.n	8001004 <HAL_RCC_ClockConfig+0x128>
 8001026:	e010      	b.n	800104a <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001028:	f7ff f8e8 	bl	80001fc <HAL_GetTick>
 800102c:	4602      	mov	r2, r0
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	f241 3288 	movw	r2, #5000	; 0x1388
 8001036:	4293      	cmp	r3, r2
 8001038:	d901      	bls.n	800103e <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 800103a:	2303      	movs	r3, #3
 800103c:	e04e      	b.n	80010dc <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800103e:	4b2a      	ldr	r3, [pc, #168]	; (80010e8 <HAL_RCC_ClockConfig+0x20c>)
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f003 030c 	and.w	r3, r3, #12
 8001046:	2b00      	cmp	r3, #0
 8001048:	d1ee      	bne.n	8001028 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800104a:	4b26      	ldr	r3, [pc, #152]	; (80010e4 <HAL_RCC_ClockConfig+0x208>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	683a      	ldr	r2, [r7, #0]
 8001054:	429a      	cmp	r2, r3
 8001056:	d210      	bcs.n	800107a <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001058:	4b22      	ldr	r3, [pc, #136]	; (80010e4 <HAL_RCC_ClockConfig+0x208>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f023 0207 	bic.w	r2, r3, #7
 8001060:	4920      	ldr	r1, [pc, #128]	; (80010e4 <HAL_RCC_ClockConfig+0x208>)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	4313      	orrs	r3, r2
 8001066:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001068:	4b1e      	ldr	r3, [pc, #120]	; (80010e4 <HAL_RCC_ClockConfig+0x208>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 0307 	and.w	r3, r3, #7
 8001070:	683a      	ldr	r2, [r7, #0]
 8001072:	429a      	cmp	r2, r3
 8001074:	d001      	beq.n	800107a <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e030      	b.n	80010dc <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f003 0304 	and.w	r3, r3, #4
 8001082:	2b00      	cmp	r3, #0
 8001084:	d008      	beq.n	8001098 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001086:	4b18      	ldr	r3, [pc, #96]	; (80010e8 <HAL_RCC_ClockConfig+0x20c>)
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	68db      	ldr	r3, [r3, #12]
 8001092:	4915      	ldr	r1, [pc, #84]	; (80010e8 <HAL_RCC_ClockConfig+0x20c>)
 8001094:	4313      	orrs	r3, r2
 8001096:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f003 0308 	and.w	r3, r3, #8
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d009      	beq.n	80010b8 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80010a4:	4b10      	ldr	r3, [pc, #64]	; (80010e8 <HAL_RCC_ClockConfig+0x20c>)
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	691b      	ldr	r3, [r3, #16]
 80010b0:	00db      	lsls	r3, r3, #3
 80010b2:	490d      	ldr	r1, [pc, #52]	; (80010e8 <HAL_RCC_ClockConfig+0x20c>)
 80010b4:	4313      	orrs	r3, r2
 80010b6:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80010b8:	f000 f81c 	bl	80010f4 <HAL_RCC_GetSysClockFreq>
 80010bc:	4601      	mov	r1, r0
 80010be:	4b0a      	ldr	r3, [pc, #40]	; (80010e8 <HAL_RCC_ClockConfig+0x20c>)
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	091b      	lsrs	r3, r3, #4
 80010c4:	f003 030f 	and.w	r3, r3, #15
 80010c8:	4a08      	ldr	r2, [pc, #32]	; (80010ec <HAL_RCC_ClockConfig+0x210>)
 80010ca:	5cd3      	ldrb	r3, [r2, r3]
 80010cc:	fa21 f303 	lsr.w	r3, r1, r3
 80010d0:	4a07      	ldr	r2, [pc, #28]	; (80010f0 <HAL_RCC_ClockConfig+0x214>)
 80010d2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80010d4:	2000      	movs	r0, #0
 80010d6:	f7ff f84f 	bl	8000178 <HAL_InitTick>
  
  return HAL_OK;
 80010da:	2300      	movs	r3, #0
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40022000 	.word	0x40022000
 80010e8:	40021000 	.word	0x40021000
 80010ec:	08002048 	.word	0x08002048
 80010f0:	2000000c 	.word	0x2000000c

080010f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80010f4:	b490      	push	{r4, r7}
 80010f6:	b08a      	sub	sp, #40	; 0x28
 80010f8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80010fa:	4b2a      	ldr	r3, [pc, #168]	; (80011a4 <HAL_RCC_GetSysClockFreq+0xb0>)
 80010fc:	1d3c      	adds	r4, r7, #4
 80010fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001100:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001104:	4b28      	ldr	r3, [pc, #160]	; (80011a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001106:	881b      	ldrh	r3, [r3, #0]
 8001108:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800110a:	2300      	movs	r3, #0
 800110c:	61fb      	str	r3, [r7, #28]
 800110e:	2300      	movs	r3, #0
 8001110:	61bb      	str	r3, [r7, #24]
 8001112:	2300      	movs	r3, #0
 8001114:	627b      	str	r3, [r7, #36]	; 0x24
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800111a:	2300      	movs	r3, #0
 800111c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800111e:	4b23      	ldr	r3, [pc, #140]	; (80011ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	f003 030c 	and.w	r3, r3, #12
 800112a:	2b04      	cmp	r3, #4
 800112c:	d002      	beq.n	8001134 <HAL_RCC_GetSysClockFreq+0x40>
 800112e:	2b08      	cmp	r3, #8
 8001130:	d003      	beq.n	800113a <HAL_RCC_GetSysClockFreq+0x46>
 8001132:	e02d      	b.n	8001190 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001134:	4b1e      	ldr	r3, [pc, #120]	; (80011b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001136:	623b      	str	r3, [r7, #32]
      break;
 8001138:	e02d      	b.n	8001196 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	0c9b      	lsrs	r3, r3, #18
 800113e:	f003 030f 	and.w	r3, r3, #15
 8001142:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001146:	4413      	add	r3, r2
 8001148:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800114c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d013      	beq.n	8001180 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001158:	4b14      	ldr	r3, [pc, #80]	; (80011ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	0c5b      	lsrs	r3, r3, #17
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001166:	4413      	add	r3, r2
 8001168:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800116c:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	4a0f      	ldr	r2, [pc, #60]	; (80011b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001172:	fb02 f203 	mul.w	r2, r2, r3
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	fbb2 f3f3 	udiv	r3, r2, r3
 800117c:	627b      	str	r3, [r7, #36]	; 0x24
 800117e:	e004      	b.n	800118a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	4a0c      	ldr	r2, [pc, #48]	; (80011b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001184:	fb02 f303 	mul.w	r3, r2, r3
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800118a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118c:	623b      	str	r3, [r7, #32]
      break;
 800118e:	e002      	b.n	8001196 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001190:	4b07      	ldr	r3, [pc, #28]	; (80011b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001192:	623b      	str	r3, [r7, #32]
      break;
 8001194:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001196:	6a3b      	ldr	r3, [r7, #32]
}
 8001198:	4618      	mov	r0, r3
 800119a:	3728      	adds	r7, #40	; 0x28
 800119c:	46bd      	mov	sp, r7
 800119e:	bc90      	pop	{r4, r7}
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	08001fd0 	.word	0x08001fd0
 80011a8:	08001fe0 	.word	0x08001fe0
 80011ac:	40021000 	.word	0x40021000
 80011b0:	007a1200 	.word	0x007a1200
 80011b4:	003d0900 	.word	0x003d0900

080011b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80011c0:	4b0a      	ldr	r3, [pc, #40]	; (80011ec <RCC_Delay+0x34>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a0a      	ldr	r2, [pc, #40]	; (80011f0 <RCC_Delay+0x38>)
 80011c6:	fba2 2303 	umull	r2, r3, r2, r3
 80011ca:	0a5b      	lsrs	r3, r3, #9
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	fb02 f303 	mul.w	r3, r2, r3
 80011d2:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80011d4:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	1e5a      	subs	r2, r3, #1
 80011da:	60fa      	str	r2, [r7, #12]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d1f9      	bne.n	80011d4 <RCC_Delay+0x1c>
}
 80011e0:	bf00      	nop
 80011e2:	3714      	adds	r7, #20
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bc80      	pop	{r7}
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	2000000c 	.word	0x2000000c
 80011f0:	10624dd3 	.word	0x10624dd3

080011f4 <HAL_SPI_Transmit>:
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08a      	sub	sp, #40	; 0x28
 80011f8:	af02      	add	r7, sp, #8
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	603b      	str	r3, [r7, #0]
 8001200:	4613      	mov	r3, r2
 8001202:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8001204:	2300      	movs	r3, #0
 8001206:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001208:	2300      	movs	r3, #0
 800120a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001212:	2b01      	cmp	r3, #1
 8001214:	d101      	bne.n	800121a <HAL_SPI_Transmit+0x26>
 8001216:	2302      	movs	r3, #2
 8001218:	e125      	b.n	8001466 <HAL_SPI_Transmit+0x272>
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	2201      	movs	r2, #1
 800121e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001222:	f7fe ffeb 	bl	80001fc <HAL_GetTick>
 8001226:	61b8      	str	r0, [r7, #24]

  if(hspi->State != HAL_SPI_STATE_READY)
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800122e:	b2db      	uxtb	r3, r3
 8001230:	2b01      	cmp	r3, #1
 8001232:	d002      	beq.n	800123a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001234:	2302      	movs	r3, #2
 8001236:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001238:	e10c      	b.n	8001454 <HAL_SPI_Transmit+0x260>
  }

  if((pData == NULL ) || (Size == 0U))
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d002      	beq.n	8001246 <HAL_SPI_Transmit+0x52>
 8001240:	88fb      	ldrh	r3, [r7, #6]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d102      	bne.n	800124c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	77fb      	strb	r3, [r7, #31]
    goto error;
 800124a:	e103      	b.n	8001454 <HAL_SPI_Transmit+0x260>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	2203      	movs	r2, #3
 8001250:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	2200      	movs	r2, #0
 8001258:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	68ba      	ldr	r2, [r7, #8]
 800125e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	88fa      	ldrh	r2, [r7, #6]
 8001264:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	88fa      	ldrh	r2, [r7, #6]
 800126a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	2200      	movs	r2, #0
 8001270:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	2200      	movs	r2, #0
 8001276:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	2200      	movs	r2, #0
 800127c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	2200      	movs	r2, #0
 8001282:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	2200      	movs	r2, #0
 8001288:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001292:	d107      	bne.n	80012a4 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80012a2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012ae:	2b40      	cmp	r3, #64	; 0x40
 80012b0:	d007      	beq.n	80012c2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80012c0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80012ca:	d147      	bne.n	800135c <HAL_SPI_Transmit+0x168>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d004      	beq.n	80012de <HAL_SPI_Transmit+0xea>
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80012d8:	b29b      	uxth	r3, r3
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d138      	bne.n	8001350 <HAL_SPI_Transmit+0x15c>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	881a      	ldrh	r2, [r3, #0]
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	3302      	adds	r3, #2
 80012ec:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	3b01      	subs	r3, #1
 80012f6:	b29a      	uxth	r2, r3
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80012fc:	e028      	b.n	8001350 <HAL_SPI_Transmit+0x15c>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	f003 0302 	and.w	r3, r3, #2
 8001308:	2b02      	cmp	r3, #2
 800130a:	d10f      	bne.n	800132c <HAL_SPI_Transmit+0x138>
      {
          hspi->Instance->DR = *((uint16_t *)pData);
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	881a      	ldrh	r2, [r3, #0]
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	3302      	adds	r3, #2
 800131a:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount--;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001320:	b29b      	uxth	r3, r3
 8001322:	3b01      	subs	r3, #1
 8001324:	b29a      	uxth	r2, r3
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	86da      	strh	r2, [r3, #54]	; 0x36
 800132a:	e011      	b.n	8001350 <HAL_SPI_Transmit+0x15c>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d00b      	beq.n	800134a <HAL_SPI_Transmit+0x156>
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001338:	d00a      	beq.n	8001350 <HAL_SPI_Transmit+0x15c>
 800133a:	f7fe ff5f 	bl	80001fc <HAL_GetTick>
 800133e:	4602      	mov	r2, r0
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	683a      	ldr	r2, [r7, #0]
 8001346:	429a      	cmp	r2, r3
 8001348:	d802      	bhi.n	8001350 <HAL_SPI_Transmit+0x15c>
        {
          errorcode = HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800134e:	e081      	b.n	8001454 <HAL_SPI_Transmit+0x260>
    while (hspi->TxXferCount > 0U)
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001354:	b29b      	uxth	r3, r3
 8001356:	2b00      	cmp	r3, #0
 8001358:	d1d1      	bne.n	80012fe <HAL_SPI_Transmit+0x10a>
 800135a:	e048      	b.n	80013ee <HAL_SPI_Transmit+0x1fa>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d004      	beq.n	800136e <HAL_SPI_Transmit+0x17a>
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001368:	b29b      	uxth	r3, r3
 800136a:	2b01      	cmp	r3, #1
 800136c:	d13a      	bne.n	80013e4 <HAL_SPI_Transmit+0x1f0>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	330c      	adds	r3, #12
 8001374:	68ba      	ldr	r2, [r7, #8]
 8001376:	7812      	ldrb	r2, [r2, #0]
 8001378:	701a      	strb	r2, [r3, #0]
      pData += sizeof(uint8_t);
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	3301      	adds	r3, #1
 800137e:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001384:	b29b      	uxth	r3, r3
 8001386:	3b01      	subs	r3, #1
 8001388:	b29a      	uxth	r2, r3
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800138e:	e029      	b.n	80013e4 <HAL_SPI_Transmit+0x1f0>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	2b02      	cmp	r3, #2
 800139c:	d110      	bne.n	80013c0 <HAL_SPI_Transmit+0x1cc>
      {
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	330c      	adds	r3, #12
 80013a4:	68ba      	ldr	r2, [r7, #8]
 80013a6:	7812      	ldrb	r2, [r2, #0]
 80013a8:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	3301      	adds	r3, #1
 80013ae:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	3b01      	subs	r3, #1
 80013b8:	b29a      	uxth	r2, r3
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	86da      	strh	r2, [r3, #54]	; 0x36
 80013be:	e011      	b.n	80013e4 <HAL_SPI_Transmit+0x1f0>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d00b      	beq.n	80013de <HAL_SPI_Transmit+0x1ea>
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013cc:	d00a      	beq.n	80013e4 <HAL_SPI_Transmit+0x1f0>
 80013ce:	f7fe ff15 	bl	80001fc <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	683a      	ldr	r2, [r7, #0]
 80013da:	429a      	cmp	r2, r3
 80013dc:	d802      	bhi.n	80013e4 <HAL_SPI_Transmit+0x1f0>
        {
          errorcode = HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80013e2:	e037      	b.n	8001454 <HAL_SPI_Transmit+0x260>
    while (hspi->TxXferCount > 0U)
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d1d0      	bne.n	8001390 <HAL_SPI_Transmit+0x19c>
      }
    }
  }

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	9300      	str	r3, [sp, #0]
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	2201      	movs	r2, #1
 80013f6:	2102      	movs	r1, #2
 80013f8:	68f8      	ldr	r0, [r7, #12]
 80013fa:	f000 f9d8 	bl	80017ae <SPI_WaitFlagStateUntilTimeout>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d002      	beq.n	800140a <HAL_SPI_Transmit+0x216>
  {
    errorcode = HAL_TIMEOUT;
 8001404:	2303      	movs	r3, #3
 8001406:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001408:	e024      	b.n	8001454 <HAL_SPI_Transmit+0x260>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	6839      	ldr	r1, [r7, #0]
 800140e:	68f8      	ldr	r0, [r7, #12]
 8001410:	f000 fa36 	bl	8001880 <SPI_CheckFlag_BSY>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d005      	beq.n	8001426 <HAL_SPI_Transmit+0x232>
  {
    errorcode = HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	77fb      	strb	r3, [r7, #31]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	2220      	movs	r2, #32
 8001422:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001424:	e016      	b.n	8001454 <HAL_SPI_Transmit+0x260>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d10a      	bne.n	8001444 <HAL_SPI_Transmit+0x250>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800142e:	2300      	movs	r3, #0
 8001430:	617b      	str	r3, [r7, #20]
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	617b      	str	r3, [r7, #20]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	617b      	str	r3, [r7, #20]
 8001442:	697b      	ldr	r3, [r7, #20]
  {
     SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001448:	2b00      	cmp	r3, #0
 800144a:	d002      	beq.n	8001452 <HAL_SPI_Transmit+0x25e>
  {
    errorcode = HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	77fb      	strb	r3, [r7, #31]
 8001450:	e000      	b.n	8001454 <HAL_SPI_Transmit+0x260>
  }

error:
 8001452:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2201      	movs	r2, #1
 8001458:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	2200      	movs	r2, #0
 8001460:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001464:	7ffb      	ldrb	r3, [r7, #31]
}
 8001466:	4618      	mov	r0, r3
 8001468:	3720      	adds	r7, #32
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <HAL_SPI_TransmitReceive>:
  * @param  Size: amount of data to be sent and received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b08c      	sub	sp, #48	; 0x30
 8001472:	af02      	add	r7, sp, #8
 8001474:	60f8      	str	r0, [r7, #12]
 8001476:	60b9      	str	r1, [r7, #8]
 8001478:	607a      	str	r2, [r7, #4]
 800147a:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 800147c:	2300      	movs	r3, #0
 800147e:	61fb      	str	r3, [r7, #28]
 8001480:	2300      	movs	r3, #0
 8001482:	61bb      	str	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg1 = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 8001488:	2301      	movs	r3, #1
 800148a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef errorcode = HAL_OK;
 800148c:	2300      	movs	r3, #0
 800148e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001498:	2b01      	cmp	r3, #1
 800149a:	d101      	bne.n	80014a0 <HAL_SPI_TransmitReceive+0x32>
 800149c:	2302      	movs	r3, #2
 800149e:	e182      	b.n	80017a6 <HAL_SPI_TransmitReceive+0x338>
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	2201      	movs	r2, #1
 80014a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80014a8:	f7fe fea8 	bl	80001fc <HAL_GetTick>
 80014ac:	6178      	str	r0, [r7, #20]
  
  tmp  = hspi->State;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	61fb      	str	r3, [r7, #28]
  tmp1 = hspi->Init.Mode;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	61bb      	str	r3, [r7, #24]
  
  if(!((tmp == HAL_SPI_STATE_READY) || \
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d00e      	beq.n	80014e2 <HAL_SPI_TransmitReceive+0x74>
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80014ca:	d106      	bne.n	80014da <HAL_SPI_TransmitReceive+0x6c>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d102      	bne.n	80014da <HAL_SPI_TransmitReceive+0x6c>
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	2b04      	cmp	r3, #4
 80014d8:	d003      	beq.n	80014e2 <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 80014da:	2302      	movs	r3, #2
 80014dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80014e0:	e157      	b.n	8001792 <HAL_SPI_TransmitReceive+0x324>
  }

  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d005      	beq.n	80014f4 <HAL_SPI_TransmitReceive+0x86>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d002      	beq.n	80014f4 <HAL_SPI_TransmitReceive+0x86>
 80014ee:	887b      	ldrh	r3, [r7, #2]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d103      	bne.n	80014fc <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80014fa:	e14a      	b.n	8001792 <HAL_SPI_TransmitReceive+0x324>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if(hspi->State == HAL_SPI_STATE_READY)
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001502:	b2db      	uxtb	r3, r3
 8001504:	2b01      	cmp	r3, #1
 8001506:	d103      	bne.n	8001510 <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	2205      	movs	r2, #5
 800150c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2200      	movs	r2, #0
 8001514:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	887a      	ldrh	r2, [r7, #2]
 8001520:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	887a      	ldrh	r2, [r7, #2]
 8001526:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	68ba      	ldr	r2, [r7, #8]
 800152c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	887a      	ldrh	r2, [r7, #2]
 8001532:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	887a      	ldrh	r2, [r7, #2]
 8001538:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	2200      	movs	r2, #0
 800153e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2200      	movs	r2, #0
 8001544:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001550:	2b40      	cmp	r3, #64	; 0x40
 8001552:	d007      	beq.n	8001564 <HAL_SPI_TransmitReceive+0xf6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001562:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800156c:	d171      	bne.n	8001652 <HAL_SPI_TransmitReceive+0x1e4>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d004      	beq.n	8001580 <HAL_SPI_TransmitReceive+0x112>
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800157a:	b29b      	uxth	r3, r3
 800157c:	2b01      	cmp	r3, #1
 800157e:	d15d      	bne.n	800163c <HAL_SPI_TransmitReceive+0x1ce>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	881a      	ldrh	r2, [r3, #0]
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	3302      	adds	r3, #2
 800158e:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001594:	b29b      	uxth	r3, r3
 8001596:	3b01      	subs	r3, #1
 8001598:	b29a      	uxth	r2, r3
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800159e:	e04d      	b.n	800163c <HAL_SPI_TransmitReceive+0x1ce>
    {
      /* Check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80015a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d01c      	beq.n	80015e0 <HAL_SPI_TransmitReceive+0x172>
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d017      	beq.n	80015e0 <HAL_SPI_TransmitReceive+0x172>
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d110      	bne.n	80015e0 <HAL_SPI_TransmitReceive+0x172>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	881a      	ldrh	r2, [r3, #0]
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	3302      	adds	r3, #2
 80015cc:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	3b01      	subs	r3, #1
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 80015dc:	2300      	movs	r3, #0
 80015de:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d018      	beq.n	800161c <HAL_SPI_TransmitReceive+0x1ae>
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	f003 0301 	and.w	r3, r3, #1
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d111      	bne.n	800161c <HAL_SPI_TransmitReceive+0x1ae>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	68db      	ldr	r3, [r3, #12]
 80015fe:	b29a      	uxth	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	3302      	adds	r3, #2
 8001608:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800160e:	b29b      	uxth	r3, r3
 8001610:	3b01      	subs	r3, #1
 8001612:	b29a      	uxth	r2, r3
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 8001618:	2301      	movs	r3, #1
 800161a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 800161c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800161e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001622:	d00b      	beq.n	800163c <HAL_SPI_TransmitReceive+0x1ce>
 8001624:	f7fe fdea 	bl	80001fc <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001630:	429a      	cmp	r2, r3
 8001632:	d803      	bhi.n	800163c <HAL_SPI_TransmitReceive+0x1ce>
      {
        errorcode = HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800163a:	e0aa      	b.n	8001792 <HAL_SPI_TransmitReceive+0x324>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001640:	b29b      	uxth	r3, r3
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1ac      	bne.n	80015a0 <HAL_SPI_TransmitReceive+0x132>
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800164a:	b29b      	uxth	r3, r3
 800164c:	2b00      	cmp	r3, #0
 800164e:	d1a7      	bne.n	80015a0 <HAL_SPI_TransmitReceive+0x132>
 8001650:	e070      	b.n	8001734 <HAL_SPI_TransmitReceive+0x2c6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d004      	beq.n	8001664 <HAL_SPI_TransmitReceive+0x1f6>
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800165e:	b29b      	uxth	r3, r3
 8001660:	2b01      	cmp	r3, #1
 8001662:	d15d      	bne.n	8001720 <HAL_SPI_TransmitReceive+0x2b2>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	330c      	adds	r3, #12
 800166a:	68ba      	ldr	r2, [r7, #8]
 800166c:	7812      	ldrb	r2, [r2, #0]
 800166e:	701a      	strb	r2, [r3, #0]
      pTxData += sizeof(uint8_t);
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	3301      	adds	r3, #1
 8001674:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800167a:	b29b      	uxth	r3, r3
 800167c:	3b01      	subs	r3, #1
 800167e:	b29a      	uxth	r2, r3
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001684:	e04c      	b.n	8001720 <HAL_SPI_TransmitReceive+0x2b2>
    {
      /* check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8001686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001688:	2b00      	cmp	r3, #0
 800168a:	d01c      	beq.n	80016c6 <HAL_SPI_TransmitReceive+0x258>
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001690:	b29b      	uxth	r3, r3
 8001692:	2b00      	cmp	r3, #0
 8001694:	d017      	beq.n	80016c6 <HAL_SPI_TransmitReceive+0x258>
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f003 0302 	and.w	r3, r3, #2
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d110      	bne.n	80016c6 <HAL_SPI_TransmitReceive+0x258>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	1c5a      	adds	r2, r3, #1
 80016a8:	60ba      	str	r2, [r7, #8]
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	6812      	ldr	r2, [r2, #0]
 80016ae:	320c      	adds	r2, #12
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	3b01      	subs	r3, #1
 80016bc:	b29a      	uxth	r2, r3
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 80016c2:	2300      	movs	r3, #0
 80016c4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d017      	beq.n	8001700 <HAL_SPI_TransmitReceive+0x292>
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d110      	bne.n	8001700 <HAL_SPI_TransmitReceive+0x292>
      {
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	68d9      	ldr	r1, [r3, #12]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	1c5a      	adds	r2, r3, #1
 80016e8:	607a      	str	r2, [r7, #4]
 80016ea:	b2ca      	uxtb	r2, r1
 80016ec:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	3b01      	subs	r3, #1
 80016f6:	b29a      	uxth	r2, r3
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 80016fc:	2301      	movs	r3, #1
 80016fe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8001700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001706:	d00b      	beq.n	8001720 <HAL_SPI_TransmitReceive+0x2b2>
 8001708:	f7fe fd78 	bl	80001fc <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001714:	429a      	cmp	r2, r3
 8001716:	d803      	bhi.n	8001720 <HAL_SPI_TransmitReceive+0x2b2>
      {
        errorcode = HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800171e:	e038      	b.n	8001792 <HAL_SPI_TransmitReceive+0x324>
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001724:	b29b      	uxth	r3, r3
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1ad      	bne.n	8001686 <HAL_SPI_TransmitReceive+0x218>
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800172e:	b29b      	uxth	r3, r3
 8001730:	2b00      	cmp	r3, #0
 8001732:	d1a8      	bne.n	8001686 <HAL_SPI_TransmitReceive+0x218>
    }
  }
#endif /* USE_SPI_CRC */

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	9300      	str	r3, [sp, #0]
 8001738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800173a:	2201      	movs	r2, #1
 800173c:	2102      	movs	r1, #2
 800173e:	68f8      	ldr	r0, [r7, #12]
 8001740:	f000 f835 	bl	80017ae <SPI_WaitFlagStateUntilTimeout>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d003      	beq.n	8001752 <HAL_SPI_TransmitReceive+0x2e4>
  {
    errorcode = HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8001750:	e01f      	b.n	8001792 <HAL_SPI_TransmitReceive+0x324>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8001752:	697a      	ldr	r2, [r7, #20]
 8001754:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001756:	68f8      	ldr	r0, [r7, #12]
 8001758:	f000 f892 	bl	8001880 <SPI_CheckFlag_BSY>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d006      	beq.n	8001770 <HAL_SPI_TransmitReceive+0x302>
  {
    errorcode = HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	2220      	movs	r2, #32
 800176c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800176e:	e010      	b.n	8001792 <HAL_SPI_TransmitReceive+0x324>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d10b      	bne.n	8001790 <HAL_SPI_TransmitReceive+0x322>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001778:	2300      	movs	r3, #0
 800177a:	613b      	str	r3, [r7, #16]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	68db      	ldr	r3, [r3, #12]
 8001782:	613b      	str	r3, [r7, #16]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	613b      	str	r3, [r7, #16]
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	e000      	b.n	8001792 <HAL_SPI_TransmitReceive+0x324>
  }
  
error :
 8001790:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2201      	movs	r2, #1
 8001796:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	2200      	movs	r2, #0
 800179e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80017a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3728      	adds	r7, #40	; 0x28
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b084      	sub	sp, #16
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	60f8      	str	r0, [r7, #12]
 80017b6:	60b9      	str	r1, [r7, #8]
 80017b8:	607a      	str	r2, [r7, #4]
 80017ba:	603b      	str	r3, [r7, #0]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 80017bc:	e04d      	b.n	800185a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if(Timeout != HAL_MAX_DELAY)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017c4:	d049      	beq.n	800185a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d007      	beq.n	80017dc <SPI_WaitFlagStateUntilTimeout+0x2e>
 80017cc:	f7fe fd16 	bl	80001fc <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	683a      	ldr	r2, [r7, #0]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d83e      	bhi.n	800185a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	685a      	ldr	r2, [r3, #4]
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80017ea:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80017f4:	d111      	bne.n	800181a <SPI_WaitFlagStateUntilTimeout+0x6c>
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017fe:	d004      	beq.n	800180a <SPI_WaitFlagStateUntilTimeout+0x5c>
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001808:	d107      	bne.n	800181a <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001818:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800181e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001822:	d110      	bne.n	8001846 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6819      	ldr	r1, [r3, #0]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8001832:	400b      	ands	r3, r1
 8001834:	6013      	str	r3, [r2, #0]
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001844:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2201      	movs	r2, #1
 800184a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2200      	movs	r2, #0
 8001852:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e00e      	b.n	8001878 <SPI_WaitFlagStateUntilTimeout+0xca>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	689a      	ldr	r2, [r3, #8]
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	4013      	ands	r3, r2
 8001864:	68ba      	ldr	r2, [r7, #8]
 8001866:	429a      	cmp	r2, r3
 8001868:	d101      	bne.n	800186e <SPI_WaitFlagStateUntilTimeout+0xc0>
 800186a:	2201      	movs	r2, #1
 800186c:	e000      	b.n	8001870 <SPI_WaitFlagStateUntilTimeout+0xc2>
 800186e:	2200      	movs	r2, #0
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	429a      	cmp	r2, r3
 8001874:	d1a3      	bne.n	80017be <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8001876:	2300      	movs	r3, #0
}
 8001878:	4618      	mov	r0, r3
 800187a:	3710      	adds	r7, #16
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <SPI_CheckFlag_BSY>:
  * @param Timeout: Timeout duration
  * @param Tickstart: tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af02      	add	r7, sp, #8
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	9300      	str	r3, [sp, #0]
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	2200      	movs	r2, #0
 8001894:	2180      	movs	r1, #128	; 0x80
 8001896:	68f8      	ldr	r0, [r7, #12]
 8001898:	f7ff ff89 	bl	80017ae <SPI_WaitFlagStateUntilTimeout>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d007      	beq.n	80018b2 <SPI_CheckFlag_BSY+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018a6:	f043 0220 	orr.w	r2, r3, #32
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e000      	b.n	80018b4 <SPI_CheckFlag_BSY+0x34>
  }
  return HAL_OK;
 80018b2:	2300      	movs	r3, #0
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3710      	adds	r7, #16
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d101      	bne.n	80018ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e057      	b.n	800197e <HAL_SPI_Init+0xc2>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d102      	bne.n	80018e6 <HAL_SPI_Init+0x2a>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f000 fa3b 	bl	8001d5c <HAL_SPI_MspInit>
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2202      	movs	r2, #2
 80018ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018fc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685a      	ldr	r2, [r3, #4]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	431a      	orrs	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	431a      	orrs	r2, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	691b      	ldr	r3, [r3, #16]
 8001912:	431a      	orrs	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	695b      	ldr	r3, [r3, #20]
 8001918:	431a      	orrs	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	699b      	ldr	r3, [r3, #24]
 800191e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001922:	431a      	orrs	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	69db      	ldr	r3, [r3, #28]
 8001928:	431a      	orrs	r2, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6a1b      	ldr	r3, [r3, #32]
 800192e:	ea42 0103 	orr.w	r1, r2, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	430a      	orrs	r2, r1
 800193c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	699b      	ldr	r3, [r3, #24]
 8001942:	0c1b      	lsrs	r3, r3, #16
 8001944:	f003 0104 	and.w	r1, r3, #4
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	430a      	orrs	r2, r1
 8001952:	605a      	str	r2, [r3, #4]

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800195c:	611a      	str	r2, [r3, #16]

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	69da      	ldr	r2, [r3, #28]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800196c:	61da      	str	r2, [r3, #28]
#else
  uCRCErrorWorkaroundCheck = 0U;
#endif /* STM32F101xE || STM32F103xE */
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2201      	movs	r2, #1
 8001978:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  
  return HAL_OK;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
	...

08001988 <SPI_SendCmd>:



}

void SPI_SendCmd(uint8_t * cmd){
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
	//TFT_CS_SET;
	//TFT_CS_RESET;
	HAL_SPI_Transmit(&hspi1, &cmd, 1, 0xFFFFFFFFU);
 8001990:	1d39      	adds	r1, r7, #4
 8001992:	f04f 33ff 	mov.w	r3, #4294967295
 8001996:	2201      	movs	r2, #1
 8001998:	4803      	ldr	r0, [pc, #12]	; (80019a8 <SPI_SendCmd+0x20>)
 800199a:	f7ff fc2b 	bl	80011f4 <HAL_SPI_Transmit>

	//TFT_CS_SET;
}
 800199e:	bf00      	nop
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20000030 	.word	0x20000030

080019ac <SPI_Receive8>:
	HAL_SPI_Transmit(&hspi1, &cmd, n, 0xFFFFFFFFU);

	//TFT_CS_SET;
}

void SPI_Receive8(uint8_t *data, uint8_t n){
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08e      	sub	sp, #56	; 0x38
 80019b0:	af02      	add	r7, sp, #8
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	460b      	mov	r3, r1
 80019b6:	70fb      	strb	r3, [r7, #3]
	uint8_t * pDataRx[10];
	//HAL_SPI_Receive(&hspi1, (uint8_t*) pDataRx, 4, 1000);

	//HAL_SPI_Receive(&hspi1, &data, n, 999999);
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)data, (uint8_t*)data, n, 999999);
 80019b8:	78fb      	ldrb	r3, [r7, #3]
 80019ba:	b29a      	uxth	r2, r3
 80019bc:	4b05      	ldr	r3, [pc, #20]	; (80019d4 <SPI_Receive8+0x28>)
 80019be:	9300      	str	r3, [sp, #0]
 80019c0:	4613      	mov	r3, r2
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	6879      	ldr	r1, [r7, #4]
 80019c6:	4804      	ldr	r0, [pc, #16]	; (80019d8 <SPI_Receive8+0x2c>)
 80019c8:	f7ff fd51 	bl	800146e <HAL_SPI_TransmitReceive>
}
 80019cc:	bf00      	nop
 80019ce:	3730      	adds	r7, #48	; 0x30
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	000f423f 	.word	0x000f423f
 80019d8:	20000030 	.word	0x20000030

080019dc <LCD_reset>:
    //SPISend8(&dummy, 1);
    SPI_Receive8(data, 1);

}

void LCD_reset() {
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
	//TFT_RST_SET;
	HAL_Delay(10);
 80019e0:	200a      	movs	r0, #10
 80019e2:	f7fe fc15 	bl	8000210 <HAL_Delay>
	//TFT_RST_RESET;
}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}
	...

080019ec <LCD_configure>:

void LCD_exitStandby() {
	//TO BE IMPLEMENTED
}

static void LCD_configure() {
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0

    LCD_setOrientation(0);
	*/

	//HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, RESET);
	uint16_t i = 0;
 80019f2:	2300      	movs	r3, #0
 80019f4:	80fb      	strh	r3, [r7, #6]
	for(i ; i<99 ; i++){
 80019f6:	e008      	b.n	8001a0a <LCD_configure+0x1e>
		SPI_SendCmd(init_commands[i]);
 80019f8:	88fb      	ldrh	r3, [r7, #6]
 80019fa:	4a09      	ldr	r2, [pc, #36]	; (8001a20 <LCD_configure+0x34>)
 80019fc:	5cd3      	ldrb	r3, [r2, r3]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff ffc2 	bl	8001988 <SPI_SendCmd>
	for(i ; i<99 ; i++){
 8001a04:	88fb      	ldrh	r3, [r7, #6]
 8001a06:	3301      	adds	r3, #1
 8001a08:	80fb      	strh	r3, [r7, #6]
 8001a0a:	88fb      	ldrh	r3, [r7, #6]
 8001a0c:	2b62      	cmp	r3, #98	; 0x62
 8001a0e:	d9f3      	bls.n	80019f8 <LCD_configure+0xc>
	//		SPI_SendCmd(init_commands2[i]);
	//	}
	//HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, SET);


	LCD_setOrientation(0);
 8001a10:	2000      	movs	r0, #0
 8001a12:	f000 f817 	bl	8001a44 <LCD_setOrientation>

}
 8001a16:	bf00      	nop
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	08001fe4 	.word	0x08001fe4

08001a24 <LCD_init>:

void LCD_init() {
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
    //LCD_pinsInit();
    //dmaInit();
	TFT_CS_RESET;
 8001a28:	2200      	movs	r2, #0
 8001a2a:	2104      	movs	r1, #4
 8001a2c:	4804      	ldr	r0, [pc, #16]	; (8001a40 <LCD_init+0x1c>)
 8001a2e:	f7fe ffd9 	bl	80009e4 <HAL_GPIO_WritePin>
    LCD_reset();
 8001a32:	f7ff ffd3 	bl	80019dc <LCD_reset>
    //LCD_exitStandby();
    LCD_configure();
 8001a36:	f7ff ffd9 	bl	80019ec <LCD_configure>

    //TFT_LED_SET;
}
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	40010800 	.word	0x40010800

08001a44 <LCD_setOrientation>:

//</editor-fold>

//<editor-fold desc="LCD common operations">

void LCD_setOrientation(uint8_t o) {
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	71fb      	strb	r3, [r7, #7]
    if (o == ORIENTATION_LANDSCAPE || o == ORIENTATION_LANDSCAPE_MIRROR) {
 8001a4e:	79fb      	ldrb	r3, [r7, #7]
 8001a50:	2b28      	cmp	r3, #40	; 0x28
 8001a52:	d002      	beq.n	8001a5a <LCD_setOrientation+0x16>
 8001a54:	79fb      	ldrb	r3, [r7, #7]
 8001a56:	2be8      	cmp	r3, #232	; 0xe8
 8001a58:	d107      	bne.n	8001a6a <LCD_setOrientation+0x26>
        screen_height = LCD_PIXEL_WIDTH;
 8001a5a:	4b0d      	ldr	r3, [pc, #52]	; (8001a90 <LCD_setOrientation+0x4c>)
 8001a5c:	22f0      	movs	r2, #240	; 0xf0
 8001a5e:	801a      	strh	r2, [r3, #0]
        screen_width  = LCD_PIXEL_HEIGHT;
 8001a60:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <LCD_setOrientation+0x50>)
 8001a62:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001a66:	801a      	strh	r2, [r3, #0]
 8001a68:	e006      	b.n	8001a78 <LCD_setOrientation+0x34>
    } else {
        screen_height = LCD_PIXEL_HEIGHT;
 8001a6a:	4b09      	ldr	r3, [pc, #36]	; (8001a90 <LCD_setOrientation+0x4c>)
 8001a6c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001a70:	801a      	strh	r2, [r3, #0]
        screen_width  = LCD_PIXEL_WIDTH;
 8001a72:	4b08      	ldr	r3, [pc, #32]	; (8001a94 <LCD_setOrientation+0x50>)
 8001a74:	22f0      	movs	r2, #240	; 0xf0
 8001a76:	801a      	strh	r2, [r3, #0]
    }
    //TFT_CS_RESET;
    SPI_SendCmd(LCD_MAC);
 8001a78:	2036      	movs	r0, #54	; 0x36
 8001a7a:	f7ff ff85 	bl	8001988 <SPI_SendCmd>
    SPI_SendCmd(&o);
 8001a7e:	1dfb      	adds	r3, r7, #7
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff ff81 	bl	8001988 <SPI_SendCmd>
    //dmaSendCmdCont(LCD_MAC);
    //dmaSendDataCont8(&o, 1);
    //TFT_CS_SET;
}
 8001a86:	bf00      	nop
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	20000008 	.word	0x20000008
 8001a94:	20000006 	.word	0x20000006

08001a98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a9e:	f7fe fb55 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001aa2:	f000 f83f 	bl	8001b24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */
  uint8_t rxbuf[10];
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001aa6:	f000 f8d7 	bl	8001c58 <MX_GPIO_Init>
  MX_DMA_Init();
 8001aaa:	f000 f8b7 	bl	8001c1c <MX_DMA_Init>
  MX_SPI1_Init();
 8001aae:	f000 f87f 	bl	8001bb0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, SET);
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	2104      	movs	r1, #4
 8001ab6:	481a      	ldr	r0, [pc, #104]	; (8001b20 <main+0x88>)
 8001ab8:	f7fe ff94 	bl	80009e4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, RESET);
 8001abc:	2200      	movs	r2, #0
 8001abe:	2104      	movs	r1, #4
 8001ac0:	4817      	ldr	r0, [pc, #92]	; (8001b20 <main+0x88>)
 8001ac2:	f7fe ff8f 	bl	80009e4 <HAL_GPIO_WritePin>

 LCD_init();
 8001ac6:	f7ff ffad 	bl	8001a24 <LCD_init>
  HAL_Delay(5);
 8001aca:	2005      	movs	r0, #5
 8001acc:	f7fe fba0 	bl	8000210 <HAL_Delay>
  SPI_SendCmd(0x04);
 8001ad0:	2004      	movs	r0, #4
 8001ad2:	f7ff ff59 	bl	8001988 <SPI_SendCmd>
  SPI_Receive8(&rxbuf, 5);
 8001ad6:	1d3b      	adds	r3, r7, #4
 8001ad8:	2105      	movs	r1, #5
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff ff66 	bl	80019ac <SPI_Receive8>


  SPI_SendCmd(0x29); //DISPLAY ON
 8001ae0:	2029      	movs	r0, #41	; 0x29
 8001ae2:	f7ff ff51 	bl	8001988 <SPI_SendCmd>
  SPI_SendCmd(0x38); //IDLE MODE OFF
 8001ae6:	2038      	movs	r0, #56	; 0x38
 8001ae8:	f7ff ff4e 	bl	8001988 <SPI_SendCmd>
  SPI_SendCmd(0x21); //INVERT DISPLAY
 8001aec:	2021      	movs	r0, #33	; 0x21
 8001aee:	f7ff ff4b 	bl	8001988 <SPI_SendCmd>

  SPI_SendCmd(0x52); //READ BRIGHTNESS
 8001af2:	2052      	movs	r0, #82	; 0x52
 8001af4:	f7ff ff48 	bl	8001988 <SPI_SendCmd>
  SPI_Receive8(rxbuf, 2);
 8001af8:	1d3b      	adds	r3, r7, #4
 8001afa:	2102      	movs	r1, #2
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff ff55 	bl	80019ac <SPI_Receive8>

  SPI_SendCmd(0x51); //SET BRIGHTNESS
 8001b02:	2051      	movs	r0, #81	; 0x51
 8001b04:	f7ff ff40 	bl	8001988 <SPI_SendCmd>
  SPI_SendCmd(0x00);  // TO 00
 8001b08:	2000      	movs	r0, #0
 8001b0a:	f7ff ff3d 	bl	8001988 <SPI_SendCmd>

  SPI_SendCmd(0x52); //READ BRIGHTNESS
 8001b0e:	2052      	movs	r0, #82	; 0x52
 8001b10:	f7ff ff3a 	bl	8001988 <SPI_SendCmd>
  SPI_Receive8(rxbuf, 2);
 8001b14:	1d3b      	adds	r3, r7, #4
 8001b16:	2102      	movs	r1, #2
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff ff47 	bl	80019ac <SPI_Receive8>
  //HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, SET);
  //HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, RESET);



  while (1)
 8001b1e:	e7fe      	b.n	8001b1e <main+0x86>
 8001b20:	40010800 	.word	0x40010800

08001b24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b090      	sub	sp, #64	; 0x40
 8001b28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b2a:	f107 0318 	add.w	r3, r7, #24
 8001b2e:	2228      	movs	r2, #40	; 0x28
 8001b30:	2100      	movs	r1, #0
 8001b32:	4618      	mov	r0, r3
 8001b34:	f000 fa38 	bl	8001fa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b38:	1d3b      	adds	r3, r7, #4
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	605a      	str	r2, [r3, #4]
 8001b40:	609a      	str	r2, [r3, #8]
 8001b42:	60da      	str	r2, [r3, #12]
 8001b44:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b46:	2301      	movs	r3, #1
 8001b48:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b4e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001b50:	2300      	movs	r3, #0
 8001b52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b54:	2301      	movs	r3, #1
 8001b56:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b60:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001b62:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001b66:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b68:	f107 0318 	add.w	r3, r7, #24
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7fe ff51 	bl	8000a14 <HAL_RCC_OscConfig>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001b78:	f000 f8b8 	bl	8001cec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b7c:	230f      	movs	r3, #15
 8001b7e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b80:	2302      	movs	r3, #2
 8001b82:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b84:	2300      	movs	r3, #0
 8001b86:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b8c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b92:	1d3b      	adds	r3, r7, #4
 8001b94:	2102      	movs	r1, #2
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff f9a0 	bl	8000edc <HAL_RCC_ClockConfig>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001ba2:	f000 f8a3 	bl	8001cec <Error_Handler>
  }
}
 8001ba6:	bf00      	nop
 8001ba8:	3740      	adds	r7, #64	; 0x40
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
	...

08001bb0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001bb4:	4b17      	ldr	r3, [pc, #92]	; (8001c14 <MX_SPI1_Init+0x64>)
 8001bb6:	4a18      	ldr	r2, [pc, #96]	; (8001c18 <MX_SPI1_Init+0x68>)
 8001bb8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001bba:	4b16      	ldr	r3, [pc, #88]	; (8001c14 <MX_SPI1_Init+0x64>)
 8001bbc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001bc0:	605a      	str	r2, [r3, #4]
  //hspi1.Init.Direction = SPI_DIRECTION_1LINE;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001bc2:	4b14      	ldr	r3, [pc, #80]	; (8001c14 <MX_SPI1_Init+0x64>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bc8:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <MX_SPI1_Init+0x64>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bce:	4b11      	ldr	r3, [pc, #68]	; (8001c14 <MX_SPI1_Init+0x64>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bd4:	4b0f      	ldr	r3, [pc, #60]	; (8001c14 <MX_SPI1_Init+0x64>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001bda:	4b0e      	ldr	r3, [pc, #56]	; (8001c14 <MX_SPI1_Init+0x64>)
 8001bdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001be0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001be2:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <MX_SPI1_Init+0x64>)
 8001be4:	2238      	movs	r2, #56	; 0x38
 8001be6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001be8:	4b0a      	ldr	r3, [pc, #40]	; (8001c14 <MX_SPI1_Init+0x64>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bee:	4b09      	ldr	r3, [pc, #36]	; (8001c14 <MX_SPI1_Init+0x64>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bf4:	4b07      	ldr	r3, [pc, #28]	; (8001c14 <MX_SPI1_Init+0x64>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001bfa:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <MX_SPI1_Init+0x64>)
 8001bfc:	220a      	movs	r2, #10
 8001bfe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c00:	4804      	ldr	r0, [pc, #16]	; (8001c14 <MX_SPI1_Init+0x64>)
 8001c02:	f7ff fe5b 	bl	80018bc <HAL_SPI_Init>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001c0c:	f000 f86e 	bl	8001cec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c10:	bf00      	nop
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	20000030 	.word	0x20000030
 8001c18:	40013000 	.word	0x40013000

08001c1c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c22:	4b0c      	ldr	r3, [pc, #48]	; (8001c54 <MX_DMA_Init+0x38>)
 8001c24:	695b      	ldr	r3, [r3, #20]
 8001c26:	4a0b      	ldr	r2, [pc, #44]	; (8001c54 <MX_DMA_Init+0x38>)
 8001c28:	f043 0301 	orr.w	r3, r3, #1
 8001c2c:	6153      	str	r3, [r2, #20]
 8001c2e:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <MX_DMA_Init+0x38>)
 8001c30:	695b      	ldr	r3, [r3, #20]
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	607b      	str	r3, [r7, #4]
 8001c38:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	200d      	movs	r0, #13
 8001c40:	f7fe fbdb 	bl	80003fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001c44:	200d      	movs	r0, #13
 8001c46:	f7fe fbf4 	bl	8000432 <HAL_NVIC_EnableIRQ>

}
 8001c4a:	bf00      	nop
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40021000 	.word	0x40021000

08001c58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c5e:	f107 0308 	add.w	r3, r7, #8
 8001c62:	2200      	movs	r2, #0
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	605a      	str	r2, [r3, #4]
 8001c68:	609a      	str	r2, [r3, #8]
 8001c6a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c6c:	4b1d      	ldr	r3, [pc, #116]	; (8001ce4 <MX_GPIO_Init+0x8c>)
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	4a1c      	ldr	r2, [pc, #112]	; (8001ce4 <MX_GPIO_Init+0x8c>)
 8001c72:	f043 0320 	orr.w	r3, r3, #32
 8001c76:	6193      	str	r3, [r2, #24]
 8001c78:	4b1a      	ldr	r3, [pc, #104]	; (8001ce4 <MX_GPIO_Init+0x8c>)
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	f003 0320 	and.w	r3, r3, #32
 8001c80:	607b      	str	r3, [r7, #4]
 8001c82:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c84:	4b17      	ldr	r3, [pc, #92]	; (8001ce4 <MX_GPIO_Init+0x8c>)
 8001c86:	699b      	ldr	r3, [r3, #24]
 8001c88:	4a16      	ldr	r2, [pc, #88]	; (8001ce4 <MX_GPIO_Init+0x8c>)
 8001c8a:	f043 0304 	orr.w	r3, r3, #4
 8001c8e:	6193      	str	r3, [r2, #24]
 8001c90:	4b14      	ldr	r3, [pc, #80]	; (8001ce4 <MX_GPIO_Init+0x8c>)
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	f003 0304 	and.w	r3, r3, #4
 8001c98:	603b      	str	r3, [r7, #0]
 8001c9a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TestPin_Pin|LEDPIN_Pin|TFT_CS_Pin|TFT_RESET_PIN_Pin, GPIO_PIN_RESET);
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	210f      	movs	r1, #15
 8001ca0:	4811      	ldr	r0, [pc, #68]	; (8001ce8 <MX_GPIO_Init+0x90>)
 8001ca2:	f7fe fe9f 	bl	80009e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TestPin_Pin LEDPIN_Pin TFT_CS_Pin TFT_RESET_PIN_Pin */
  GPIO_InitStruct.Pin = TestPin_Pin|LEDPIN_Pin|TFT_CS_Pin|TFT_RESET_PIN_Pin;
 8001ca6:	230f      	movs	r3, #15
 8001ca8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001caa:	2301      	movs	r3, #1
 8001cac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb6:	f107 0308 	add.w	r3, r7, #8
 8001cba:	4619      	mov	r1, r3
 8001cbc:	480a      	ldr	r0, [pc, #40]	; (8001ce8 <MX_GPIO_Init+0x90>)
 8001cbe:	f7fe fd33 	bl	8000728 <HAL_GPIO_Init>

  /*Configure GPIO pin : SWITCHPIN_Pin */
  GPIO_InitStruct.Pin = SWITCHPIN_Pin;
 8001cc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cc6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(SWITCHPIN_GPIO_Port, &GPIO_InitStruct);
 8001cd0:	f107 0308 	add.w	r3, r7, #8
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4804      	ldr	r0, [pc, #16]	; (8001ce8 <MX_GPIO_Init+0x90>)
 8001cd8:	f7fe fd26 	bl	8000728 <HAL_GPIO_Init>

}
 8001cdc:	bf00      	nop
 8001cde:	3718      	adds	r7, #24
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	40010800 	.word	0x40010800

08001cec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001cf0:	bf00      	nop
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bc80      	pop	{r7}
 8001cf6:	4770      	bx	lr

08001cf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001cfe:	4b15      	ldr	r3, [pc, #84]	; (8001d54 <HAL_MspInit+0x5c>)
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	4a14      	ldr	r2, [pc, #80]	; (8001d54 <HAL_MspInit+0x5c>)
 8001d04:	f043 0301 	orr.w	r3, r3, #1
 8001d08:	6193      	str	r3, [r2, #24]
 8001d0a:	4b12      	ldr	r3, [pc, #72]	; (8001d54 <HAL_MspInit+0x5c>)
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	60bb      	str	r3, [r7, #8]
 8001d14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d16:	4b0f      	ldr	r3, [pc, #60]	; (8001d54 <HAL_MspInit+0x5c>)
 8001d18:	69db      	ldr	r3, [r3, #28]
 8001d1a:	4a0e      	ldr	r2, [pc, #56]	; (8001d54 <HAL_MspInit+0x5c>)
 8001d1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d20:	61d3      	str	r3, [r2, #28]
 8001d22:	4b0c      	ldr	r3, [pc, #48]	; (8001d54 <HAL_MspInit+0x5c>)
 8001d24:	69db      	ldr	r3, [r3, #28]
 8001d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d2a:	607b      	str	r3, [r7, #4]
 8001d2c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d2e:	4b0a      	ldr	r3, [pc, #40]	; (8001d58 <HAL_MspInit+0x60>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	4a04      	ldr	r2, [pc, #16]	; (8001d58 <HAL_MspInit+0x60>)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d4a:	bf00      	nop
 8001d4c:	3714      	adds	r7, #20
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bc80      	pop	{r7}
 8001d52:	4770      	bx	lr
 8001d54:	40021000 	.word	0x40021000
 8001d58:	40010000 	.word	0x40010000

08001d5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b088      	sub	sp, #32
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d64:	f107 0310 	add.w	r3, r7, #16
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	605a      	str	r2, [r3, #4]
 8001d6e:	609a      	str	r2, [r3, #8]
 8001d70:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a2e      	ldr	r2, [pc, #184]	; (8001e30 <HAL_SPI_MspInit+0xd4>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d155      	bne.n	8001e28 <HAL_SPI_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d7c:	4b2d      	ldr	r3, [pc, #180]	; (8001e34 <HAL_SPI_MspInit+0xd8>)
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	4a2c      	ldr	r2, [pc, #176]	; (8001e34 <HAL_SPI_MspInit+0xd8>)
 8001d82:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d86:	6193      	str	r3, [r2, #24]
 8001d88:	4b2a      	ldr	r3, [pc, #168]	; (8001e34 <HAL_SPI_MspInit+0xd8>)
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d94:	4b27      	ldr	r3, [pc, #156]	; (8001e34 <HAL_SPI_MspInit+0xd8>)
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	4a26      	ldr	r2, [pc, #152]	; (8001e34 <HAL_SPI_MspInit+0xd8>)
 8001d9a:	f043 0304 	orr.w	r3, r3, #4
 8001d9e:	6193      	str	r3, [r2, #24]
 8001da0:	4b24      	ldr	r3, [pc, #144]	; (8001e34 <HAL_SPI_MspInit+0xd8>)
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	f003 0304 	and.w	r3, r3, #4
 8001da8:	60bb      	str	r3, [r7, #8]
 8001daa:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001dac:	23a0      	movs	r3, #160	; 0xa0
 8001dae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db0:	2302      	movs	r3, #2
 8001db2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001db4:	2303      	movs	r3, #3
 8001db6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db8:	f107 0310 	add.w	r3, r7, #16
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	481e      	ldr	r0, [pc, #120]	; (8001e38 <HAL_SPI_MspInit+0xdc>)
 8001dc0:	f7fe fcb2 	bl	8000728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001dc4:	2340      	movs	r3, #64	; 0x40
 8001dc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd0:	f107 0310 	add.w	r3, r7, #16
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4818      	ldr	r0, [pc, #96]	; (8001e38 <HAL_SPI_MspInit+0xdc>)
 8001dd8:	f7fe fca6 	bl	8000728 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001ddc:	4b17      	ldr	r3, [pc, #92]	; (8001e3c <HAL_SPI_MspInit+0xe0>)
 8001dde:	4a18      	ldr	r2, [pc, #96]	; (8001e40 <HAL_SPI_MspInit+0xe4>)
 8001de0:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001de2:	4b16      	ldr	r3, [pc, #88]	; (8001e3c <HAL_SPI_MspInit+0xe0>)
 8001de4:	2210      	movs	r2, #16
 8001de6:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001de8:	4b14      	ldr	r3, [pc, #80]	; (8001e3c <HAL_SPI_MspInit+0xe0>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001dee:	4b13      	ldr	r3, [pc, #76]	; (8001e3c <HAL_SPI_MspInit+0xe0>)
 8001df0:	2280      	movs	r2, #128	; 0x80
 8001df2:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001df4:	4b11      	ldr	r3, [pc, #68]	; (8001e3c <HAL_SPI_MspInit+0xe0>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001dfa:	4b10      	ldr	r3, [pc, #64]	; (8001e3c <HAL_SPI_MspInit+0xe0>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001e00:	4b0e      	ldr	r3, [pc, #56]	; (8001e3c <HAL_SPI_MspInit+0xe0>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e06:	4b0d      	ldr	r3, [pc, #52]	; (8001e3c <HAL_SPI_MspInit+0xe0>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001e0c:	480b      	ldr	r0, [pc, #44]	; (8001e3c <HAL_SPI_MspInit+0xe0>)
 8001e0e:	f7fe fb2b 	bl	8000468 <HAL_DMA_Init>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <HAL_SPI_MspInit+0xc0>
    {
      Error_Handler();
 8001e18:	f7ff ff68 	bl	8001cec <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4a07      	ldr	r2, [pc, #28]	; (8001e3c <HAL_SPI_MspInit+0xe0>)
 8001e20:	649a      	str	r2, [r3, #72]	; 0x48
 8001e22:	4a06      	ldr	r2, [pc, #24]	; (8001e3c <HAL_SPI_MspInit+0xe0>)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001e28:	bf00      	nop
 8001e2a:	3720      	adds	r7, #32
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40013000 	.word	0x40013000
 8001e34:	40021000 	.word	0x40021000
 8001e38:	40010800 	.word	0x40010800
 8001e3c:	20000088 	.word	0x20000088
 8001e40:	40020030 	.word	0x40020030

08001e44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e48:	bf00      	nop
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bc80      	pop	{r7}
 8001e4e:	4770      	bx	lr

08001e50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e54:	e7fe      	b.n	8001e54 <HardFault_Handler+0x4>

08001e56 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e56:	b480      	push	{r7}
 8001e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e5a:	e7fe      	b.n	8001e5a <MemManage_Handler+0x4>

08001e5c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e60:	e7fe      	b.n	8001e60 <BusFault_Handler+0x4>

08001e62 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e62:	b480      	push	{r7}
 8001e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e66:	e7fe      	b.n	8001e66 <UsageFault_Handler+0x4>

08001e68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e6c:	bf00      	nop
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bc80      	pop	{r7}
 8001e72:	4770      	bx	lr

08001e74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e78:	bf00      	nop
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bc80      	pop	{r7}
 8001e7e:	4770      	bx	lr

08001e80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e84:	bf00      	nop
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bc80      	pop	{r7}
 8001e8a:	4770      	bx	lr

08001e8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e90:	f7fe f9a2 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e94:	bf00      	nop
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001e9c:	4802      	ldr	r0, [pc, #8]	; (8001ea8 <DMA1_Channel3_IRQHandler+0x10>)
 8001e9e:	f7fe fb3d 	bl	800051c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001ea2:	bf00      	nop
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	20000088 	.word	0x20000088

08001eac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001eb0:	4b15      	ldr	r3, [pc, #84]	; (8001f08 <SystemInit+0x5c>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a14      	ldr	r2, [pc, #80]	; (8001f08 <SystemInit+0x5c>)
 8001eb6:	f043 0301 	orr.w	r3, r3, #1
 8001eba:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001ebc:	4b12      	ldr	r3, [pc, #72]	; (8001f08 <SystemInit+0x5c>)
 8001ebe:	685a      	ldr	r2, [r3, #4]
 8001ec0:	4911      	ldr	r1, [pc, #68]	; (8001f08 <SystemInit+0x5c>)
 8001ec2:	4b12      	ldr	r3, [pc, #72]	; (8001f0c <SystemInit+0x60>)
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001ec8:	4b0f      	ldr	r3, [pc, #60]	; (8001f08 <SystemInit+0x5c>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a0e      	ldr	r2, [pc, #56]	; (8001f08 <SystemInit+0x5c>)
 8001ece:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001ed2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ed6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ed8:	4b0b      	ldr	r3, [pc, #44]	; (8001f08 <SystemInit+0x5c>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a0a      	ldr	r2, [pc, #40]	; (8001f08 <SystemInit+0x5c>)
 8001ede:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ee2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001ee4:	4b08      	ldr	r3, [pc, #32]	; (8001f08 <SystemInit+0x5c>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	4a07      	ldr	r2, [pc, #28]	; (8001f08 <SystemInit+0x5c>)
 8001eea:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001eee:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001ef0:	4b05      	ldr	r3, [pc, #20]	; (8001f08 <SystemInit+0x5c>)
 8001ef2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001ef6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001ef8:	4b05      	ldr	r3, [pc, #20]	; (8001f10 <SystemInit+0x64>)
 8001efa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001efe:	609a      	str	r2, [r3, #8]
#endif 
}
 8001f00:	bf00      	nop
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bc80      	pop	{r7}
 8001f06:	4770      	bx	lr
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	f8ff0000 	.word	0xf8ff0000
 8001f10:	e000ed00 	.word	0xe000ed00

08001f14 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001f14:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001f16:	e003      	b.n	8001f20 <LoopCopyDataInit>

08001f18 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001f18:	4b0b      	ldr	r3, [pc, #44]	; (8001f48 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001f1a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001f1c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001f1e:	3104      	adds	r1, #4

08001f20 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001f20:	480a      	ldr	r0, [pc, #40]	; (8001f4c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001f22:	4b0b      	ldr	r3, [pc, #44]	; (8001f50 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001f24:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001f26:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001f28:	d3f6      	bcc.n	8001f18 <CopyDataInit>
  ldr r2, =_sbss
 8001f2a:	4a0a      	ldr	r2, [pc, #40]	; (8001f54 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001f2c:	e002      	b.n	8001f34 <LoopFillZerobss>

08001f2e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001f2e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001f30:	f842 3b04 	str.w	r3, [r2], #4

08001f34 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001f34:	4b08      	ldr	r3, [pc, #32]	; (8001f58 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001f36:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001f38:	d3f9      	bcc.n	8001f2e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f3a:	f7ff ffb7 	bl	8001eac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f3e:	f000 f80f 	bl	8001f60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f42:	f7ff fda9 	bl	8001a98 <main>
  bx lr
 8001f46:	4770      	bx	lr
  ldr r3, =_sidata
 8001f48:	08002060 	.word	0x08002060
  ldr r0, =_sdata
 8001f4c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001f50:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8001f54:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8001f58:	200000cc 	.word	0x200000cc

08001f5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f5c:	e7fe      	b.n	8001f5c <ADC1_2_IRQHandler>
	...

08001f60 <__libc_init_array>:
 8001f60:	b570      	push	{r4, r5, r6, lr}
 8001f62:	2500      	movs	r5, #0
 8001f64:	4e0c      	ldr	r6, [pc, #48]	; (8001f98 <__libc_init_array+0x38>)
 8001f66:	4c0d      	ldr	r4, [pc, #52]	; (8001f9c <__libc_init_array+0x3c>)
 8001f68:	1ba4      	subs	r4, r4, r6
 8001f6a:	10a4      	asrs	r4, r4, #2
 8001f6c:	42a5      	cmp	r5, r4
 8001f6e:	d109      	bne.n	8001f84 <__libc_init_array+0x24>
 8001f70:	f000 f822 	bl	8001fb8 <_init>
 8001f74:	2500      	movs	r5, #0
 8001f76:	4e0a      	ldr	r6, [pc, #40]	; (8001fa0 <__libc_init_array+0x40>)
 8001f78:	4c0a      	ldr	r4, [pc, #40]	; (8001fa4 <__libc_init_array+0x44>)
 8001f7a:	1ba4      	subs	r4, r4, r6
 8001f7c:	10a4      	asrs	r4, r4, #2
 8001f7e:	42a5      	cmp	r5, r4
 8001f80:	d105      	bne.n	8001f8e <__libc_init_array+0x2e>
 8001f82:	bd70      	pop	{r4, r5, r6, pc}
 8001f84:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f88:	4798      	blx	r3
 8001f8a:	3501      	adds	r5, #1
 8001f8c:	e7ee      	b.n	8001f6c <__libc_init_array+0xc>
 8001f8e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f92:	4798      	blx	r3
 8001f94:	3501      	adds	r5, #1
 8001f96:	e7f2      	b.n	8001f7e <__libc_init_array+0x1e>
 8001f98:	08002058 	.word	0x08002058
 8001f9c:	08002058 	.word	0x08002058
 8001fa0:	08002058 	.word	0x08002058
 8001fa4:	0800205c 	.word	0x0800205c

08001fa8 <memset>:
 8001fa8:	4603      	mov	r3, r0
 8001faa:	4402      	add	r2, r0
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d100      	bne.n	8001fb2 <memset+0xa>
 8001fb0:	4770      	bx	lr
 8001fb2:	f803 1b01 	strb.w	r1, [r3], #1
 8001fb6:	e7f9      	b.n	8001fac <memset+0x4>

08001fb8 <_init>:
 8001fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fba:	bf00      	nop
 8001fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fbe:	bc08      	pop	{r3}
 8001fc0:	469e      	mov	lr, r3
 8001fc2:	4770      	bx	lr

08001fc4 <_fini>:
 8001fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fc6:	bf00      	nop
 8001fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fca:	bc08      	pop	{r3}
 8001fcc:	469e      	mov	lr, r3
 8001fce:	4770      	bx	lr
