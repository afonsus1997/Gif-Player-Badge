
Gif-Player-Badge.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002450  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  0800255c  0800255c  0001255c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002588  08002588  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08002588  08002588  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002588  08002588  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002588  08002588  00012588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800258c  0800258c  0001258c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002590  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  20000010  080025a0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  080025a0  0002018c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000094e1  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c76  00000000  00000000  0002951a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a08  00000000  00000000  0002b190  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000968  00000000  00000000  0002bb98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001388a  00000000  00000000  0002c500  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000080be  00000000  00000000  0003fd8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00069619  00000000  00000000  00047e48  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b1461  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027c8  00000000  00000000  000b14dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08002544 	.word	0x08002544

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08002544 	.word	0x08002544

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f945 	bl	80003ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f002 f802 	bl	8002170 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f95d 	bl	8000456 <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295
 80001b4:	f000 f925 	bl	8000402 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	2000000c 	.word	0x2000000c
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	2000002c 	.word	0x2000002c

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	2000002c 	.word	0x2000002c

08000210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000218:	f7ff fff0 	bl	80001fc <HAL_GetTick>
 800021c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000228:	d005      	beq.n	8000236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800022a:	4b09      	ldr	r3, [pc, #36]	; (8000250 <HAL_Delay+0x40>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	461a      	mov	r2, r3
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	4413      	add	r3, r2
 8000234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000236:	bf00      	nop
 8000238:	f7ff ffe0 	bl	80001fc <HAL_GetTick>
 800023c:	4602      	mov	r2, r0
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	1ad3      	subs	r3, r2, r3
 8000242:	68fa      	ldr	r2, [r7, #12]
 8000244:	429a      	cmp	r2, r3
 8000246:	d8f7      	bhi.n	8000238 <HAL_Delay+0x28>
  {
  }
}
 8000248:	bf00      	nop
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000004 	.word	0x20000004

08000254 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000254:	b480      	push	{r7}
 8000256:	b085      	sub	sp, #20
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f003 0307 	and.w	r3, r3, #7
 8000262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000264:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <__NVIC_SetPriorityGrouping+0x44>)
 8000266:	68db      	ldr	r3, [r3, #12]
 8000268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800026a:	68ba      	ldr	r2, [r7, #8]
 800026c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000270:	4013      	ands	r3, r2
 8000272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800027c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000286:	4a04      	ldr	r2, [pc, #16]	; (8000298 <__NVIC_SetPriorityGrouping+0x44>)
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	60d3      	str	r3, [r2, #12]
}
 800028c:	bf00      	nop
 800028e:	3714      	adds	r7, #20
 8000290:	46bd      	mov	sp, r7
 8000292:	bc80      	pop	{r7}
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	e000ed00 	.word	0xe000ed00

0800029c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__NVIC_GetPriorityGrouping+0x18>)
 80002a2:	68db      	ldr	r3, [r3, #12]
 80002a4:	0a1b      	lsrs	r3, r3, #8
 80002a6:	f003 0307 	and.w	r3, r3, #7
}
 80002aa:	4618      	mov	r0, r3
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	e000ed00 	.word	0xe000ed00

080002b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	db0b      	blt.n	80002e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002ca:	79fb      	ldrb	r3, [r7, #7]
 80002cc:	f003 021f 	and.w	r2, r3, #31
 80002d0:	4906      	ldr	r1, [pc, #24]	; (80002ec <__NVIC_EnableIRQ+0x34>)
 80002d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d6:	095b      	lsrs	r3, r3, #5
 80002d8:	2001      	movs	r0, #1
 80002da:	fa00 f202 	lsl.w	r2, r0, r2
 80002de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002e2:	bf00      	nop
 80002e4:	370c      	adds	r7, #12
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bc80      	pop	{r7}
 80002ea:	4770      	bx	lr
 80002ec:	e000e100 	.word	0xe000e100

080002f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	4603      	mov	r3, r0
 80002f8:	6039      	str	r1, [r7, #0]
 80002fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000300:	2b00      	cmp	r3, #0
 8000302:	db0a      	blt.n	800031a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000304:	683b      	ldr	r3, [r7, #0]
 8000306:	b2da      	uxtb	r2, r3
 8000308:	490c      	ldr	r1, [pc, #48]	; (800033c <__NVIC_SetPriority+0x4c>)
 800030a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800030e:	0112      	lsls	r2, r2, #4
 8000310:	b2d2      	uxtb	r2, r2
 8000312:	440b      	add	r3, r1
 8000314:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000318:	e00a      	b.n	8000330 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800031a:	683b      	ldr	r3, [r7, #0]
 800031c:	b2da      	uxtb	r2, r3
 800031e:	4908      	ldr	r1, [pc, #32]	; (8000340 <__NVIC_SetPriority+0x50>)
 8000320:	79fb      	ldrb	r3, [r7, #7]
 8000322:	f003 030f 	and.w	r3, r3, #15
 8000326:	3b04      	subs	r3, #4
 8000328:	0112      	lsls	r2, r2, #4
 800032a:	b2d2      	uxtb	r2, r2
 800032c:	440b      	add	r3, r1
 800032e:	761a      	strb	r2, [r3, #24]
}
 8000330:	bf00      	nop
 8000332:	370c      	adds	r7, #12
 8000334:	46bd      	mov	sp, r7
 8000336:	bc80      	pop	{r7}
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	e000e100 	.word	0xe000e100
 8000340:	e000ed00 	.word	0xe000ed00

08000344 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000344:	b480      	push	{r7}
 8000346:	b089      	sub	sp, #36	; 0x24
 8000348:	af00      	add	r7, sp, #0
 800034a:	60f8      	str	r0, [r7, #12]
 800034c:	60b9      	str	r1, [r7, #8]
 800034e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	f003 0307 	and.w	r3, r3, #7
 8000356:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000358:	69fb      	ldr	r3, [r7, #28]
 800035a:	f1c3 0307 	rsb	r3, r3, #7
 800035e:	2b04      	cmp	r3, #4
 8000360:	bf28      	it	cs
 8000362:	2304      	movcs	r3, #4
 8000364:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000366:	69fb      	ldr	r3, [r7, #28]
 8000368:	3304      	adds	r3, #4
 800036a:	2b06      	cmp	r3, #6
 800036c:	d902      	bls.n	8000374 <NVIC_EncodePriority+0x30>
 800036e:	69fb      	ldr	r3, [r7, #28]
 8000370:	3b03      	subs	r3, #3
 8000372:	e000      	b.n	8000376 <NVIC_EncodePriority+0x32>
 8000374:	2300      	movs	r3, #0
 8000376:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000378:	f04f 32ff 	mov.w	r2, #4294967295
 800037c:	69bb      	ldr	r3, [r7, #24]
 800037e:	fa02 f303 	lsl.w	r3, r2, r3
 8000382:	43da      	mvns	r2, r3
 8000384:	68bb      	ldr	r3, [r7, #8]
 8000386:	401a      	ands	r2, r3
 8000388:	697b      	ldr	r3, [r7, #20]
 800038a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800038c:	f04f 31ff 	mov.w	r1, #4294967295
 8000390:	697b      	ldr	r3, [r7, #20]
 8000392:	fa01 f303 	lsl.w	r3, r1, r3
 8000396:	43d9      	mvns	r1, r3
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800039c:	4313      	orrs	r3, r2
         );
}
 800039e:	4618      	mov	r0, r3
 80003a0:	3724      	adds	r7, #36	; 0x24
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bc80      	pop	{r7}
 80003a6:	4770      	bx	lr

080003a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	3b01      	subs	r3, #1
 80003b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80003b8:	d301      	bcc.n	80003be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003ba:	2301      	movs	r3, #1
 80003bc:	e00f      	b.n	80003de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003be:	4a0a      	ldr	r2, [pc, #40]	; (80003e8 <SysTick_Config+0x40>)
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	3b01      	subs	r3, #1
 80003c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003c6:	210f      	movs	r1, #15
 80003c8:	f04f 30ff 	mov.w	r0, #4294967295
 80003cc:	f7ff ff90 	bl	80002f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003d0:	4b05      	ldr	r3, [pc, #20]	; (80003e8 <SysTick_Config+0x40>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003d6:	4b04      	ldr	r3, [pc, #16]	; (80003e8 <SysTick_Config+0x40>)
 80003d8:	2207      	movs	r2, #7
 80003da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003dc:	2300      	movs	r3, #0
}
 80003de:	4618      	mov	r0, r3
 80003e0:	3708      	adds	r7, #8
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	e000e010 	.word	0xe000e010

080003ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003f4:	6878      	ldr	r0, [r7, #4]
 80003f6:	f7ff ff2d 	bl	8000254 <__NVIC_SetPriorityGrouping>
}
 80003fa:	bf00      	nop
 80003fc:	3708      	adds	r7, #8
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}

08000402 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000402:	b580      	push	{r7, lr}
 8000404:	b086      	sub	sp, #24
 8000406:	af00      	add	r7, sp, #0
 8000408:	4603      	mov	r3, r0
 800040a:	60b9      	str	r1, [r7, #8]
 800040c:	607a      	str	r2, [r7, #4]
 800040e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000410:	2300      	movs	r3, #0
 8000412:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000414:	f7ff ff42 	bl	800029c <__NVIC_GetPriorityGrouping>
 8000418:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800041a:	687a      	ldr	r2, [r7, #4]
 800041c:	68b9      	ldr	r1, [r7, #8]
 800041e:	6978      	ldr	r0, [r7, #20]
 8000420:	f7ff ff90 	bl	8000344 <NVIC_EncodePriority>
 8000424:	4602      	mov	r2, r0
 8000426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800042a:	4611      	mov	r1, r2
 800042c:	4618      	mov	r0, r3
 800042e:	f7ff ff5f 	bl	80002f0 <__NVIC_SetPriority>
}
 8000432:	bf00      	nop
 8000434:	3718      	adds	r7, #24
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}

0800043a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800043a:	b580      	push	{r7, lr}
 800043c:	b082      	sub	sp, #8
 800043e:	af00      	add	r7, sp, #0
 8000440:	4603      	mov	r3, r0
 8000442:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000448:	4618      	mov	r0, r3
 800044a:	f7ff ff35 	bl	80002b8 <__NVIC_EnableIRQ>
}
 800044e:	bf00      	nop
 8000450:	3708      	adds	r7, #8
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}

08000456 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000456:	b580      	push	{r7, lr}
 8000458:	b082      	sub	sp, #8
 800045a:	af00      	add	r7, sp, #0
 800045c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800045e:	6878      	ldr	r0, [r7, #4]
 8000460:	f7ff ffa2 	bl	80003a8 <SysTick_Config>
 8000464:	4603      	mov	r3, r0
}
 8000466:	4618      	mov	r0, r3
 8000468:	3708      	adds	r7, #8
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
	...

08000470 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000470:	b480      	push	{r7}
 8000472:	b085      	sub	sp, #20
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000478:	2300      	movs	r3, #0
 800047a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	2b00      	cmp	r3, #0
 8000480:	d101      	bne.n	8000486 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000482:	2301      	movs	r3, #1
 8000484:	e043      	b.n	800050e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	461a      	mov	r2, r3
 800048c:	4b22      	ldr	r3, [pc, #136]	; (8000518 <HAL_DMA_Init+0xa8>)
 800048e:	4413      	add	r3, r2
 8000490:	4a22      	ldr	r2, [pc, #136]	; (800051c <HAL_DMA_Init+0xac>)
 8000492:	fba2 2303 	umull	r2, r3, r2, r3
 8000496:	091b      	lsrs	r3, r3, #4
 8000498:	009a      	lsls	r2, r3, #2
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	4a1f      	ldr	r2, [pc, #124]	; (8000520 <HAL_DMA_Init+0xb0>)
 80004a2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	2202      	movs	r2, #2
 80004a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80004ba:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80004be:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80004c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	68db      	ldr	r3, [r3, #12]
 80004ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80004d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	695b      	ldr	r3, [r3, #20]
 80004da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80004e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	69db      	ldr	r3, [r3, #28]
 80004e6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80004e8:	68fa      	ldr	r2, [r7, #12]
 80004ea:	4313      	orrs	r3, r2
 80004ec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	68fa      	ldr	r2, [r7, #12]
 80004f4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	2200      	movs	r2, #0
 80004fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2201      	movs	r2, #1
 8000500:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	2200      	movs	r2, #0
 8000508:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800050c:	2300      	movs	r3, #0
}
 800050e:	4618      	mov	r0, r3
 8000510:	3714      	adds	r7, #20
 8000512:	46bd      	mov	sp, r7
 8000514:	bc80      	pop	{r7}
 8000516:	4770      	bx	lr
 8000518:	bffdfff8 	.word	0xbffdfff8
 800051c:	cccccccd 	.word	0xcccccccd
 8000520:	40020000 	.word	0x40020000

08000524 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b084      	sub	sp, #16
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000540:	2204      	movs	r2, #4
 8000542:	409a      	lsls	r2, r3
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	4013      	ands	r3, r2
 8000548:	2b00      	cmp	r3, #0
 800054a:	d04f      	beq.n	80005ec <HAL_DMA_IRQHandler+0xc8>
 800054c:	68bb      	ldr	r3, [r7, #8]
 800054e:	f003 0304 	and.w	r3, r3, #4
 8000552:	2b00      	cmp	r3, #0
 8000554:	d04a      	beq.n	80005ec <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f003 0320 	and.w	r3, r3, #32
 8000560:	2b00      	cmp	r3, #0
 8000562:	d107      	bne.n	8000574 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	681a      	ldr	r2, [r3, #0]
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	f022 0204 	bic.w	r2, r2, #4
 8000572:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a66      	ldr	r2, [pc, #408]	; (8000714 <HAL_DMA_IRQHandler+0x1f0>)
 800057a:	4293      	cmp	r3, r2
 800057c:	d029      	beq.n	80005d2 <HAL_DMA_IRQHandler+0xae>
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4a65      	ldr	r2, [pc, #404]	; (8000718 <HAL_DMA_IRQHandler+0x1f4>)
 8000584:	4293      	cmp	r3, r2
 8000586:	d022      	beq.n	80005ce <HAL_DMA_IRQHandler+0xaa>
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a63      	ldr	r2, [pc, #396]	; (800071c <HAL_DMA_IRQHandler+0x1f8>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d01a      	beq.n	80005c8 <HAL_DMA_IRQHandler+0xa4>
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4a62      	ldr	r2, [pc, #392]	; (8000720 <HAL_DMA_IRQHandler+0x1fc>)
 8000598:	4293      	cmp	r3, r2
 800059a:	d012      	beq.n	80005c2 <HAL_DMA_IRQHandler+0x9e>
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a60      	ldr	r2, [pc, #384]	; (8000724 <HAL_DMA_IRQHandler+0x200>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d00a      	beq.n	80005bc <HAL_DMA_IRQHandler+0x98>
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4a5f      	ldr	r2, [pc, #380]	; (8000728 <HAL_DMA_IRQHandler+0x204>)
 80005ac:	4293      	cmp	r3, r2
 80005ae:	d102      	bne.n	80005b6 <HAL_DMA_IRQHandler+0x92>
 80005b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005b4:	e00e      	b.n	80005d4 <HAL_DMA_IRQHandler+0xb0>
 80005b6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80005ba:	e00b      	b.n	80005d4 <HAL_DMA_IRQHandler+0xb0>
 80005bc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80005c0:	e008      	b.n	80005d4 <HAL_DMA_IRQHandler+0xb0>
 80005c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80005c6:	e005      	b.n	80005d4 <HAL_DMA_IRQHandler+0xb0>
 80005c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005cc:	e002      	b.n	80005d4 <HAL_DMA_IRQHandler+0xb0>
 80005ce:	2340      	movs	r3, #64	; 0x40
 80005d0:	e000      	b.n	80005d4 <HAL_DMA_IRQHandler+0xb0>
 80005d2:	2304      	movs	r3, #4
 80005d4:	4a55      	ldr	r2, [pc, #340]	; (800072c <HAL_DMA_IRQHandler+0x208>)
 80005d6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005dc:	2b00      	cmp	r3, #0
 80005de:	f000 8094 	beq.w	800070a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005e6:	6878      	ldr	r0, [r7, #4]
 80005e8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80005ea:	e08e      	b.n	800070a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f0:	2202      	movs	r2, #2
 80005f2:	409a      	lsls	r2, r3
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	4013      	ands	r3, r2
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d056      	beq.n	80006aa <HAL_DMA_IRQHandler+0x186>
 80005fc:	68bb      	ldr	r3, [r7, #8]
 80005fe:	f003 0302 	and.w	r3, r3, #2
 8000602:	2b00      	cmp	r3, #0
 8000604:	d051      	beq.n	80006aa <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f003 0320 	and.w	r3, r3, #32
 8000610:	2b00      	cmp	r3, #0
 8000612:	d10b      	bne.n	800062c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	f022 020a 	bic.w	r2, r2, #10
 8000622:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	2201      	movs	r2, #1
 8000628:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a38      	ldr	r2, [pc, #224]	; (8000714 <HAL_DMA_IRQHandler+0x1f0>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d029      	beq.n	800068a <HAL_DMA_IRQHandler+0x166>
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a37      	ldr	r2, [pc, #220]	; (8000718 <HAL_DMA_IRQHandler+0x1f4>)
 800063c:	4293      	cmp	r3, r2
 800063e:	d022      	beq.n	8000686 <HAL_DMA_IRQHandler+0x162>
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a35      	ldr	r2, [pc, #212]	; (800071c <HAL_DMA_IRQHandler+0x1f8>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d01a      	beq.n	8000680 <HAL_DMA_IRQHandler+0x15c>
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4a34      	ldr	r2, [pc, #208]	; (8000720 <HAL_DMA_IRQHandler+0x1fc>)
 8000650:	4293      	cmp	r3, r2
 8000652:	d012      	beq.n	800067a <HAL_DMA_IRQHandler+0x156>
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a32      	ldr	r2, [pc, #200]	; (8000724 <HAL_DMA_IRQHandler+0x200>)
 800065a:	4293      	cmp	r3, r2
 800065c:	d00a      	beq.n	8000674 <HAL_DMA_IRQHandler+0x150>
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4a31      	ldr	r2, [pc, #196]	; (8000728 <HAL_DMA_IRQHandler+0x204>)
 8000664:	4293      	cmp	r3, r2
 8000666:	d102      	bne.n	800066e <HAL_DMA_IRQHandler+0x14a>
 8000668:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800066c:	e00e      	b.n	800068c <HAL_DMA_IRQHandler+0x168>
 800066e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000672:	e00b      	b.n	800068c <HAL_DMA_IRQHandler+0x168>
 8000674:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000678:	e008      	b.n	800068c <HAL_DMA_IRQHandler+0x168>
 800067a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800067e:	e005      	b.n	800068c <HAL_DMA_IRQHandler+0x168>
 8000680:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000684:	e002      	b.n	800068c <HAL_DMA_IRQHandler+0x168>
 8000686:	2320      	movs	r3, #32
 8000688:	e000      	b.n	800068c <HAL_DMA_IRQHandler+0x168>
 800068a:	2302      	movs	r3, #2
 800068c:	4a27      	ldr	r2, [pc, #156]	; (800072c <HAL_DMA_IRQHandler+0x208>)
 800068e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	2200      	movs	r2, #0
 8000694:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800069c:	2b00      	cmp	r3, #0
 800069e:	d034      	beq.n	800070a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006a4:	6878      	ldr	r0, [r7, #4]
 80006a6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80006a8:	e02f      	b.n	800070a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ae:	2208      	movs	r2, #8
 80006b0:	409a      	lsls	r2, r3
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	4013      	ands	r3, r2
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d028      	beq.n	800070c <HAL_DMA_IRQHandler+0x1e8>
 80006ba:	68bb      	ldr	r3, [r7, #8]
 80006bc:	f003 0308 	and.w	r3, r3, #8
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d023      	beq.n	800070c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	681a      	ldr	r2, [r3, #0]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f022 020e 	bic.w	r2, r2, #14
 80006d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80006dc:	2101      	movs	r1, #1
 80006de:	fa01 f202 	lsl.w	r2, r1, r2
 80006e2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	2201      	movs	r2, #1
 80006e8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	2201      	movs	r2, #1
 80006ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	2200      	movs	r2, #0
 80006f6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d004      	beq.n	800070c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	6878      	ldr	r0, [r7, #4]
 8000708:	4798      	blx	r3
    }
  }
  return;
 800070a:	bf00      	nop
 800070c:	bf00      	nop
}
 800070e:	3710      	adds	r7, #16
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40020008 	.word	0x40020008
 8000718:	4002001c 	.word	0x4002001c
 800071c:	40020030 	.word	0x40020030
 8000720:	40020044 	.word	0x40020044
 8000724:	40020058 	.word	0x40020058
 8000728:	4002006c 	.word	0x4002006c
 800072c:	40020000 	.word	0x40020000

08000730 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000730:	b480      	push	{r7}
 8000732:	b08b      	sub	sp, #44	; 0x2c
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
 8000738:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800073a:	2300      	movs	r3, #0
 800073c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800073e:	2300      	movs	r3, #0
 8000740:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000742:	e127      	b.n	8000994 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000744:	2201      	movs	r2, #1
 8000746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000748:	fa02 f303 	lsl.w	r3, r2, r3
 800074c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	69fa      	ldr	r2, [r7, #28]
 8000754:	4013      	ands	r3, r2
 8000756:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000758:	69ba      	ldr	r2, [r7, #24]
 800075a:	69fb      	ldr	r3, [r7, #28]
 800075c:	429a      	cmp	r2, r3
 800075e:	f040 8116 	bne.w	800098e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	685b      	ldr	r3, [r3, #4]
 8000766:	2b12      	cmp	r3, #18
 8000768:	d034      	beq.n	80007d4 <HAL_GPIO_Init+0xa4>
 800076a:	2b12      	cmp	r3, #18
 800076c:	d80d      	bhi.n	800078a <HAL_GPIO_Init+0x5a>
 800076e:	2b02      	cmp	r3, #2
 8000770:	d02b      	beq.n	80007ca <HAL_GPIO_Init+0x9a>
 8000772:	2b02      	cmp	r3, #2
 8000774:	d804      	bhi.n	8000780 <HAL_GPIO_Init+0x50>
 8000776:	2b00      	cmp	r3, #0
 8000778:	d031      	beq.n	80007de <HAL_GPIO_Init+0xae>
 800077a:	2b01      	cmp	r3, #1
 800077c:	d01c      	beq.n	80007b8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800077e:	e048      	b.n	8000812 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000780:	2b03      	cmp	r3, #3
 8000782:	d043      	beq.n	800080c <HAL_GPIO_Init+0xdc>
 8000784:	2b11      	cmp	r3, #17
 8000786:	d01b      	beq.n	80007c0 <HAL_GPIO_Init+0x90>
          break;
 8000788:	e043      	b.n	8000812 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800078a:	4a89      	ldr	r2, [pc, #548]	; (80009b0 <HAL_GPIO_Init+0x280>)
 800078c:	4293      	cmp	r3, r2
 800078e:	d026      	beq.n	80007de <HAL_GPIO_Init+0xae>
 8000790:	4a87      	ldr	r2, [pc, #540]	; (80009b0 <HAL_GPIO_Init+0x280>)
 8000792:	4293      	cmp	r3, r2
 8000794:	d806      	bhi.n	80007a4 <HAL_GPIO_Init+0x74>
 8000796:	4a87      	ldr	r2, [pc, #540]	; (80009b4 <HAL_GPIO_Init+0x284>)
 8000798:	4293      	cmp	r3, r2
 800079a:	d020      	beq.n	80007de <HAL_GPIO_Init+0xae>
 800079c:	4a86      	ldr	r2, [pc, #536]	; (80009b8 <HAL_GPIO_Init+0x288>)
 800079e:	4293      	cmp	r3, r2
 80007a0:	d01d      	beq.n	80007de <HAL_GPIO_Init+0xae>
          break;
 80007a2:	e036      	b.n	8000812 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80007a4:	4a85      	ldr	r2, [pc, #532]	; (80009bc <HAL_GPIO_Init+0x28c>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d019      	beq.n	80007de <HAL_GPIO_Init+0xae>
 80007aa:	4a85      	ldr	r2, [pc, #532]	; (80009c0 <HAL_GPIO_Init+0x290>)
 80007ac:	4293      	cmp	r3, r2
 80007ae:	d016      	beq.n	80007de <HAL_GPIO_Init+0xae>
 80007b0:	4a84      	ldr	r2, [pc, #528]	; (80009c4 <HAL_GPIO_Init+0x294>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d013      	beq.n	80007de <HAL_GPIO_Init+0xae>
          break;
 80007b6:	e02c      	b.n	8000812 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	68db      	ldr	r3, [r3, #12]
 80007bc:	623b      	str	r3, [r7, #32]
          break;
 80007be:	e028      	b.n	8000812 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	68db      	ldr	r3, [r3, #12]
 80007c4:	3304      	adds	r3, #4
 80007c6:	623b      	str	r3, [r7, #32]
          break;
 80007c8:	e023      	b.n	8000812 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	68db      	ldr	r3, [r3, #12]
 80007ce:	3308      	adds	r3, #8
 80007d0:	623b      	str	r3, [r7, #32]
          break;
 80007d2:	e01e      	b.n	8000812 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	68db      	ldr	r3, [r3, #12]
 80007d8:	330c      	adds	r3, #12
 80007da:	623b      	str	r3, [r7, #32]
          break;
 80007dc:	e019      	b.n	8000812 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	689b      	ldr	r3, [r3, #8]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d102      	bne.n	80007ec <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80007e6:	2304      	movs	r3, #4
 80007e8:	623b      	str	r3, [r7, #32]
          break;
 80007ea:	e012      	b.n	8000812 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	689b      	ldr	r3, [r3, #8]
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d105      	bne.n	8000800 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80007f4:	2308      	movs	r3, #8
 80007f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	69fa      	ldr	r2, [r7, #28]
 80007fc:	611a      	str	r2, [r3, #16]
          break;
 80007fe:	e008      	b.n	8000812 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000800:	2308      	movs	r3, #8
 8000802:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	69fa      	ldr	r2, [r7, #28]
 8000808:	615a      	str	r2, [r3, #20]
          break;
 800080a:	e002      	b.n	8000812 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800080c:	2300      	movs	r3, #0
 800080e:	623b      	str	r3, [r7, #32]
          break;
 8000810:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000812:	69bb      	ldr	r3, [r7, #24]
 8000814:	2bff      	cmp	r3, #255	; 0xff
 8000816:	d801      	bhi.n	800081c <HAL_GPIO_Init+0xec>
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	e001      	b.n	8000820 <HAL_GPIO_Init+0xf0>
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	3304      	adds	r3, #4
 8000820:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000822:	69bb      	ldr	r3, [r7, #24]
 8000824:	2bff      	cmp	r3, #255	; 0xff
 8000826:	d802      	bhi.n	800082e <HAL_GPIO_Init+0xfe>
 8000828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800082a:	009b      	lsls	r3, r3, #2
 800082c:	e002      	b.n	8000834 <HAL_GPIO_Init+0x104>
 800082e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000830:	3b08      	subs	r3, #8
 8000832:	009b      	lsls	r3, r3, #2
 8000834:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000836:	697b      	ldr	r3, [r7, #20]
 8000838:	681a      	ldr	r2, [r3, #0]
 800083a:	210f      	movs	r1, #15
 800083c:	693b      	ldr	r3, [r7, #16]
 800083e:	fa01 f303 	lsl.w	r3, r1, r3
 8000842:	43db      	mvns	r3, r3
 8000844:	401a      	ands	r2, r3
 8000846:	6a39      	ldr	r1, [r7, #32]
 8000848:	693b      	ldr	r3, [r7, #16]
 800084a:	fa01 f303 	lsl.w	r3, r1, r3
 800084e:	431a      	orrs	r2, r3
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	685b      	ldr	r3, [r3, #4]
 8000858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800085c:	2b00      	cmp	r3, #0
 800085e:	f000 8096 	beq.w	800098e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000862:	4b59      	ldr	r3, [pc, #356]	; (80009c8 <HAL_GPIO_Init+0x298>)
 8000864:	699b      	ldr	r3, [r3, #24]
 8000866:	4a58      	ldr	r2, [pc, #352]	; (80009c8 <HAL_GPIO_Init+0x298>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	6193      	str	r3, [r2, #24]
 800086e:	4b56      	ldr	r3, [pc, #344]	; (80009c8 <HAL_GPIO_Init+0x298>)
 8000870:	699b      	ldr	r3, [r3, #24]
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	60bb      	str	r3, [r7, #8]
 8000878:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800087a:	4a54      	ldr	r2, [pc, #336]	; (80009cc <HAL_GPIO_Init+0x29c>)
 800087c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800087e:	089b      	lsrs	r3, r3, #2
 8000880:	3302      	adds	r3, #2
 8000882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000886:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800088a:	f003 0303 	and.w	r3, r3, #3
 800088e:	009b      	lsls	r3, r3, #2
 8000890:	220f      	movs	r2, #15
 8000892:	fa02 f303 	lsl.w	r3, r2, r3
 8000896:	43db      	mvns	r3, r3
 8000898:	68fa      	ldr	r2, [r7, #12]
 800089a:	4013      	ands	r3, r2
 800089c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4a4b      	ldr	r2, [pc, #300]	; (80009d0 <HAL_GPIO_Init+0x2a0>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d013      	beq.n	80008ce <HAL_GPIO_Init+0x19e>
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	4a4a      	ldr	r2, [pc, #296]	; (80009d4 <HAL_GPIO_Init+0x2a4>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d00d      	beq.n	80008ca <HAL_GPIO_Init+0x19a>
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	4a49      	ldr	r2, [pc, #292]	; (80009d8 <HAL_GPIO_Init+0x2a8>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d007      	beq.n	80008c6 <HAL_GPIO_Init+0x196>
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	4a48      	ldr	r2, [pc, #288]	; (80009dc <HAL_GPIO_Init+0x2ac>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d101      	bne.n	80008c2 <HAL_GPIO_Init+0x192>
 80008be:	2303      	movs	r3, #3
 80008c0:	e006      	b.n	80008d0 <HAL_GPIO_Init+0x1a0>
 80008c2:	2304      	movs	r3, #4
 80008c4:	e004      	b.n	80008d0 <HAL_GPIO_Init+0x1a0>
 80008c6:	2302      	movs	r3, #2
 80008c8:	e002      	b.n	80008d0 <HAL_GPIO_Init+0x1a0>
 80008ca:	2301      	movs	r3, #1
 80008cc:	e000      	b.n	80008d0 <HAL_GPIO_Init+0x1a0>
 80008ce:	2300      	movs	r3, #0
 80008d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008d2:	f002 0203 	and.w	r2, r2, #3
 80008d6:	0092      	lsls	r2, r2, #2
 80008d8:	4093      	lsls	r3, r2
 80008da:	68fa      	ldr	r2, [r7, #12]
 80008dc:	4313      	orrs	r3, r2
 80008de:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80008e0:	493a      	ldr	r1, [pc, #232]	; (80009cc <HAL_GPIO_Init+0x29c>)
 80008e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e4:	089b      	lsrs	r3, r3, #2
 80008e6:	3302      	adds	r3, #2
 80008e8:	68fa      	ldr	r2, [r7, #12]
 80008ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d006      	beq.n	8000908 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80008fa:	4b39      	ldr	r3, [pc, #228]	; (80009e0 <HAL_GPIO_Init+0x2b0>)
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	4938      	ldr	r1, [pc, #224]	; (80009e0 <HAL_GPIO_Init+0x2b0>)
 8000900:	69bb      	ldr	r3, [r7, #24]
 8000902:	4313      	orrs	r3, r2
 8000904:	600b      	str	r3, [r1, #0]
 8000906:	e006      	b.n	8000916 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000908:	4b35      	ldr	r3, [pc, #212]	; (80009e0 <HAL_GPIO_Init+0x2b0>)
 800090a:	681a      	ldr	r2, [r3, #0]
 800090c:	69bb      	ldr	r3, [r7, #24]
 800090e:	43db      	mvns	r3, r3
 8000910:	4933      	ldr	r1, [pc, #204]	; (80009e0 <HAL_GPIO_Init+0x2b0>)
 8000912:	4013      	ands	r3, r2
 8000914:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800091e:	2b00      	cmp	r3, #0
 8000920:	d006      	beq.n	8000930 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000922:	4b2f      	ldr	r3, [pc, #188]	; (80009e0 <HAL_GPIO_Init+0x2b0>)
 8000924:	685a      	ldr	r2, [r3, #4]
 8000926:	492e      	ldr	r1, [pc, #184]	; (80009e0 <HAL_GPIO_Init+0x2b0>)
 8000928:	69bb      	ldr	r3, [r7, #24]
 800092a:	4313      	orrs	r3, r2
 800092c:	604b      	str	r3, [r1, #4]
 800092e:	e006      	b.n	800093e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000930:	4b2b      	ldr	r3, [pc, #172]	; (80009e0 <HAL_GPIO_Init+0x2b0>)
 8000932:	685a      	ldr	r2, [r3, #4]
 8000934:	69bb      	ldr	r3, [r7, #24]
 8000936:	43db      	mvns	r3, r3
 8000938:	4929      	ldr	r1, [pc, #164]	; (80009e0 <HAL_GPIO_Init+0x2b0>)
 800093a:	4013      	ands	r3, r2
 800093c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	685b      	ldr	r3, [r3, #4]
 8000942:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000946:	2b00      	cmp	r3, #0
 8000948:	d006      	beq.n	8000958 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800094a:	4b25      	ldr	r3, [pc, #148]	; (80009e0 <HAL_GPIO_Init+0x2b0>)
 800094c:	689a      	ldr	r2, [r3, #8]
 800094e:	4924      	ldr	r1, [pc, #144]	; (80009e0 <HAL_GPIO_Init+0x2b0>)
 8000950:	69bb      	ldr	r3, [r7, #24]
 8000952:	4313      	orrs	r3, r2
 8000954:	608b      	str	r3, [r1, #8]
 8000956:	e006      	b.n	8000966 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000958:	4b21      	ldr	r3, [pc, #132]	; (80009e0 <HAL_GPIO_Init+0x2b0>)
 800095a:	689a      	ldr	r2, [r3, #8]
 800095c:	69bb      	ldr	r3, [r7, #24]
 800095e:	43db      	mvns	r3, r3
 8000960:	491f      	ldr	r1, [pc, #124]	; (80009e0 <HAL_GPIO_Init+0x2b0>)
 8000962:	4013      	ands	r3, r2
 8000964:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	685b      	ldr	r3, [r3, #4]
 800096a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800096e:	2b00      	cmp	r3, #0
 8000970:	d006      	beq.n	8000980 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000972:	4b1b      	ldr	r3, [pc, #108]	; (80009e0 <HAL_GPIO_Init+0x2b0>)
 8000974:	68da      	ldr	r2, [r3, #12]
 8000976:	491a      	ldr	r1, [pc, #104]	; (80009e0 <HAL_GPIO_Init+0x2b0>)
 8000978:	69bb      	ldr	r3, [r7, #24]
 800097a:	4313      	orrs	r3, r2
 800097c:	60cb      	str	r3, [r1, #12]
 800097e:	e006      	b.n	800098e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000980:	4b17      	ldr	r3, [pc, #92]	; (80009e0 <HAL_GPIO_Init+0x2b0>)
 8000982:	68da      	ldr	r2, [r3, #12]
 8000984:	69bb      	ldr	r3, [r7, #24]
 8000986:	43db      	mvns	r3, r3
 8000988:	4915      	ldr	r1, [pc, #84]	; (80009e0 <HAL_GPIO_Init+0x2b0>)
 800098a:	4013      	ands	r3, r2
 800098c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800098e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000990:	3301      	adds	r3, #1
 8000992:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099a:	fa22 f303 	lsr.w	r3, r2, r3
 800099e:	2b00      	cmp	r3, #0
 80009a0:	f47f aed0 	bne.w	8000744 <HAL_GPIO_Init+0x14>
  }
}
 80009a4:	bf00      	nop
 80009a6:	372c      	adds	r7, #44	; 0x2c
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bc80      	pop	{r7}
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	10210000 	.word	0x10210000
 80009b4:	10110000 	.word	0x10110000
 80009b8:	10120000 	.word	0x10120000
 80009bc:	10310000 	.word	0x10310000
 80009c0:	10320000 	.word	0x10320000
 80009c4:	10220000 	.word	0x10220000
 80009c8:	40021000 	.word	0x40021000
 80009cc:	40010000 	.word	0x40010000
 80009d0:	40010800 	.word	0x40010800
 80009d4:	40010c00 	.word	0x40010c00
 80009d8:	40011000 	.word	0x40011000
 80009dc:	40011400 	.word	0x40011400
 80009e0:	40010400 	.word	0x40010400

080009e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	460b      	mov	r3, r1
 80009ee:	807b      	strh	r3, [r7, #2]
 80009f0:	4613      	mov	r3, r2
 80009f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80009f4:	787b      	ldrb	r3, [r7, #1]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d003      	beq.n	8000a02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80009fa:	887a      	ldrh	r2, [r7, #2]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000a00:	e003      	b.n	8000a0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a02:	887b      	ldrh	r3, [r7, #2]
 8000a04:	041a      	lsls	r2, r3, #16
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	611a      	str	r2, [r3, #16]
}
 8000a0a:	bf00      	nop
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bc80      	pop	{r7}
 8000a12:	4770      	bx	lr

08000a14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b086      	sub	sp, #24
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d101      	bne.n	8000a26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000a22:	2301      	movs	r3, #1
 8000a24:	e26c      	b.n	8000f00 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	f000 8087 	beq.w	8000b42 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000a34:	4b92      	ldr	r3, [pc, #584]	; (8000c80 <HAL_RCC_OscConfig+0x26c>)
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	f003 030c 	and.w	r3, r3, #12
 8000a3c:	2b04      	cmp	r3, #4
 8000a3e:	d00c      	beq.n	8000a5a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a40:	4b8f      	ldr	r3, [pc, #572]	; (8000c80 <HAL_RCC_OscConfig+0x26c>)
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	f003 030c 	and.w	r3, r3, #12
 8000a48:	2b08      	cmp	r3, #8
 8000a4a:	d112      	bne.n	8000a72 <HAL_RCC_OscConfig+0x5e>
 8000a4c:	4b8c      	ldr	r3, [pc, #560]	; (8000c80 <HAL_RCC_OscConfig+0x26c>)
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a58:	d10b      	bne.n	8000a72 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a5a:	4b89      	ldr	r3, [pc, #548]	; (8000c80 <HAL_RCC_OscConfig+0x26c>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d06c      	beq.n	8000b40 <HAL_RCC_OscConfig+0x12c>
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d168      	bne.n	8000b40 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	e246      	b.n	8000f00 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a7a:	d106      	bne.n	8000a8a <HAL_RCC_OscConfig+0x76>
 8000a7c:	4b80      	ldr	r3, [pc, #512]	; (8000c80 <HAL_RCC_OscConfig+0x26c>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a7f      	ldr	r2, [pc, #508]	; (8000c80 <HAL_RCC_OscConfig+0x26c>)
 8000a82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a86:	6013      	str	r3, [r2, #0]
 8000a88:	e02e      	b.n	8000ae8 <HAL_RCC_OscConfig+0xd4>
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d10c      	bne.n	8000aac <HAL_RCC_OscConfig+0x98>
 8000a92:	4b7b      	ldr	r3, [pc, #492]	; (8000c80 <HAL_RCC_OscConfig+0x26c>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a7a      	ldr	r2, [pc, #488]	; (8000c80 <HAL_RCC_OscConfig+0x26c>)
 8000a98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a9c:	6013      	str	r3, [r2, #0]
 8000a9e:	4b78      	ldr	r3, [pc, #480]	; (8000c80 <HAL_RCC_OscConfig+0x26c>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a77      	ldr	r2, [pc, #476]	; (8000c80 <HAL_RCC_OscConfig+0x26c>)
 8000aa4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000aa8:	6013      	str	r3, [r2, #0]
 8000aaa:	e01d      	b.n	8000ae8 <HAL_RCC_OscConfig+0xd4>
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ab4:	d10c      	bne.n	8000ad0 <HAL_RCC_OscConfig+0xbc>
 8000ab6:	4b72      	ldr	r3, [pc, #456]	; (8000c80 <HAL_RCC_OscConfig+0x26c>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4a71      	ldr	r2, [pc, #452]	; (8000c80 <HAL_RCC_OscConfig+0x26c>)
 8000abc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ac0:	6013      	str	r3, [r2, #0]
 8000ac2:	4b6f      	ldr	r3, [pc, #444]	; (8000c80 <HAL_RCC_OscConfig+0x26c>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4a6e      	ldr	r2, [pc, #440]	; (8000c80 <HAL_RCC_OscConfig+0x26c>)
 8000ac8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000acc:	6013      	str	r3, [r2, #0]
 8000ace:	e00b      	b.n	8000ae8 <HAL_RCC_OscConfig+0xd4>
 8000ad0:	4b6b      	ldr	r3, [pc, #428]	; (8000c80 <HAL_RCC_OscConfig+0x26c>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a6a      	ldr	r2, [pc, #424]	; (8000c80 <HAL_RCC_OscConfig+0x26c>)
 8000ad6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ada:	6013      	str	r3, [r2, #0]
 8000adc:	4b68      	ldr	r3, [pc, #416]	; (8000c80 <HAL_RCC_OscConfig+0x26c>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a67      	ldr	r2, [pc, #412]	; (8000c80 <HAL_RCC_OscConfig+0x26c>)
 8000ae2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ae6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d013      	beq.n	8000b18 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000af0:	f7ff fb84 	bl	80001fc <HAL_GetTick>
 8000af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000af6:	e008      	b.n	8000b0a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000af8:	f7ff fb80 	bl	80001fc <HAL_GetTick>
 8000afc:	4602      	mov	r2, r0
 8000afe:	693b      	ldr	r3, [r7, #16]
 8000b00:	1ad3      	subs	r3, r2, r3
 8000b02:	2b64      	cmp	r3, #100	; 0x64
 8000b04:	d901      	bls.n	8000b0a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000b06:	2303      	movs	r3, #3
 8000b08:	e1fa      	b.n	8000f00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b0a:	4b5d      	ldr	r3, [pc, #372]	; (8000c80 <HAL_RCC_OscConfig+0x26c>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d0f0      	beq.n	8000af8 <HAL_RCC_OscConfig+0xe4>
 8000b16:	e014      	b.n	8000b42 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b18:	f7ff fb70 	bl	80001fc <HAL_GetTick>
 8000b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b1e:	e008      	b.n	8000b32 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b20:	f7ff fb6c 	bl	80001fc <HAL_GetTick>
 8000b24:	4602      	mov	r2, r0
 8000b26:	693b      	ldr	r3, [r7, #16]
 8000b28:	1ad3      	subs	r3, r2, r3
 8000b2a:	2b64      	cmp	r3, #100	; 0x64
 8000b2c:	d901      	bls.n	8000b32 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000b2e:	2303      	movs	r3, #3
 8000b30:	e1e6      	b.n	8000f00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b32:	4b53      	ldr	r3, [pc, #332]	; (8000c80 <HAL_RCC_OscConfig+0x26c>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d1f0      	bne.n	8000b20 <HAL_RCC_OscConfig+0x10c>
 8000b3e:	e000      	b.n	8000b42 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f003 0302 	and.w	r3, r3, #2
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d063      	beq.n	8000c16 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b4e:	4b4c      	ldr	r3, [pc, #304]	; (8000c80 <HAL_RCC_OscConfig+0x26c>)
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	f003 030c 	and.w	r3, r3, #12
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d00b      	beq.n	8000b72 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000b5a:	4b49      	ldr	r3, [pc, #292]	; (8000c80 <HAL_RCC_OscConfig+0x26c>)
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	f003 030c 	and.w	r3, r3, #12
 8000b62:	2b08      	cmp	r3, #8
 8000b64:	d11c      	bne.n	8000ba0 <HAL_RCC_OscConfig+0x18c>
 8000b66:	4b46      	ldr	r3, [pc, #280]	; (8000c80 <HAL_RCC_OscConfig+0x26c>)
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d116      	bne.n	8000ba0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b72:	4b43      	ldr	r3, [pc, #268]	; (8000c80 <HAL_RCC_OscConfig+0x26c>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f003 0302 	and.w	r3, r3, #2
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d005      	beq.n	8000b8a <HAL_RCC_OscConfig+0x176>
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	691b      	ldr	r3, [r3, #16]
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d001      	beq.n	8000b8a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
 8000b88:	e1ba      	b.n	8000f00 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b8a:	4b3d      	ldr	r3, [pc, #244]	; (8000c80 <HAL_RCC_OscConfig+0x26c>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	695b      	ldr	r3, [r3, #20]
 8000b96:	00db      	lsls	r3, r3, #3
 8000b98:	4939      	ldr	r1, [pc, #228]	; (8000c80 <HAL_RCC_OscConfig+0x26c>)
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b9e:	e03a      	b.n	8000c16 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	691b      	ldr	r3, [r3, #16]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d020      	beq.n	8000bea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ba8:	4b36      	ldr	r3, [pc, #216]	; (8000c84 <HAL_RCC_OscConfig+0x270>)
 8000baa:	2201      	movs	r2, #1
 8000bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bae:	f7ff fb25 	bl	80001fc <HAL_GetTick>
 8000bb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bb4:	e008      	b.n	8000bc8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000bb6:	f7ff fb21 	bl	80001fc <HAL_GetTick>
 8000bba:	4602      	mov	r2, r0
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	1ad3      	subs	r3, r2, r3
 8000bc0:	2b02      	cmp	r3, #2
 8000bc2:	d901      	bls.n	8000bc8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000bc4:	2303      	movs	r3, #3
 8000bc6:	e19b      	b.n	8000f00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bc8:	4b2d      	ldr	r3, [pc, #180]	; (8000c80 <HAL_RCC_OscConfig+0x26c>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f003 0302 	and.w	r3, r3, #2
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d0f0      	beq.n	8000bb6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bd4:	4b2a      	ldr	r3, [pc, #168]	; (8000c80 <HAL_RCC_OscConfig+0x26c>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	695b      	ldr	r3, [r3, #20]
 8000be0:	00db      	lsls	r3, r3, #3
 8000be2:	4927      	ldr	r1, [pc, #156]	; (8000c80 <HAL_RCC_OscConfig+0x26c>)
 8000be4:	4313      	orrs	r3, r2
 8000be6:	600b      	str	r3, [r1, #0]
 8000be8:	e015      	b.n	8000c16 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000bea:	4b26      	ldr	r3, [pc, #152]	; (8000c84 <HAL_RCC_OscConfig+0x270>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bf0:	f7ff fb04 	bl	80001fc <HAL_GetTick>
 8000bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000bf6:	e008      	b.n	8000c0a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000bf8:	f7ff fb00 	bl	80001fc <HAL_GetTick>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	2b02      	cmp	r3, #2
 8000c04:	d901      	bls.n	8000c0a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000c06:	2303      	movs	r3, #3
 8000c08:	e17a      	b.n	8000f00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c0a:	4b1d      	ldr	r3, [pc, #116]	; (8000c80 <HAL_RCC_OscConfig+0x26c>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f003 0302 	and.w	r3, r3, #2
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d1f0      	bne.n	8000bf8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f003 0308 	and.w	r3, r3, #8
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d03a      	beq.n	8000c98 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	699b      	ldr	r3, [r3, #24]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d019      	beq.n	8000c5e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c2a:	4b17      	ldr	r3, [pc, #92]	; (8000c88 <HAL_RCC_OscConfig+0x274>)
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c30:	f7ff fae4 	bl	80001fc <HAL_GetTick>
 8000c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c36:	e008      	b.n	8000c4a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c38:	f7ff fae0 	bl	80001fc <HAL_GetTick>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	693b      	ldr	r3, [r7, #16]
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	2b02      	cmp	r3, #2
 8000c44:	d901      	bls.n	8000c4a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000c46:	2303      	movs	r3, #3
 8000c48:	e15a      	b.n	8000f00 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c4a:	4b0d      	ldr	r3, [pc, #52]	; (8000c80 <HAL_RCC_OscConfig+0x26c>)
 8000c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c4e:	f003 0302 	and.w	r3, r3, #2
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d0f0      	beq.n	8000c38 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000c56:	2001      	movs	r0, #1
 8000c58:	f000 fada 	bl	8001210 <RCC_Delay>
 8000c5c:	e01c      	b.n	8000c98 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000c5e:	4b0a      	ldr	r3, [pc, #40]	; (8000c88 <HAL_RCC_OscConfig+0x274>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c64:	f7ff faca 	bl	80001fc <HAL_GetTick>
 8000c68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c6a:	e00f      	b.n	8000c8c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c6c:	f7ff fac6 	bl	80001fc <HAL_GetTick>
 8000c70:	4602      	mov	r2, r0
 8000c72:	693b      	ldr	r3, [r7, #16]
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	2b02      	cmp	r3, #2
 8000c78:	d908      	bls.n	8000c8c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	e140      	b.n	8000f00 <HAL_RCC_OscConfig+0x4ec>
 8000c7e:	bf00      	nop
 8000c80:	40021000 	.word	0x40021000
 8000c84:	42420000 	.word	0x42420000
 8000c88:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c8c:	4b9e      	ldr	r3, [pc, #632]	; (8000f08 <HAL_RCC_OscConfig+0x4f4>)
 8000c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c90:	f003 0302 	and.w	r3, r3, #2
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d1e9      	bne.n	8000c6c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f003 0304 	and.w	r3, r3, #4
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	f000 80a6 	beq.w	8000df2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000caa:	4b97      	ldr	r3, [pc, #604]	; (8000f08 <HAL_RCC_OscConfig+0x4f4>)
 8000cac:	69db      	ldr	r3, [r3, #28]
 8000cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d10d      	bne.n	8000cd2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000cb6:	4b94      	ldr	r3, [pc, #592]	; (8000f08 <HAL_RCC_OscConfig+0x4f4>)
 8000cb8:	69db      	ldr	r3, [r3, #28]
 8000cba:	4a93      	ldr	r2, [pc, #588]	; (8000f08 <HAL_RCC_OscConfig+0x4f4>)
 8000cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cc0:	61d3      	str	r3, [r2, #28]
 8000cc2:	4b91      	ldr	r3, [pc, #580]	; (8000f08 <HAL_RCC_OscConfig+0x4f4>)
 8000cc4:	69db      	ldr	r3, [r3, #28]
 8000cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cca:	60bb      	str	r3, [r7, #8]
 8000ccc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cd2:	4b8e      	ldr	r3, [pc, #568]	; (8000f0c <HAL_RCC_OscConfig+0x4f8>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d118      	bne.n	8000d10 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000cde:	4b8b      	ldr	r3, [pc, #556]	; (8000f0c <HAL_RCC_OscConfig+0x4f8>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a8a      	ldr	r2, [pc, #552]	; (8000f0c <HAL_RCC_OscConfig+0x4f8>)
 8000ce4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ce8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000cea:	f7ff fa87 	bl	80001fc <HAL_GetTick>
 8000cee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cf0:	e008      	b.n	8000d04 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000cf2:	f7ff fa83 	bl	80001fc <HAL_GetTick>
 8000cf6:	4602      	mov	r2, r0
 8000cf8:	693b      	ldr	r3, [r7, #16]
 8000cfa:	1ad3      	subs	r3, r2, r3
 8000cfc:	2b64      	cmp	r3, #100	; 0x64
 8000cfe:	d901      	bls.n	8000d04 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000d00:	2303      	movs	r3, #3
 8000d02:	e0fd      	b.n	8000f00 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d04:	4b81      	ldr	r3, [pc, #516]	; (8000f0c <HAL_RCC_OscConfig+0x4f8>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d0f0      	beq.n	8000cf2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d106      	bne.n	8000d26 <HAL_RCC_OscConfig+0x312>
 8000d18:	4b7b      	ldr	r3, [pc, #492]	; (8000f08 <HAL_RCC_OscConfig+0x4f4>)
 8000d1a:	6a1b      	ldr	r3, [r3, #32]
 8000d1c:	4a7a      	ldr	r2, [pc, #488]	; (8000f08 <HAL_RCC_OscConfig+0x4f4>)
 8000d1e:	f043 0301 	orr.w	r3, r3, #1
 8000d22:	6213      	str	r3, [r2, #32]
 8000d24:	e02d      	b.n	8000d82 <HAL_RCC_OscConfig+0x36e>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	68db      	ldr	r3, [r3, #12]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d10c      	bne.n	8000d48 <HAL_RCC_OscConfig+0x334>
 8000d2e:	4b76      	ldr	r3, [pc, #472]	; (8000f08 <HAL_RCC_OscConfig+0x4f4>)
 8000d30:	6a1b      	ldr	r3, [r3, #32]
 8000d32:	4a75      	ldr	r2, [pc, #468]	; (8000f08 <HAL_RCC_OscConfig+0x4f4>)
 8000d34:	f023 0301 	bic.w	r3, r3, #1
 8000d38:	6213      	str	r3, [r2, #32]
 8000d3a:	4b73      	ldr	r3, [pc, #460]	; (8000f08 <HAL_RCC_OscConfig+0x4f4>)
 8000d3c:	6a1b      	ldr	r3, [r3, #32]
 8000d3e:	4a72      	ldr	r2, [pc, #456]	; (8000f08 <HAL_RCC_OscConfig+0x4f4>)
 8000d40:	f023 0304 	bic.w	r3, r3, #4
 8000d44:	6213      	str	r3, [r2, #32]
 8000d46:	e01c      	b.n	8000d82 <HAL_RCC_OscConfig+0x36e>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	2b05      	cmp	r3, #5
 8000d4e:	d10c      	bne.n	8000d6a <HAL_RCC_OscConfig+0x356>
 8000d50:	4b6d      	ldr	r3, [pc, #436]	; (8000f08 <HAL_RCC_OscConfig+0x4f4>)
 8000d52:	6a1b      	ldr	r3, [r3, #32]
 8000d54:	4a6c      	ldr	r2, [pc, #432]	; (8000f08 <HAL_RCC_OscConfig+0x4f4>)
 8000d56:	f043 0304 	orr.w	r3, r3, #4
 8000d5a:	6213      	str	r3, [r2, #32]
 8000d5c:	4b6a      	ldr	r3, [pc, #424]	; (8000f08 <HAL_RCC_OscConfig+0x4f4>)
 8000d5e:	6a1b      	ldr	r3, [r3, #32]
 8000d60:	4a69      	ldr	r2, [pc, #420]	; (8000f08 <HAL_RCC_OscConfig+0x4f4>)
 8000d62:	f043 0301 	orr.w	r3, r3, #1
 8000d66:	6213      	str	r3, [r2, #32]
 8000d68:	e00b      	b.n	8000d82 <HAL_RCC_OscConfig+0x36e>
 8000d6a:	4b67      	ldr	r3, [pc, #412]	; (8000f08 <HAL_RCC_OscConfig+0x4f4>)
 8000d6c:	6a1b      	ldr	r3, [r3, #32]
 8000d6e:	4a66      	ldr	r2, [pc, #408]	; (8000f08 <HAL_RCC_OscConfig+0x4f4>)
 8000d70:	f023 0301 	bic.w	r3, r3, #1
 8000d74:	6213      	str	r3, [r2, #32]
 8000d76:	4b64      	ldr	r3, [pc, #400]	; (8000f08 <HAL_RCC_OscConfig+0x4f4>)
 8000d78:	6a1b      	ldr	r3, [r3, #32]
 8000d7a:	4a63      	ldr	r2, [pc, #396]	; (8000f08 <HAL_RCC_OscConfig+0x4f4>)
 8000d7c:	f023 0304 	bic.w	r3, r3, #4
 8000d80:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	68db      	ldr	r3, [r3, #12]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d015      	beq.n	8000db6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d8a:	f7ff fa37 	bl	80001fc <HAL_GetTick>
 8000d8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d90:	e00a      	b.n	8000da8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d92:	f7ff fa33 	bl	80001fc <HAL_GetTick>
 8000d96:	4602      	mov	r2, r0
 8000d98:	693b      	ldr	r3, [r7, #16]
 8000d9a:	1ad3      	subs	r3, r2, r3
 8000d9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d901      	bls.n	8000da8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000da4:	2303      	movs	r3, #3
 8000da6:	e0ab      	b.n	8000f00 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000da8:	4b57      	ldr	r3, [pc, #348]	; (8000f08 <HAL_RCC_OscConfig+0x4f4>)
 8000daa:	6a1b      	ldr	r3, [r3, #32]
 8000dac:	f003 0302 	and.w	r3, r3, #2
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d0ee      	beq.n	8000d92 <HAL_RCC_OscConfig+0x37e>
 8000db4:	e014      	b.n	8000de0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000db6:	f7ff fa21 	bl	80001fc <HAL_GetTick>
 8000dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000dbc:	e00a      	b.n	8000dd4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000dbe:	f7ff fa1d 	bl	80001fc <HAL_GetTick>
 8000dc2:	4602      	mov	r2, r0
 8000dc4:	693b      	ldr	r3, [r7, #16]
 8000dc6:	1ad3      	subs	r3, r2, r3
 8000dc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d901      	bls.n	8000dd4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	e095      	b.n	8000f00 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000dd4:	4b4c      	ldr	r3, [pc, #304]	; (8000f08 <HAL_RCC_OscConfig+0x4f4>)
 8000dd6:	6a1b      	ldr	r3, [r3, #32]
 8000dd8:	f003 0302 	and.w	r3, r3, #2
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d1ee      	bne.n	8000dbe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000de0:	7dfb      	ldrb	r3, [r7, #23]
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d105      	bne.n	8000df2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000de6:	4b48      	ldr	r3, [pc, #288]	; (8000f08 <HAL_RCC_OscConfig+0x4f4>)
 8000de8:	69db      	ldr	r3, [r3, #28]
 8000dea:	4a47      	ldr	r2, [pc, #284]	; (8000f08 <HAL_RCC_OscConfig+0x4f4>)
 8000dec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000df0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	69db      	ldr	r3, [r3, #28]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	f000 8081 	beq.w	8000efe <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000dfc:	4b42      	ldr	r3, [pc, #264]	; (8000f08 <HAL_RCC_OscConfig+0x4f4>)
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f003 030c 	and.w	r3, r3, #12
 8000e04:	2b08      	cmp	r3, #8
 8000e06:	d061      	beq.n	8000ecc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	69db      	ldr	r3, [r3, #28]
 8000e0c:	2b02      	cmp	r3, #2
 8000e0e:	d146      	bne.n	8000e9e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e10:	4b3f      	ldr	r3, [pc, #252]	; (8000f10 <HAL_RCC_OscConfig+0x4fc>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e16:	f7ff f9f1 	bl	80001fc <HAL_GetTick>
 8000e1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e1c:	e008      	b.n	8000e30 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e1e:	f7ff f9ed 	bl	80001fc <HAL_GetTick>
 8000e22:	4602      	mov	r2, r0
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	1ad3      	subs	r3, r2, r3
 8000e28:	2b02      	cmp	r3, #2
 8000e2a:	d901      	bls.n	8000e30 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	e067      	b.n	8000f00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e30:	4b35      	ldr	r3, [pc, #212]	; (8000f08 <HAL_RCC_OscConfig+0x4f4>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d1f0      	bne.n	8000e1e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6a1b      	ldr	r3, [r3, #32]
 8000e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e44:	d108      	bne.n	8000e58 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e46:	4b30      	ldr	r3, [pc, #192]	; (8000f08 <HAL_RCC_OscConfig+0x4f4>)
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	492d      	ldr	r1, [pc, #180]	; (8000f08 <HAL_RCC_OscConfig+0x4f4>)
 8000e54:	4313      	orrs	r3, r2
 8000e56:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e58:	4b2b      	ldr	r3, [pc, #172]	; (8000f08 <HAL_RCC_OscConfig+0x4f4>)
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6a19      	ldr	r1, [r3, #32]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e68:	430b      	orrs	r3, r1
 8000e6a:	4927      	ldr	r1, [pc, #156]	; (8000f08 <HAL_RCC_OscConfig+0x4f4>)
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000e70:	4b27      	ldr	r3, [pc, #156]	; (8000f10 <HAL_RCC_OscConfig+0x4fc>)
 8000e72:	2201      	movs	r2, #1
 8000e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e76:	f7ff f9c1 	bl	80001fc <HAL_GetTick>
 8000e7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e7c:	e008      	b.n	8000e90 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e7e:	f7ff f9bd 	bl	80001fc <HAL_GetTick>
 8000e82:	4602      	mov	r2, r0
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	1ad3      	subs	r3, r2, r3
 8000e88:	2b02      	cmp	r3, #2
 8000e8a:	d901      	bls.n	8000e90 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000e8c:	2303      	movs	r3, #3
 8000e8e:	e037      	b.n	8000f00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e90:	4b1d      	ldr	r3, [pc, #116]	; (8000f08 <HAL_RCC_OscConfig+0x4f4>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d0f0      	beq.n	8000e7e <HAL_RCC_OscConfig+0x46a>
 8000e9c:	e02f      	b.n	8000efe <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e9e:	4b1c      	ldr	r3, [pc, #112]	; (8000f10 <HAL_RCC_OscConfig+0x4fc>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ea4:	f7ff f9aa 	bl	80001fc <HAL_GetTick>
 8000ea8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000eaa:	e008      	b.n	8000ebe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000eac:	f7ff f9a6 	bl	80001fc <HAL_GetTick>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	d901      	bls.n	8000ebe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	e020      	b.n	8000f00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ebe:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <HAL_RCC_OscConfig+0x4f4>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d1f0      	bne.n	8000eac <HAL_RCC_OscConfig+0x498>
 8000eca:	e018      	b.n	8000efe <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	69db      	ldr	r3, [r3, #28]
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d101      	bne.n	8000ed8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	e013      	b.n	8000f00 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000ed8:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <HAL_RCC_OscConfig+0x4f4>)
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6a1b      	ldr	r3, [r3, #32]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d106      	bne.n	8000efa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d001      	beq.n	8000efe <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e000      	b.n	8000f00 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000efe:	2300      	movs	r3, #0
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3718      	adds	r7, #24
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	40007000 	.word	0x40007000
 8000f10:	42420060 	.word	0x42420060

08000f14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d101      	bne.n	8000f28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f24:	2301      	movs	r3, #1
 8000f26:	e0d0      	b.n	80010ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000f28:	4b6a      	ldr	r3, [pc, #424]	; (80010d4 <HAL_RCC_ClockConfig+0x1c0>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f003 0307 	and.w	r3, r3, #7
 8000f30:	683a      	ldr	r2, [r7, #0]
 8000f32:	429a      	cmp	r2, r3
 8000f34:	d910      	bls.n	8000f58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f36:	4b67      	ldr	r3, [pc, #412]	; (80010d4 <HAL_RCC_ClockConfig+0x1c0>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f023 0207 	bic.w	r2, r3, #7
 8000f3e:	4965      	ldr	r1, [pc, #404]	; (80010d4 <HAL_RCC_ClockConfig+0x1c0>)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f46:	4b63      	ldr	r3, [pc, #396]	; (80010d4 <HAL_RCC_ClockConfig+0x1c0>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f003 0307 	and.w	r3, r3, #7
 8000f4e:	683a      	ldr	r2, [r7, #0]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d001      	beq.n	8000f58 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000f54:	2301      	movs	r3, #1
 8000f56:	e0b8      	b.n	80010ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f003 0302 	and.w	r3, r3, #2
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d020      	beq.n	8000fa6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f003 0304 	and.w	r3, r3, #4
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d005      	beq.n	8000f7c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f70:	4b59      	ldr	r3, [pc, #356]	; (80010d8 <HAL_RCC_ClockConfig+0x1c4>)
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	4a58      	ldr	r2, [pc, #352]	; (80010d8 <HAL_RCC_ClockConfig+0x1c4>)
 8000f76:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000f7a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f003 0308 	and.w	r3, r3, #8
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d005      	beq.n	8000f94 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f88:	4b53      	ldr	r3, [pc, #332]	; (80010d8 <HAL_RCC_ClockConfig+0x1c4>)
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	4a52      	ldr	r2, [pc, #328]	; (80010d8 <HAL_RCC_ClockConfig+0x1c4>)
 8000f8e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000f92:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f94:	4b50      	ldr	r3, [pc, #320]	; (80010d8 <HAL_RCC_ClockConfig+0x1c4>)
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	689b      	ldr	r3, [r3, #8]
 8000fa0:	494d      	ldr	r1, [pc, #308]	; (80010d8 <HAL_RCC_ClockConfig+0x1c4>)
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d040      	beq.n	8001034 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d107      	bne.n	8000fca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fba:	4b47      	ldr	r3, [pc, #284]	; (80010d8 <HAL_RCC_ClockConfig+0x1c4>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d115      	bne.n	8000ff2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e07f      	b.n	80010ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	d107      	bne.n	8000fe2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fd2:	4b41      	ldr	r3, [pc, #260]	; (80010d8 <HAL_RCC_ClockConfig+0x1c4>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d109      	bne.n	8000ff2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e073      	b.n	80010ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fe2:	4b3d      	ldr	r3, [pc, #244]	; (80010d8 <HAL_RCC_ClockConfig+0x1c4>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f003 0302 	and.w	r3, r3, #2
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d101      	bne.n	8000ff2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e06b      	b.n	80010ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000ff2:	4b39      	ldr	r3, [pc, #228]	; (80010d8 <HAL_RCC_ClockConfig+0x1c4>)
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f023 0203 	bic.w	r2, r3, #3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	4936      	ldr	r1, [pc, #216]	; (80010d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001000:	4313      	orrs	r3, r2
 8001002:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001004:	f7ff f8fa 	bl	80001fc <HAL_GetTick>
 8001008:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800100a:	e00a      	b.n	8001022 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800100c:	f7ff f8f6 	bl	80001fc <HAL_GetTick>
 8001010:	4602      	mov	r2, r0
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	f241 3288 	movw	r2, #5000	; 0x1388
 800101a:	4293      	cmp	r3, r2
 800101c:	d901      	bls.n	8001022 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800101e:	2303      	movs	r3, #3
 8001020:	e053      	b.n	80010ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001022:	4b2d      	ldr	r3, [pc, #180]	; (80010d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f003 020c 	and.w	r2, r3, #12
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	429a      	cmp	r2, r3
 8001032:	d1eb      	bne.n	800100c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001034:	4b27      	ldr	r3, [pc, #156]	; (80010d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f003 0307 	and.w	r3, r3, #7
 800103c:	683a      	ldr	r2, [r7, #0]
 800103e:	429a      	cmp	r2, r3
 8001040:	d210      	bcs.n	8001064 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001042:	4b24      	ldr	r3, [pc, #144]	; (80010d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f023 0207 	bic.w	r2, r3, #7
 800104a:	4922      	ldr	r1, [pc, #136]	; (80010d4 <HAL_RCC_ClockConfig+0x1c0>)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	4313      	orrs	r3, r2
 8001050:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001052:	4b20      	ldr	r3, [pc, #128]	; (80010d4 <HAL_RCC_ClockConfig+0x1c0>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f003 0307 	and.w	r3, r3, #7
 800105a:	683a      	ldr	r2, [r7, #0]
 800105c:	429a      	cmp	r2, r3
 800105e:	d001      	beq.n	8001064 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001060:	2301      	movs	r3, #1
 8001062:	e032      	b.n	80010ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f003 0304 	and.w	r3, r3, #4
 800106c:	2b00      	cmp	r3, #0
 800106e:	d008      	beq.n	8001082 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001070:	4b19      	ldr	r3, [pc, #100]	; (80010d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	4916      	ldr	r1, [pc, #88]	; (80010d8 <HAL_RCC_ClockConfig+0x1c4>)
 800107e:	4313      	orrs	r3, r2
 8001080:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 0308 	and.w	r3, r3, #8
 800108a:	2b00      	cmp	r3, #0
 800108c:	d009      	beq.n	80010a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800108e:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <HAL_RCC_ClockConfig+0x1c4>)
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	691b      	ldr	r3, [r3, #16]
 800109a:	00db      	lsls	r3, r3, #3
 800109c:	490e      	ldr	r1, [pc, #56]	; (80010d8 <HAL_RCC_ClockConfig+0x1c4>)
 800109e:	4313      	orrs	r3, r2
 80010a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80010a2:	f000 f821 	bl	80010e8 <HAL_RCC_GetSysClockFreq>
 80010a6:	4601      	mov	r1, r0
 80010a8:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <HAL_RCC_ClockConfig+0x1c4>)
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	091b      	lsrs	r3, r3, #4
 80010ae:	f003 030f 	and.w	r3, r3, #15
 80010b2:	4a0a      	ldr	r2, [pc, #40]	; (80010dc <HAL_RCC_ClockConfig+0x1c8>)
 80010b4:	5cd3      	ldrb	r3, [r2, r3]
 80010b6:	fa21 f303 	lsr.w	r3, r1, r3
 80010ba:	4a09      	ldr	r2, [pc, #36]	; (80010e0 <HAL_RCC_ClockConfig+0x1cc>)
 80010bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80010be:	4b09      	ldr	r3, [pc, #36]	; (80010e4 <HAL_RCC_ClockConfig+0x1d0>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff f858 	bl	8000178 <HAL_InitTick>

  return HAL_OK;
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40022000 	.word	0x40022000
 80010d8:	40021000 	.word	0x40021000
 80010dc:	08002570 	.word	0x08002570
 80010e0:	2000000c 	.word	0x2000000c
 80010e4:	20000000 	.word	0x20000000

080010e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80010e8:	b490      	push	{r4, r7}
 80010ea:	b08a      	sub	sp, #40	; 0x28
 80010ec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80010ee:	4b2a      	ldr	r3, [pc, #168]	; (8001198 <HAL_RCC_GetSysClockFreq+0xb0>)
 80010f0:	1d3c      	adds	r4, r7, #4
 80010f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80010f8:	4b28      	ldr	r3, [pc, #160]	; (800119c <HAL_RCC_GetSysClockFreq+0xb4>)
 80010fa:	881b      	ldrh	r3, [r3, #0]
 80010fc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
 8001102:	2300      	movs	r3, #0
 8001104:	61bb      	str	r3, [r7, #24]
 8001106:	2300      	movs	r3, #0
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
 800110a:	2300      	movs	r3, #0
 800110c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800110e:	2300      	movs	r3, #0
 8001110:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001112:	4b23      	ldr	r3, [pc, #140]	; (80011a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	f003 030c 	and.w	r3, r3, #12
 800111e:	2b04      	cmp	r3, #4
 8001120:	d002      	beq.n	8001128 <HAL_RCC_GetSysClockFreq+0x40>
 8001122:	2b08      	cmp	r3, #8
 8001124:	d003      	beq.n	800112e <HAL_RCC_GetSysClockFreq+0x46>
 8001126:	e02d      	b.n	8001184 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001128:	4b1e      	ldr	r3, [pc, #120]	; (80011a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800112a:	623b      	str	r3, [r7, #32]
      break;
 800112c:	e02d      	b.n	800118a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	0c9b      	lsrs	r3, r3, #18
 8001132:	f003 030f 	and.w	r3, r3, #15
 8001136:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800113a:	4413      	add	r3, r2
 800113c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001140:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d013      	beq.n	8001174 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800114c:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	0c5b      	lsrs	r3, r3, #17
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800115a:	4413      	add	r3, r2
 800115c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001160:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	4a0f      	ldr	r2, [pc, #60]	; (80011a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001166:	fb02 f203 	mul.w	r2, r2, r3
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001170:	627b      	str	r3, [r7, #36]	; 0x24
 8001172:	e004      	b.n	800117e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	4a0c      	ldr	r2, [pc, #48]	; (80011a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001178:	fb02 f303 	mul.w	r3, r2, r3
 800117c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800117e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001180:	623b      	str	r3, [r7, #32]
      break;
 8001182:	e002      	b.n	800118a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001184:	4b07      	ldr	r3, [pc, #28]	; (80011a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001186:	623b      	str	r3, [r7, #32]
      break;
 8001188:	bf00      	nop
    }
  }
  return sysclockfreq;
 800118a:	6a3b      	ldr	r3, [r7, #32]
}
 800118c:	4618      	mov	r0, r3
 800118e:	3728      	adds	r7, #40	; 0x28
 8001190:	46bd      	mov	sp, r7
 8001192:	bc90      	pop	{r4, r7}
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	0800255c 	.word	0x0800255c
 800119c:	0800256c 	.word	0x0800256c
 80011a0:	40021000 	.word	0x40021000
 80011a4:	007a1200 	.word	0x007a1200
 80011a8:	003d0900 	.word	0x003d0900

080011ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80011b0:	4b02      	ldr	r3, [pc, #8]	; (80011bc <HAL_RCC_GetHCLKFreq+0x10>)
 80011b2:	681b      	ldr	r3, [r3, #0]
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc80      	pop	{r7}
 80011ba:	4770      	bx	lr
 80011bc:	2000000c 	.word	0x2000000c

080011c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80011c4:	f7ff fff2 	bl	80011ac <HAL_RCC_GetHCLKFreq>
 80011c8:	4601      	mov	r1, r0
 80011ca:	4b05      	ldr	r3, [pc, #20]	; (80011e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	0a1b      	lsrs	r3, r3, #8
 80011d0:	f003 0307 	and.w	r3, r3, #7
 80011d4:	4a03      	ldr	r2, [pc, #12]	; (80011e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80011d6:	5cd3      	ldrb	r3, [r2, r3]
 80011d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80011dc:	4618      	mov	r0, r3
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40021000 	.word	0x40021000
 80011e4:	08002580 	.word	0x08002580

080011e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80011ec:	f7ff ffde 	bl	80011ac <HAL_RCC_GetHCLKFreq>
 80011f0:	4601      	mov	r1, r0
 80011f2:	4b05      	ldr	r3, [pc, #20]	; (8001208 <HAL_RCC_GetPCLK2Freq+0x20>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	0adb      	lsrs	r3, r3, #11
 80011f8:	f003 0307 	and.w	r3, r3, #7
 80011fc:	4a03      	ldr	r2, [pc, #12]	; (800120c <HAL_RCC_GetPCLK2Freq+0x24>)
 80011fe:	5cd3      	ldrb	r3, [r2, r3]
 8001200:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001204:	4618      	mov	r0, r3
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40021000 	.word	0x40021000
 800120c:	08002580 	.word	0x08002580

08001210 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001218:	4b0a      	ldr	r3, [pc, #40]	; (8001244 <RCC_Delay+0x34>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a0a      	ldr	r2, [pc, #40]	; (8001248 <RCC_Delay+0x38>)
 800121e:	fba2 2303 	umull	r2, r3, r2, r3
 8001222:	0a5b      	lsrs	r3, r3, #9
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	fb02 f303 	mul.w	r3, r2, r3
 800122a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800122c:	bf00      	nop
  }
  while (Delay --);
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	1e5a      	subs	r2, r3, #1
 8001232:	60fa      	str	r2, [r7, #12]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d1f9      	bne.n	800122c <RCC_Delay+0x1c>
}
 8001238:	bf00      	nop
 800123a:	3714      	adds	r7, #20
 800123c:	46bd      	mov	sp, r7
 800123e:	bc80      	pop	{r7}
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	2000000c 	.word	0x2000000c
 8001248:	10624dd3 	.word	0x10624dd3

0800124c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d101      	bne.n	800125e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e053      	b.n	8001306 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2200      	movs	r2, #0
 8001262:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800126a:	b2db      	uxtb	r3, r3
 800126c:	2b00      	cmp	r3, #0
 800126e:	d106      	bne.n	800127e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2200      	movs	r2, #0
 8001274:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f000 ffab 	bl	80021d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2202      	movs	r2, #2
 8001282:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001294:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	685a      	ldr	r2, [r3, #4]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	431a      	orrs	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	431a      	orrs	r2, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	691b      	ldr	r3, [r3, #16]
 80012aa:	431a      	orrs	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	695b      	ldr	r3, [r3, #20]
 80012b0:	431a      	orrs	r2, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	699b      	ldr	r3, [r3, #24]
 80012b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012ba:	431a      	orrs	r2, r3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	69db      	ldr	r3, [r3, #28]
 80012c0:	431a      	orrs	r2, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6a1b      	ldr	r3, [r3, #32]
 80012c6:	ea42 0103 	orr.w	r1, r2, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	430a      	orrs	r2, r1
 80012d4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	699b      	ldr	r3, [r3, #24]
 80012da:	0c1a      	lsrs	r2, r3, #16
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f002 0204 	and.w	r2, r2, #4
 80012e4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	69da      	ldr	r2, [r3, #28]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012f4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2200      	movs	r2, #0
 80012fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2201      	movs	r2, #1
 8001300:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b088      	sub	sp, #32
 8001312:	af00      	add	r7, sp, #0
 8001314:	60f8      	str	r0, [r7, #12]
 8001316:	60b9      	str	r1, [r7, #8]
 8001318:	603b      	str	r3, [r7, #0]
 800131a:	4613      	mov	r3, r2
 800131c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800131e:	2300      	movs	r3, #0
 8001320:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001328:	2b01      	cmp	r3, #1
 800132a:	d101      	bne.n	8001330 <HAL_SPI_Transmit+0x22>
 800132c:	2302      	movs	r3, #2
 800132e:	e11e      	b.n	800156e <HAL_SPI_Transmit+0x260>
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	2201      	movs	r2, #1
 8001334:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001338:	f7fe ff60 	bl	80001fc <HAL_GetTick>
 800133c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800133e:	88fb      	ldrh	r3, [r7, #6]
 8001340:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2b01      	cmp	r3, #1
 800134c:	d002      	beq.n	8001354 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800134e:	2302      	movs	r3, #2
 8001350:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001352:	e103      	b.n	800155c <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d002      	beq.n	8001360 <HAL_SPI_Transmit+0x52>
 800135a:	88fb      	ldrh	r3, [r7, #6]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d102      	bne.n	8001366 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001364:	e0fa      	b.n	800155c <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	2203      	movs	r2, #3
 800136a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	2200      	movs	r2, #0
 8001372:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	68ba      	ldr	r2, [r7, #8]
 8001378:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	88fa      	ldrh	r2, [r7, #6]
 800137e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	88fa      	ldrh	r2, [r7, #6]
 8001384:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	2200      	movs	r2, #0
 800138a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	2200      	movs	r2, #0
 8001390:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	2200      	movs	r2, #0
 8001396:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	2200      	movs	r2, #0
 800139c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	2200      	movs	r2, #0
 80013a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80013ac:	d107      	bne.n	80013be <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80013bc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013c8:	2b40      	cmp	r3, #64	; 0x40
 80013ca:	d007      	beq.n	80013dc <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80013da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80013e4:	d14b      	bne.n	800147e <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d002      	beq.n	80013f4 <HAL_SPI_Transmit+0xe6>
 80013ee:	8afb      	ldrh	r3, [r7, #22]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d13e      	bne.n	8001472 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f8:	881a      	ldrh	r2, [r3, #0]
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001404:	1c9a      	adds	r2, r3, #2
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800140e:	b29b      	uxth	r3, r3
 8001410:	3b01      	subs	r3, #1
 8001412:	b29a      	uxth	r2, r3
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001418:	e02b      	b.n	8001472 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	f003 0302 	and.w	r3, r3, #2
 8001424:	2b02      	cmp	r3, #2
 8001426:	d112      	bne.n	800144e <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142c:	881a      	ldrh	r2, [r3, #0]
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001438:	1c9a      	adds	r2, r3, #2
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001442:	b29b      	uxth	r3, r3
 8001444:	3b01      	subs	r3, #1
 8001446:	b29a      	uxth	r2, r3
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	86da      	strh	r2, [r3, #54]	; 0x36
 800144c:	e011      	b.n	8001472 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800144e:	f7fe fed5 	bl	80001fc <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	683a      	ldr	r2, [r7, #0]
 800145a:	429a      	cmp	r2, r3
 800145c:	d803      	bhi.n	8001466 <HAL_SPI_Transmit+0x158>
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001464:	d102      	bne.n	800146c <HAL_SPI_Transmit+0x15e>
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d102      	bne.n	8001472 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001470:	e074      	b.n	800155c <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001476:	b29b      	uxth	r3, r3
 8001478:	2b00      	cmp	r3, #0
 800147a:	d1ce      	bne.n	800141a <HAL_SPI_Transmit+0x10c>
 800147c:	e04c      	b.n	8001518 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d002      	beq.n	800148c <HAL_SPI_Transmit+0x17e>
 8001486:	8afb      	ldrh	r3, [r7, #22]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d140      	bne.n	800150e <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	330c      	adds	r3, #12
 8001496:	7812      	ldrb	r2, [r2, #0]
 8001498:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	1c5a      	adds	r2, r3, #1
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	3b01      	subs	r3, #1
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80014b2:	e02c      	b.n	800150e <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d113      	bne.n	80014ea <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	330c      	adds	r3, #12
 80014cc:	7812      	ldrb	r2, [r2, #0]
 80014ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d4:	1c5a      	adds	r2, r3, #1
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80014de:	b29b      	uxth	r3, r3
 80014e0:	3b01      	subs	r3, #1
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	86da      	strh	r2, [r3, #54]	; 0x36
 80014e8:	e011      	b.n	800150e <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80014ea:	f7fe fe87 	bl	80001fc <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	683a      	ldr	r2, [r7, #0]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d803      	bhi.n	8001502 <HAL_SPI_Transmit+0x1f4>
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001500:	d102      	bne.n	8001508 <HAL_SPI_Transmit+0x1fa>
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d102      	bne.n	800150e <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800150c:	e026      	b.n	800155c <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001512:	b29b      	uxth	r3, r3
 8001514:	2b00      	cmp	r3, #0
 8001516:	d1cd      	bne.n	80014b4 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	6839      	ldr	r1, [r7, #0]
 800151c:	68f8      	ldr	r0, [r7, #12]
 800151e:	f000 f894 	bl	800164a <SPI_EndRxTxTransaction>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d002      	beq.n	800152e <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	2220      	movs	r2, #32
 800152c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d10a      	bne.n	800154c <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001536:	2300      	movs	r3, #0
 8001538:	613b      	str	r3, [r7, #16]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	613b      	str	r3, [r7, #16]
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	613b      	str	r3, [r7, #16]
 800154a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001550:	2b00      	cmp	r3, #0
 8001552:	d002      	beq.n	800155a <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	77fb      	strb	r3, [r7, #31]
 8001558:	e000      	b.n	800155c <HAL_SPI_Transmit+0x24e>
  }

error:
 800155a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	2201      	movs	r2, #1
 8001560:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	2200      	movs	r2, #0
 8001568:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800156c:	7ffb      	ldrb	r3, [r7, #31]
}
 800156e:	4618      	mov	r0, r3
 8001570:	3720      	adds	r7, #32
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b084      	sub	sp, #16
 800157a:	af00      	add	r7, sp, #0
 800157c:	60f8      	str	r0, [r7, #12]
 800157e:	60b9      	str	r1, [r7, #8]
 8001580:	603b      	str	r3, [r7, #0]
 8001582:	4613      	mov	r3, r2
 8001584:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001586:	e04c      	b.n	8001622 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800158e:	d048      	beq.n	8001622 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001590:	f7fe fe34 	bl	80001fc <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	683a      	ldr	r2, [r7, #0]
 800159c:	429a      	cmp	r2, r3
 800159e:	d902      	bls.n	80015a6 <SPI_WaitFlagStateUntilTimeout+0x30>
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d13d      	bne.n	8001622 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	685a      	ldr	r2, [r3, #4]
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80015b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80015be:	d111      	bne.n	80015e4 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80015c8:	d004      	beq.n	80015d4 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015d2:	d107      	bne.n	80015e4 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80015e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015ec:	d10f      	bne.n	800160e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800160c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2201      	movs	r2, #1
 8001612:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2200      	movs	r2, #0
 800161a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e00f      	b.n	8001642 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	689a      	ldr	r2, [r3, #8]
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	4013      	ands	r3, r2
 800162c:	68ba      	ldr	r2, [r7, #8]
 800162e:	429a      	cmp	r2, r3
 8001630:	bf0c      	ite	eq
 8001632:	2301      	moveq	r3, #1
 8001634:	2300      	movne	r3, #0
 8001636:	b2db      	uxtb	r3, r3
 8001638:	461a      	mov	r2, r3
 800163a:	79fb      	ldrb	r3, [r7, #7]
 800163c:	429a      	cmp	r2, r3
 800163e:	d1a3      	bne.n	8001588 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b086      	sub	sp, #24
 800164e:	af02      	add	r7, sp, #8
 8001650:	60f8      	str	r0, [r7, #12]
 8001652:	60b9      	str	r1, [r7, #8]
 8001654:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	9300      	str	r3, [sp, #0]
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	2200      	movs	r2, #0
 800165e:	2180      	movs	r1, #128	; 0x80
 8001660:	68f8      	ldr	r0, [r7, #12]
 8001662:	f7ff ff88 	bl	8001576 <SPI_WaitFlagStateUntilTimeout>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d007      	beq.n	800167c <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001670:	f043 0220 	orr.w	r2, r3, #32
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e000      	b.n	800167e <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b082      	sub	sp, #8
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d101      	bne.n	8001698 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e03f      	b.n	8001718 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d106      	bne.n	80016b2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2200      	movs	r2, #0
 80016a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f000 fe43 	bl	8002338 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2224      	movs	r2, #36	; 0x24
 80016b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	68da      	ldr	r2, [r3, #12]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80016c8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f000 f828 	bl	8001720 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	691a      	ldr	r2, [r3, #16]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80016de:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	695a      	ldr	r2, [r3, #20]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80016ee:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	68da      	ldr	r2, [r3, #12]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80016fe:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2200      	movs	r2, #0
 8001704:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2220      	movs	r2, #32
 800170a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2220      	movs	r2, #32
 8001712:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001716:	2300      	movs	r3, #0
}
 8001718:	4618      	mov	r0, r3
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	68da      	ldr	r2, [r3, #12]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	430a      	orrs	r2, r1
 800173c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	689a      	ldr	r2, [r3, #8]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	691b      	ldr	r3, [r3, #16]
 8001746:	431a      	orrs	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	695b      	ldr	r3, [r3, #20]
 800174c:	4313      	orrs	r3, r2
 800174e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800175a:	f023 030c 	bic.w	r3, r3, #12
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	6812      	ldr	r2, [r2, #0]
 8001762:	68f9      	ldr	r1, [r7, #12]
 8001764:	430b      	orrs	r3, r1
 8001766:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	695b      	ldr	r3, [r3, #20]
 800176e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	699a      	ldr	r2, [r3, #24]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	430a      	orrs	r2, r1
 800177c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a52      	ldr	r2, [pc, #328]	; (80018cc <UART_SetConfig+0x1ac>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d14e      	bne.n	8001826 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001788:	f7ff fd2e 	bl	80011e8 <HAL_RCC_GetPCLK2Freq>
 800178c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800178e:	68ba      	ldr	r2, [r7, #8]
 8001790:	4613      	mov	r3, r2
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	4413      	add	r3, r2
 8001796:	009a      	lsls	r2, r3, #2
 8001798:	441a      	add	r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a4:	4a4a      	ldr	r2, [pc, #296]	; (80018d0 <UART_SetConfig+0x1b0>)
 80017a6:	fba2 2303 	umull	r2, r3, r2, r3
 80017aa:	095b      	lsrs	r3, r3, #5
 80017ac:	0119      	lsls	r1, r3, #4
 80017ae:	68ba      	ldr	r2, [r7, #8]
 80017b0:	4613      	mov	r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	4413      	add	r3, r2
 80017b6:	009a      	lsls	r2, r3, #2
 80017b8:	441a      	add	r2, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80017c4:	4b42      	ldr	r3, [pc, #264]	; (80018d0 <UART_SetConfig+0x1b0>)
 80017c6:	fba3 0302 	umull	r0, r3, r3, r2
 80017ca:	095b      	lsrs	r3, r3, #5
 80017cc:	2064      	movs	r0, #100	; 0x64
 80017ce:	fb00 f303 	mul.w	r3, r0, r3
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	011b      	lsls	r3, r3, #4
 80017d6:	3332      	adds	r3, #50	; 0x32
 80017d8:	4a3d      	ldr	r2, [pc, #244]	; (80018d0 <UART_SetConfig+0x1b0>)
 80017da:	fba2 2303 	umull	r2, r3, r2, r3
 80017de:	095b      	lsrs	r3, r3, #5
 80017e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017e4:	4419      	add	r1, r3
 80017e6:	68ba      	ldr	r2, [r7, #8]
 80017e8:	4613      	mov	r3, r2
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	4413      	add	r3, r2
 80017ee:	009a      	lsls	r2, r3, #2
 80017f0:	441a      	add	r2, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80017fc:	4b34      	ldr	r3, [pc, #208]	; (80018d0 <UART_SetConfig+0x1b0>)
 80017fe:	fba3 0302 	umull	r0, r3, r3, r2
 8001802:	095b      	lsrs	r3, r3, #5
 8001804:	2064      	movs	r0, #100	; 0x64
 8001806:	fb00 f303 	mul.w	r3, r0, r3
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	011b      	lsls	r3, r3, #4
 800180e:	3332      	adds	r3, #50	; 0x32
 8001810:	4a2f      	ldr	r2, [pc, #188]	; (80018d0 <UART_SetConfig+0x1b0>)
 8001812:	fba2 2303 	umull	r2, r3, r2, r3
 8001816:	095b      	lsrs	r3, r3, #5
 8001818:	f003 020f 	and.w	r2, r3, #15
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	440a      	add	r2, r1
 8001822:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8001824:	e04d      	b.n	80018c2 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8001826:	f7ff fccb 	bl	80011c0 <HAL_RCC_GetPCLK1Freq>
 800182a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800182c:	68ba      	ldr	r2, [r7, #8]
 800182e:	4613      	mov	r3, r2
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	4413      	add	r3, r2
 8001834:	009a      	lsls	r2, r3, #2
 8001836:	441a      	add	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001842:	4a23      	ldr	r2, [pc, #140]	; (80018d0 <UART_SetConfig+0x1b0>)
 8001844:	fba2 2303 	umull	r2, r3, r2, r3
 8001848:	095b      	lsrs	r3, r3, #5
 800184a:	0119      	lsls	r1, r3, #4
 800184c:	68ba      	ldr	r2, [r7, #8]
 800184e:	4613      	mov	r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	4413      	add	r3, r2
 8001854:	009a      	lsls	r2, r3, #2
 8001856:	441a      	add	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001862:	4b1b      	ldr	r3, [pc, #108]	; (80018d0 <UART_SetConfig+0x1b0>)
 8001864:	fba3 0302 	umull	r0, r3, r3, r2
 8001868:	095b      	lsrs	r3, r3, #5
 800186a:	2064      	movs	r0, #100	; 0x64
 800186c:	fb00 f303 	mul.w	r3, r0, r3
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	011b      	lsls	r3, r3, #4
 8001874:	3332      	adds	r3, #50	; 0x32
 8001876:	4a16      	ldr	r2, [pc, #88]	; (80018d0 <UART_SetConfig+0x1b0>)
 8001878:	fba2 2303 	umull	r2, r3, r2, r3
 800187c:	095b      	lsrs	r3, r3, #5
 800187e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001882:	4419      	add	r1, r3
 8001884:	68ba      	ldr	r2, [r7, #8]
 8001886:	4613      	mov	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	4413      	add	r3, r2
 800188c:	009a      	lsls	r2, r3, #2
 800188e:	441a      	add	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	fbb2 f2f3 	udiv	r2, r2, r3
 800189a:	4b0d      	ldr	r3, [pc, #52]	; (80018d0 <UART_SetConfig+0x1b0>)
 800189c:	fba3 0302 	umull	r0, r3, r3, r2
 80018a0:	095b      	lsrs	r3, r3, #5
 80018a2:	2064      	movs	r0, #100	; 0x64
 80018a4:	fb00 f303 	mul.w	r3, r0, r3
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	011b      	lsls	r3, r3, #4
 80018ac:	3332      	adds	r3, #50	; 0x32
 80018ae:	4a08      	ldr	r2, [pc, #32]	; (80018d0 <UART_SetConfig+0x1b0>)
 80018b0:	fba2 2303 	umull	r2, r3, r2, r3
 80018b4:	095b      	lsrs	r3, r3, #5
 80018b6:	f003 020f 	and.w	r2, r3, #15
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	440a      	add	r2, r1
 80018c0:	609a      	str	r2, [r3, #8]
}
 80018c2:	bf00      	nop
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40013800 	.word	0x40013800
 80018d0:	51eb851f 	.word	0x51eb851f

080018d4 <LCD_Reset>:

//</editor-fold>

//<editor-fold desc="LCD initialization functions">

static void LCD_Reset(){
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
	//Toggles LCD Reset pin
	HAL_GPIO_WritePin(TFT_RST_GPIO_Port, TFT_RST_Pin, RESET); //Toggle Reset Pin
 80018d8:	2200      	movs	r2, #0
 80018da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018de:	4807      	ldr	r0, [pc, #28]	; (80018fc <LCD_Reset+0x28>)
 80018e0:	f7ff f880 	bl	80009e4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80018e4:	200a      	movs	r0, #10
 80018e6:	f7fe fc93 	bl	8000210 <HAL_Delay>
	HAL_GPIO_WritePin(TFT_RST_GPIO_Port, TFT_RST_Pin, SET);   //----------------
 80018ea:	2201      	movs	r2, #1
 80018ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018f0:	4802      	ldr	r0, [pc, #8]	; (80018fc <LCD_Reset+0x28>)
 80018f2:	f7ff f877 	bl	80009e4 <HAL_GPIO_WritePin>
}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40010800 	.word	0x40010800

08001900 <LCD_WriteChipSelect>:

static void LCD_WriteChipSelect(uint8_t State){
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	71fb      	strb	r3, [r7, #7]
	//Sets Chip Select for the LCD
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, State);
 800190a:	79fb      	ldrb	r3, [r7, #7]
 800190c:	461a      	mov	r2, r3
 800190e:	2104      	movs	r1, #4
 8001910:	4803      	ldr	r0, [pc, #12]	; (8001920 <LCD_WriteChipSelect+0x20>)
 8001912:	f7ff f867 	bl	80009e4 <HAL_GPIO_WritePin>
}
 8001916:	bf00      	nop
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40010800 	.word	0x40010800

08001924 <LCD_SetWriteMode>:

static void LCD_SetWriteMode(uint8_t State){
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	71fb      	strb	r3, [r7, #7]
	//Writes to D/C (data/command) LCD pin
	HAL_GPIO_WritePin(TFT_CD_GPIO_Port, TFT_CD_Pin, State);
 800192e:	79fb      	ldrb	r3, [r7, #7]
 8001930:	461a      	mov	r2, r3
 8001932:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001936:	4803      	ldr	r0, [pc, #12]	; (8001944 <LCD_SetWriteMode+0x20>)
 8001938:	f7ff f854 	bl	80009e4 <HAL_GPIO_WritePin>
}
 800193c:	bf00      	nop
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40010800 	.word	0x40010800

08001948 <LCD_PinsInit>:

static void LCD_PinsInit() {
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
	LCD_Reset();
 800194c:	f7ff ffc2 	bl	80018d4 <LCD_Reset>

	LCD_WriteChipSelect(SET); //Toggle Chip Select
 8001950:	2001      	movs	r0, #1
 8001952:	f7ff ffd5 	bl	8001900 <LCD_WriteChipSelect>
	LCD_WriteChipSelect(RESET);
 8001956:	2000      	movs	r0, #0
 8001958:	f7ff ffd2 	bl	8001900 <LCD_WriteChipSelect>
}
 800195c:	bf00      	nop
 800195e:	bd80      	pop	{r7, pc}

08001960 <SPI_WriteCmd>:

void SPI_Send(uint8_t * cmd){
	HAL_SPI_Transmit(&hspi1, &cmd, 1, 0xFFFFFFFFU);
}

void SPI_WriteCmd(uint8_t * cmd){
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
#ifndef USE_DMA
	LCD_SetWriteMode(RESET);
 8001968:	2000      	movs	r0, #0
 800196a:	f7ff ffdb 	bl	8001924 <LCD_SetWriteMode>
	HAL_SPI_Transmit(&hspi1, &cmd, 1, 0xFFFFFFFFU);
 800196e:	1d39      	adds	r1, r7, #4
 8001970:	f04f 33ff 	mov.w	r3, #4294967295
 8001974:	2201      	movs	r2, #1
 8001976:	4803      	ldr	r0, [pc, #12]	; (8001984 <SPI_WriteCmd+0x24>)
 8001978:	f7ff fcc9 	bl	800130e <HAL_SPI_Transmit>
#ifdef USE_DMA
	LCD_SetWriteMode(RESET);
	HAL_SPI_TransmitReceive_DMA(&hspi1, &cmd, &cmd, Size)
#endif

}
 800197c:	bf00      	nop
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	200000b0 	.word	0x200000b0

08001988 <SPI_WriteCmdData>:

void SPI_WriteCmdData(uint8_t * cmd){
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
	LCD_SetWriteMode(SET);
 8001990:	2001      	movs	r0, #1
 8001992:	f7ff ffc7 	bl	8001924 <LCD_SetWriteMode>
	HAL_SPI_Transmit(&hspi1, &cmd, 1, 0xFFFFFFFFU);
 8001996:	1d39      	adds	r1, r7, #4
 8001998:	f04f 33ff 	mov.w	r3, #4294967295
 800199c:	2201      	movs	r2, #1
 800199e:	4803      	ldr	r0, [pc, #12]	; (80019ac <SPI_WriteCmdData+0x24>)
 80019a0:	f7ff fcb5 	bl	800130e <HAL_SPI_Transmit>
}
 80019a4:	bf00      	nop
 80019a6:	3708      	adds	r7, #8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	200000b0 	.word	0x200000b0

080019b0 <LCD_Set_Address>:

void LCD_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 80019b0:	b590      	push	{r4, r7, lr}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4604      	mov	r4, r0
 80019b8:	4608      	mov	r0, r1
 80019ba:	4611      	mov	r1, r2
 80019bc:	461a      	mov	r2, r3
 80019be:	4623      	mov	r3, r4
 80019c0:	80fb      	strh	r3, [r7, #6]
 80019c2:	4603      	mov	r3, r0
 80019c4:	80bb      	strh	r3, [r7, #4]
 80019c6:	460b      	mov	r3, r1
 80019c8:	807b      	strh	r3, [r7, #2]
 80019ca:	4613      	mov	r3, r2
 80019cc:	803b      	strh	r3, [r7, #0]
	SPI_WriteCmd(0x2A);
 80019ce:	202a      	movs	r0, #42	; 0x2a
 80019d0:	f7ff ffc6 	bl	8001960 <SPI_WriteCmd>
	SPI_WriteCmdData(X1>>8);
 80019d4:	88fb      	ldrh	r3, [r7, #6]
 80019d6:	0a1b      	lsrs	r3, r3, #8
 80019d8:	b29b      	uxth	r3, r3
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff ffd4 	bl	8001988 <SPI_WriteCmdData>
	SPI_WriteCmdData(X1);
 80019e0:	88fb      	ldrh	r3, [r7, #6]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff ffd0 	bl	8001988 <SPI_WriteCmdData>
	SPI_WriteCmdData(X2>>8);
 80019e8:	887b      	ldrh	r3, [r7, #2]
 80019ea:	0a1b      	lsrs	r3, r3, #8
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff ffca 	bl	8001988 <SPI_WriteCmdData>
	SPI_WriteCmdData(X2);
 80019f4:	887b      	ldrh	r3, [r7, #2]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff ffc6 	bl	8001988 <SPI_WriteCmdData>

	SPI_WriteCmd(0x2B);
 80019fc:	202b      	movs	r0, #43	; 0x2b
 80019fe:	f7ff ffaf 	bl	8001960 <SPI_WriteCmd>
	SPI_WriteCmdData(Y1>>8);
 8001a02:	88bb      	ldrh	r3, [r7, #4]
 8001a04:	0a1b      	lsrs	r3, r3, #8
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff ffbd 	bl	8001988 <SPI_WriteCmdData>
	SPI_WriteCmdData(Y1);
 8001a0e:	88bb      	ldrh	r3, [r7, #4]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff ffb9 	bl	8001988 <SPI_WriteCmdData>
	SPI_WriteCmdData(Y2>>8);
 8001a16:	883b      	ldrh	r3, [r7, #0]
 8001a18:	0a1b      	lsrs	r3, r3, #8
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff ffb3 	bl	8001988 <SPI_WriteCmdData>
	SPI_WriteCmdData(Y2);
 8001a22:	883b      	ldrh	r3, [r7, #0]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff ffaf 	bl	8001988 <SPI_WriteCmdData>

	SPI_WriteCmd(0x2C);
 8001a2a:	202c      	movs	r0, #44	; 0x2c
 8001a2c:	f7ff ff98 	bl	8001960 <SPI_WriteCmd>
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd90      	pop	{r4, r7, pc}

08001a38 <LCD_Set_Rotation>:

void LCD_Set_Rotation(uint8_t Rotation)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	4603      	mov	r3, r0
 8001a40:	71fb      	strb	r3, [r7, #7]

uint8_t screen_rotation = Rotation;
 8001a42:	79fb      	ldrb	r3, [r7, #7]
 8001a44:	73fb      	strb	r3, [r7, #15]

	SPI_WriteCmd(0x36);
 8001a46:	2036      	movs	r0, #54	; 0x36
 8001a48:	f7ff ff8a 	bl	8001960 <SPI_WriteCmd>
	HAL_Delay(1);
 8001a4c:	2001      	movs	r0, #1
 8001a4e:	f7fe fbdf 	bl	8000210 <HAL_Delay>

	switch(screen_rotation)
 8001a52:	7bfb      	ldrb	r3, [r7, #15]
 8001a54:	2b03      	cmp	r3, #3
 8001a56:	d837      	bhi.n	8001ac8 <LCD_Set_Rotation+0x90>
 8001a58:	a201      	add	r2, pc, #4	; (adr r2, 8001a60 <LCD_Set_Rotation+0x28>)
 8001a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a5e:	bf00      	nop
 8001a60:	08001a71 	.word	0x08001a71
 8001a64:	08001a87 	.word	0x08001a87
 8001a68:	08001a9d 	.word	0x08001a9d
 8001a6c:	08001ab3 	.word	0x08001ab3
		{
			case SCREEN_VERTICAL_1:
				SPI_WriteCmdData(0x40|0x08);
 8001a70:	2048      	movs	r0, #72	; 0x48
 8001a72:	f7ff ff89 	bl	8001988 <SPI_WriteCmdData>
				LCD_WIDTH = 240;
 8001a76:	4b17      	ldr	r3, [pc, #92]	; (8001ad4 <LCD_Set_Rotation+0x9c>)
 8001a78:	22f0      	movs	r2, #240	; 0xf0
 8001a7a:	801a      	strh	r2, [r3, #0]
				LCD_HEIGHT = 320;
 8001a7c:	4b16      	ldr	r3, [pc, #88]	; (8001ad8 <LCD_Set_Rotation+0xa0>)
 8001a7e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001a82:	801a      	strh	r2, [r3, #0]
				break;
 8001a84:	e021      	b.n	8001aca <LCD_Set_Rotation+0x92>
			case SCREEN_HORIZONTAL_1:
				SPI_WriteCmdData(0x20|0x08);
 8001a86:	2028      	movs	r0, #40	; 0x28
 8001a88:	f7ff ff7e 	bl	8001988 <SPI_WriteCmdData>
				LCD_WIDTH  = 320;
 8001a8c:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <LCD_Set_Rotation+0x9c>)
 8001a8e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001a92:	801a      	strh	r2, [r3, #0]
				LCD_HEIGHT = 240;
 8001a94:	4b10      	ldr	r3, [pc, #64]	; (8001ad8 <LCD_Set_Rotation+0xa0>)
 8001a96:	22f0      	movs	r2, #240	; 0xf0
 8001a98:	801a      	strh	r2, [r3, #0]
				break;
 8001a9a:	e016      	b.n	8001aca <LCD_Set_Rotation+0x92>
			case SCREEN_VERTICAL_2:
				SPI_WriteCmdData(0x80|0x08);
 8001a9c:	2088      	movs	r0, #136	; 0x88
 8001a9e:	f7ff ff73 	bl	8001988 <SPI_WriteCmdData>
				LCD_WIDTH  = 240;
 8001aa2:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <LCD_Set_Rotation+0x9c>)
 8001aa4:	22f0      	movs	r2, #240	; 0xf0
 8001aa6:	801a      	strh	r2, [r3, #0]
				LCD_HEIGHT = 320;
 8001aa8:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <LCD_Set_Rotation+0xa0>)
 8001aaa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001aae:	801a      	strh	r2, [r3, #0]
				break;
 8001ab0:	e00b      	b.n	8001aca <LCD_Set_Rotation+0x92>
			case SCREEN_HORIZONTAL_2:
				SPI_WriteCmdData(0x40|0x80|0x20|0x08);
 8001ab2:	20e8      	movs	r0, #232	; 0xe8
 8001ab4:	f7ff ff68 	bl	8001988 <SPI_WriteCmdData>
				LCD_WIDTH  = 320;
 8001ab8:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <LCD_Set_Rotation+0x9c>)
 8001aba:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001abe:	801a      	strh	r2, [r3, #0]
				LCD_HEIGHT = 240;
 8001ac0:	4b05      	ldr	r3, [pc, #20]	; (8001ad8 <LCD_Set_Rotation+0xa0>)
 8001ac2:	22f0      	movs	r2, #240	; 0xf0
 8001ac4:	801a      	strh	r2, [r3, #0]
				break;
 8001ac6:	e000      	b.n	8001aca <LCD_Set_Rotation+0x92>
			default:
				//EXIT IF SCREEN ROTATION NOT VALID!
				break;
 8001ac8:	bf00      	nop
		}
}
 8001aca:	bf00      	nop
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20000008 	.word	0x20000008
 8001ad8:	20000006 	.word	0x20000006

08001adc <LCD_init>:


void LCD_init() {
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
    LCD_PinsInit();
 8001ae0:	f7ff ff32 	bl	8001948 <LCD_PinsInit>
    LCD_Reset();
 8001ae4:	f7ff fef6 	bl	80018d4 <LCD_Reset>
    LCD_configure();
 8001ae8:	f000 f802 	bl	8001af0 <LCD_configure>
}
 8001aec:	bf00      	nop
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <LCD_configure>:

void LCD_configure() {
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0

	//SOFTWARE RESET
	SPI_WriteCmd(0x01);
 8001af4:	2001      	movs	r0, #1
 8001af6:	f7ff ff33 	bl	8001960 <SPI_WriteCmd>
	HAL_Delay(1000);
 8001afa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001afe:	f7fe fb87 	bl	8000210 <HAL_Delay>

	//POWER CONTROL A
	SPI_WriteCmd(0xCB);
 8001b02:	20cb      	movs	r0, #203	; 0xcb
 8001b04:	f7ff ff2c 	bl	8001960 <SPI_WriteCmd>
	SPI_WriteCmdData(0x39);
 8001b08:	2039      	movs	r0, #57	; 0x39
 8001b0a:	f7ff ff3d 	bl	8001988 <SPI_WriteCmdData>
	SPI_WriteCmdData(0x2C);
 8001b0e:	202c      	movs	r0, #44	; 0x2c
 8001b10:	f7ff ff3a 	bl	8001988 <SPI_WriteCmdData>
	SPI_WriteCmdData(0x00);
 8001b14:	2000      	movs	r0, #0
 8001b16:	f7ff ff37 	bl	8001988 <SPI_WriteCmdData>
	SPI_WriteCmdData(0x34);
 8001b1a:	2034      	movs	r0, #52	; 0x34
 8001b1c:	f7ff ff34 	bl	8001988 <SPI_WriteCmdData>
	SPI_WriteCmdData(0x02);
 8001b20:	2002      	movs	r0, #2
 8001b22:	f7ff ff31 	bl	8001988 <SPI_WriteCmdData>

	//POWER CONTROL B
	SPI_WriteCmd(0xCF);
 8001b26:	20cf      	movs	r0, #207	; 0xcf
 8001b28:	f7ff ff1a 	bl	8001960 <SPI_WriteCmd>
	SPI_WriteCmdData(0x00);
 8001b2c:	2000      	movs	r0, #0
 8001b2e:	f7ff ff2b 	bl	8001988 <SPI_WriteCmdData>
	SPI_WriteCmdData(0xC1);
 8001b32:	20c1      	movs	r0, #193	; 0xc1
 8001b34:	f7ff ff28 	bl	8001988 <SPI_WriteCmdData>
	SPI_WriteCmdData(0x30);
 8001b38:	2030      	movs	r0, #48	; 0x30
 8001b3a:	f7ff ff25 	bl	8001988 <SPI_WriteCmdData>

	//DRIVER TIMING CONTROL A
	SPI_WriteCmd(0xE8);
 8001b3e:	20e8      	movs	r0, #232	; 0xe8
 8001b40:	f7ff ff0e 	bl	8001960 <SPI_WriteCmd>
	SPI_WriteCmdData(0x85);
 8001b44:	2085      	movs	r0, #133	; 0x85
 8001b46:	f7ff ff1f 	bl	8001988 <SPI_WriteCmdData>
	SPI_WriteCmdData(0x00);
 8001b4a:	2000      	movs	r0, #0
 8001b4c:	f7ff ff1c 	bl	8001988 <SPI_WriteCmdData>
	SPI_WriteCmdData(0x78);
 8001b50:	2078      	movs	r0, #120	; 0x78
 8001b52:	f7ff ff19 	bl	8001988 <SPI_WriteCmdData>

	//DRIVER TIMING CONTROL B
	SPI_WriteCmd(0xEA);
 8001b56:	20ea      	movs	r0, #234	; 0xea
 8001b58:	f7ff ff02 	bl	8001960 <SPI_WriteCmd>
	SPI_WriteCmdData(0x00);
 8001b5c:	2000      	movs	r0, #0
 8001b5e:	f7ff ff13 	bl	8001988 <SPI_WriteCmdData>
	SPI_WriteCmdData(0x00);
 8001b62:	2000      	movs	r0, #0
 8001b64:	f7ff ff10 	bl	8001988 <SPI_WriteCmdData>

	//POWER ON SEQUENCE CONTROL
	SPI_WriteCmd(0xED);
 8001b68:	20ed      	movs	r0, #237	; 0xed
 8001b6a:	f7ff fef9 	bl	8001960 <SPI_WriteCmd>
	SPI_WriteCmdData(0x64);
 8001b6e:	2064      	movs	r0, #100	; 0x64
 8001b70:	f7ff ff0a 	bl	8001988 <SPI_WriteCmdData>
	SPI_WriteCmdData(0x03);
 8001b74:	2003      	movs	r0, #3
 8001b76:	f7ff ff07 	bl	8001988 <SPI_WriteCmdData>
	SPI_WriteCmdData(0x12);
 8001b7a:	2012      	movs	r0, #18
 8001b7c:	f7ff ff04 	bl	8001988 <SPI_WriteCmdData>
	SPI_WriteCmdData(0x81);
 8001b80:	2081      	movs	r0, #129	; 0x81
 8001b82:	f7ff ff01 	bl	8001988 <SPI_WriteCmdData>

	//PUMP RATIO CONTROL
	SPI_WriteCmd(0xF7);
 8001b86:	20f7      	movs	r0, #247	; 0xf7
 8001b88:	f7ff feea 	bl	8001960 <SPI_WriteCmd>
	SPI_WriteCmdData(0x20);
 8001b8c:	2020      	movs	r0, #32
 8001b8e:	f7ff fefb 	bl	8001988 <SPI_WriteCmdData>

	//POWER CONTROL,VRH[5:0]
	SPI_WriteCmd(0xC0);
 8001b92:	20c0      	movs	r0, #192	; 0xc0
 8001b94:	f7ff fee4 	bl	8001960 <SPI_WriteCmd>
	SPI_WriteCmdData(0x23);
 8001b98:	2023      	movs	r0, #35	; 0x23
 8001b9a:	f7ff fef5 	bl	8001988 <SPI_WriteCmdData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	SPI_WriteCmd(0xC1);
 8001b9e:	20c1      	movs	r0, #193	; 0xc1
 8001ba0:	f7ff fede 	bl	8001960 <SPI_WriteCmd>
	SPI_WriteCmdData(0x10);
 8001ba4:	2010      	movs	r0, #16
 8001ba6:	f7ff feef 	bl	8001988 <SPI_WriteCmdData>

	//VCM CONTROL
	SPI_WriteCmd(0xC5);
 8001baa:	20c5      	movs	r0, #197	; 0xc5
 8001bac:	f7ff fed8 	bl	8001960 <SPI_WriteCmd>
	SPI_WriteCmdData(0x3E);
 8001bb0:	203e      	movs	r0, #62	; 0x3e
 8001bb2:	f7ff fee9 	bl	8001988 <SPI_WriteCmdData>
	SPI_WriteCmdData(0x28);
 8001bb6:	2028      	movs	r0, #40	; 0x28
 8001bb8:	f7ff fee6 	bl	8001988 <SPI_WriteCmdData>

	//VCM CONTROL 2
	SPI_WriteCmd(0xC7);
 8001bbc:	20c7      	movs	r0, #199	; 0xc7
 8001bbe:	f7ff fecf 	bl	8001960 <SPI_WriteCmd>
	SPI_WriteCmdData(0x86);
 8001bc2:	2086      	movs	r0, #134	; 0x86
 8001bc4:	f7ff fee0 	bl	8001988 <SPI_WriteCmdData>

	//MEMORY ACCESS CONTROL
	SPI_WriteCmd(0x36);
 8001bc8:	2036      	movs	r0, #54	; 0x36
 8001bca:	f7ff fec9 	bl	8001960 <SPI_WriteCmd>
	SPI_WriteCmdData(0x48);
 8001bce:	2048      	movs	r0, #72	; 0x48
 8001bd0:	f7ff feda 	bl	8001988 <SPI_WriteCmdData>

	//PIXEL FORMAT
	SPI_WriteCmd(0x3A);
 8001bd4:	203a      	movs	r0, #58	; 0x3a
 8001bd6:	f7ff fec3 	bl	8001960 <SPI_WriteCmd>
	SPI_WriteCmdData(0x55);
 8001bda:	2055      	movs	r0, #85	; 0x55
 8001bdc:	f7ff fed4 	bl	8001988 <SPI_WriteCmdData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	SPI_WriteCmd(0xB1);
 8001be0:	20b1      	movs	r0, #177	; 0xb1
 8001be2:	f7ff febd 	bl	8001960 <SPI_WriteCmd>
	SPI_WriteCmdData(0x00);
 8001be6:	2000      	movs	r0, #0
 8001be8:	f7ff fece 	bl	8001988 <SPI_WriteCmdData>
	SPI_WriteCmdData(0x18);
 8001bec:	2018      	movs	r0, #24
 8001bee:	f7ff fecb 	bl	8001988 <SPI_WriteCmdData>

	//DISPLAY FUNCTION CONTROL
	SPI_WriteCmd(0xB6);
 8001bf2:	20b6      	movs	r0, #182	; 0xb6
 8001bf4:	f7ff feb4 	bl	8001960 <SPI_WriteCmd>
	SPI_WriteCmdData(0x08);
 8001bf8:	2008      	movs	r0, #8
 8001bfa:	f7ff fec5 	bl	8001988 <SPI_WriteCmdData>
	SPI_WriteCmdData(0x82);
 8001bfe:	2082      	movs	r0, #130	; 0x82
 8001c00:	f7ff fec2 	bl	8001988 <SPI_WriteCmdData>
	SPI_WriteCmdData(0x27);
 8001c04:	2027      	movs	r0, #39	; 0x27
 8001c06:	f7ff febf 	bl	8001988 <SPI_WriteCmdData>

	//3GAMMA FUNCTION DISABLE
	SPI_WriteCmd(0xF2);
 8001c0a:	20f2      	movs	r0, #242	; 0xf2
 8001c0c:	f7ff fea8 	bl	8001960 <SPI_WriteCmd>
	SPI_WriteCmdData(0x00);
 8001c10:	2000      	movs	r0, #0
 8001c12:	f7ff feb9 	bl	8001988 <SPI_WriteCmdData>

	//GAMMA CURVE SELECTED
	SPI_WriteCmd(0x26);
 8001c16:	2026      	movs	r0, #38	; 0x26
 8001c18:	f7ff fea2 	bl	8001960 <SPI_WriteCmd>
	SPI_WriteCmdData(0x01);
 8001c1c:	2001      	movs	r0, #1
 8001c1e:	f7ff feb3 	bl	8001988 <SPI_WriteCmdData>

	//POSITIVE GAMMA CORRECTION
	SPI_WriteCmd(0xE0);
 8001c22:	20e0      	movs	r0, #224	; 0xe0
 8001c24:	f7ff fe9c 	bl	8001960 <SPI_WriteCmd>
	SPI_WriteCmdData(0x0F);
 8001c28:	200f      	movs	r0, #15
 8001c2a:	f7ff fead 	bl	8001988 <SPI_WriteCmdData>
	SPI_WriteCmdData(0x31);
 8001c2e:	2031      	movs	r0, #49	; 0x31
 8001c30:	f7ff feaa 	bl	8001988 <SPI_WriteCmdData>
	SPI_WriteCmdData(0x2B);
 8001c34:	202b      	movs	r0, #43	; 0x2b
 8001c36:	f7ff fea7 	bl	8001988 <SPI_WriteCmdData>
	SPI_WriteCmdData(0x0C);
 8001c3a:	200c      	movs	r0, #12
 8001c3c:	f7ff fea4 	bl	8001988 <SPI_WriteCmdData>
	SPI_WriteCmdData(0x0E);
 8001c40:	200e      	movs	r0, #14
 8001c42:	f7ff fea1 	bl	8001988 <SPI_WriteCmdData>
	SPI_WriteCmdData(0x08);
 8001c46:	2008      	movs	r0, #8
 8001c48:	f7ff fe9e 	bl	8001988 <SPI_WriteCmdData>
	SPI_WriteCmdData(0x4E);
 8001c4c:	204e      	movs	r0, #78	; 0x4e
 8001c4e:	f7ff fe9b 	bl	8001988 <SPI_WriteCmdData>
	SPI_WriteCmdData(0xF1);
 8001c52:	20f1      	movs	r0, #241	; 0xf1
 8001c54:	f7ff fe98 	bl	8001988 <SPI_WriteCmdData>
	SPI_WriteCmdData(0x37);
 8001c58:	2037      	movs	r0, #55	; 0x37
 8001c5a:	f7ff fe95 	bl	8001988 <SPI_WriteCmdData>
	SPI_WriteCmdData(0x07);
 8001c5e:	2007      	movs	r0, #7
 8001c60:	f7ff fe92 	bl	8001988 <SPI_WriteCmdData>
	SPI_WriteCmdData(0x10);
 8001c64:	2010      	movs	r0, #16
 8001c66:	f7ff fe8f 	bl	8001988 <SPI_WriteCmdData>
	SPI_WriteCmdData(0x03);
 8001c6a:	2003      	movs	r0, #3
 8001c6c:	f7ff fe8c 	bl	8001988 <SPI_WriteCmdData>
	SPI_WriteCmdData(0x0E);
 8001c70:	200e      	movs	r0, #14
 8001c72:	f7ff fe89 	bl	8001988 <SPI_WriteCmdData>
	SPI_WriteCmdData(0x09);
 8001c76:	2009      	movs	r0, #9
 8001c78:	f7ff fe86 	bl	8001988 <SPI_WriteCmdData>
	SPI_WriteCmdData(0x00);
 8001c7c:	2000      	movs	r0, #0
 8001c7e:	f7ff fe83 	bl	8001988 <SPI_WriteCmdData>

	//NEGATIVE GAMMA CORRECTION
	SPI_WriteCmd(0xE1);
 8001c82:	20e1      	movs	r0, #225	; 0xe1
 8001c84:	f7ff fe6c 	bl	8001960 <SPI_WriteCmd>
	SPI_WriteCmdData(0x00);
 8001c88:	2000      	movs	r0, #0
 8001c8a:	f7ff fe7d 	bl	8001988 <SPI_WriteCmdData>
	SPI_WriteCmdData(0x0E);
 8001c8e:	200e      	movs	r0, #14
 8001c90:	f7ff fe7a 	bl	8001988 <SPI_WriteCmdData>
	SPI_WriteCmdData(0x14);
 8001c94:	2014      	movs	r0, #20
 8001c96:	f7ff fe77 	bl	8001988 <SPI_WriteCmdData>
	SPI_WriteCmdData(0x03);
 8001c9a:	2003      	movs	r0, #3
 8001c9c:	f7ff fe74 	bl	8001988 <SPI_WriteCmdData>
	SPI_WriteCmdData(0x11);
 8001ca0:	2011      	movs	r0, #17
 8001ca2:	f7ff fe71 	bl	8001988 <SPI_WriteCmdData>
	SPI_WriteCmdData(0x07);
 8001ca6:	2007      	movs	r0, #7
 8001ca8:	f7ff fe6e 	bl	8001988 <SPI_WriteCmdData>
	SPI_WriteCmdData(0x31);
 8001cac:	2031      	movs	r0, #49	; 0x31
 8001cae:	f7ff fe6b 	bl	8001988 <SPI_WriteCmdData>
	SPI_WriteCmdData(0xC1);
 8001cb2:	20c1      	movs	r0, #193	; 0xc1
 8001cb4:	f7ff fe68 	bl	8001988 <SPI_WriteCmdData>
	SPI_WriteCmdData(0x48);
 8001cb8:	2048      	movs	r0, #72	; 0x48
 8001cba:	f7ff fe65 	bl	8001988 <SPI_WriteCmdData>
	SPI_WriteCmdData(0x08);
 8001cbe:	2008      	movs	r0, #8
 8001cc0:	f7ff fe62 	bl	8001988 <SPI_WriteCmdData>
	SPI_WriteCmdData(0x0F);
 8001cc4:	200f      	movs	r0, #15
 8001cc6:	f7ff fe5f 	bl	8001988 <SPI_WriteCmdData>
	SPI_WriteCmdData(0x0C);
 8001cca:	200c      	movs	r0, #12
 8001ccc:	f7ff fe5c 	bl	8001988 <SPI_WriteCmdData>
	SPI_WriteCmdData(0x31);
 8001cd0:	2031      	movs	r0, #49	; 0x31
 8001cd2:	f7ff fe59 	bl	8001988 <SPI_WriteCmdData>
	SPI_WriteCmdData(0x36);
 8001cd6:	2036      	movs	r0, #54	; 0x36
 8001cd8:	f7ff fe56 	bl	8001988 <SPI_WriteCmdData>
	SPI_WriteCmdData(0x0F);
 8001cdc:	200f      	movs	r0, #15
 8001cde:	f7ff fe53 	bl	8001988 <SPI_WriteCmdData>

	//EXIT SLEEP
	SPI_WriteCmd(0x11);
 8001ce2:	2011      	movs	r0, #17
 8001ce4:	f7ff fe3c 	bl	8001960 <SPI_WriteCmd>
	HAL_Delay(120);
 8001ce8:	2078      	movs	r0, #120	; 0x78
 8001cea:	f7fe fa91 	bl	8000210 <HAL_Delay>

	//TURN ON DISPLAY
	SPI_WriteCmd(0x29);
 8001cee:	2029      	movs	r0, #41	; 0x29
 8001cf0:	f7ff fe36 	bl	8001960 <SPI_WriteCmd>

	//STARTING ROTATION
	LCD_Set_Rotation(SCREEN_VERTICAL_1);
 8001cf4:	2000      	movs	r0, #0
 8001cf6:	f7ff fe9f 	bl	8001a38 <LCD_Set_Rotation>
	//LCD_Set_Rotation(SCREEN_VERTICAL_2);
	//LCD_Set_Rotation(SCREEN_HORIZONTAL_1);

}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}
	...

08001d00 <LCD_Draw_Colour_Burst>:
	LCD_SetWriteMode(SET);
	HAL_SPI_Transmit(&hspi1, TempBuffer, 2, 1);
}

void LCD_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
	{
 8001d00:	b5b0      	push	{r4, r5, r7, lr}
 8001d02:	b08c      	sub	sp, #48	; 0x30
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	6039      	str	r1, [r7, #0]
 8001d0a:	80fb      	strh	r3, [r7, #6]
 8001d0c:	466b      	mov	r3, sp
 8001d0e:	461d      	mov	r5, r3
	//SENDS COLOUR
	uint32_t Buffer_Size = 0;
 8001d10:	2300      	movs	r3, #0
 8001d12:	627b      	str	r3, [r7, #36]	; 0x24
	if((Size<<1) < BURST_MAX_SIZE)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	f241 3287 	movw	r2, #4999	; 0x1387
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d802      	bhi.n	8001d26 <LCD_Draw_Colour_Burst+0x26>
	{
		Buffer_Size = Size;
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	627b      	str	r3, [r7, #36]	; 0x24
 8001d24:	e002      	b.n	8001d2c <LCD_Draw_Colour_Burst+0x2c>
	}
	else
	{
		Buffer_Size = BURST_MAX_SIZE;
 8001d26:	f241 3388 	movw	r3, #5000	; 0x1388
 8001d2a:	627b      	str	r3, [r7, #36]	; 0x24
	}

	LCD_SetWriteMode(SET);
 8001d2c:	2001      	movs	r0, #1
 8001d2e:	f7ff fdf9 	bl	8001924 <LCD_SetWriteMode>

	unsigned char chifted = 	Colour>>8;;
 8001d32:	88fb      	ldrh	r3, [r7, #6]
 8001d34:	0a1b      	lsrs	r3, r3, #8
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	unsigned char burst_buffer[Buffer_Size];
 8001d3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001d3e:	4603      	mov	r3, r0
 8001d40:	3b01      	subs	r3, #1
 8001d42:	61fb      	str	r3, [r7, #28]
 8001d44:	4601      	mov	r1, r0
 8001d46:	f04f 0200 	mov.w	r2, #0
 8001d4a:	f04f 0300 	mov.w	r3, #0
 8001d4e:	f04f 0400 	mov.w	r4, #0
 8001d52:	00d4      	lsls	r4, r2, #3
 8001d54:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001d58:	00cb      	lsls	r3, r1, #3
 8001d5a:	4601      	mov	r1, r0
 8001d5c:	f04f 0200 	mov.w	r2, #0
 8001d60:	f04f 0300 	mov.w	r3, #0
 8001d64:	f04f 0400 	mov.w	r4, #0
 8001d68:	00d4      	lsls	r4, r2, #3
 8001d6a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001d6e:	00cb      	lsls	r3, r1, #3
 8001d70:	1dc3      	adds	r3, r0, #7
 8001d72:	08db      	lsrs	r3, r3, #3
 8001d74:	00db      	lsls	r3, r3, #3
 8001d76:	ebad 0d03 	sub.w	sp, sp, r3
 8001d7a:	466b      	mov	r3, sp
 8001d7c:	3300      	adds	r3, #0
 8001d7e:	61bb      	str	r3, [r7, #24]
	for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8001d80:	2300      	movs	r3, #0
 8001d82:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d84:	e00e      	b.n	8001da4 <LCD_Draw_Colour_Burst+0xa4>
		{
			burst_buffer[j] = 	chifted;
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d8a:	4413      	add	r3, r2
 8001d8c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001d90:	701a      	strb	r2, [r3, #0]
			burst_buffer[j+1] = Colour;
 8001d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d94:	3301      	adds	r3, #1
 8001d96:	88fa      	ldrh	r2, [r7, #6]
 8001d98:	b2d1      	uxtb	r1, r2
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8001d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001da0:	3302      	adds	r3, #2
 8001da2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001da4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d3ec      	bcc.n	8001d86 <LCD_Draw_Colour_Burst+0x86>
		}

	uint32_t Sending_Size = Size<<1;
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	617b      	str	r3, [r7, #20]
	uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8001db2:	697a      	ldr	r2, [r7, #20]
 8001db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dba:	613b      	str	r3, [r7, #16]
	uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dc0:	fbb3 f2f2 	udiv	r2, r3, r2
 8001dc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001dc6:	fb01 f202 	mul.w	r2, r1, r2
 8001dca:	1a9b      	subs	r3, r3, r2
 8001dcc:	60fb      	str	r3, [r7, #12]

	if(Sending_in_Block != 0)
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d010      	beq.n	8001df6 <LCD_Draw_Colour_Burst+0xf6>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dd8:	e009      	b.n	8001dee <LCD_Draw_Colour_Burst+0xee>
			{
			HAL_SPI_Transmit(&hspi1, burst_buffer, Buffer_Size, 10);
 8001dda:	69b9      	ldr	r1, [r7, #24]
 8001ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	230a      	movs	r3, #10
 8001de2:	480b      	ldr	r0, [pc, #44]	; (8001e10 <LCD_Draw_Colour_Burst+0x110>)
 8001de4:	f7ff fa93 	bl	800130e <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8001de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dea:	3301      	adds	r3, #1
 8001dec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d3f1      	bcc.n	8001dda <LCD_Draw_Colour_Burst+0xda>
			}
	}

	//REMAINDER!
	HAL_SPI_Transmit(&hspi1, (unsigned char *)burst_buffer, Remainder_from_block, 10);
 8001df6:	69b9      	ldr	r1, [r7, #24]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	230a      	movs	r3, #10
 8001dfe:	4804      	ldr	r0, [pc, #16]	; (8001e10 <LCD_Draw_Colour_Burst+0x110>)
 8001e00:	f7ff fa85 	bl	800130e <HAL_SPI_Transmit>
 8001e04:	46ad      	mov	sp, r5

}
 8001e06:	bf00      	nop
 8001e08:	3730      	adds	r7, #48	; 0x30
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bdb0      	pop	{r4, r5, r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	200000b0 	.word	0x200000b0

08001e14 <LCD_Fill_Screen>:


}

void LCD_Fill_Screen(uint16_t Colour)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	80fb      	strh	r3, [r7, #6]
	LCD_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);
 8001e1e:	4b0e      	ldr	r3, [pc, #56]	; (8001e58 <LCD_Fill_Screen+0x44>)
 8001e20:	881b      	ldrh	r3, [r3, #0]
 8001e22:	b29a      	uxth	r2, r3
 8001e24:	4b0d      	ldr	r3, [pc, #52]	; (8001e5c <LCD_Fill_Screen+0x48>)
 8001e26:	881b      	ldrh	r3, [r3, #0]
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	2000      	movs	r0, #0
 8001e2e:	f7ff fdbf 	bl	80019b0 <LCD_Set_Address>
	LCD_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);
 8001e32:	4b09      	ldr	r3, [pc, #36]	; (8001e58 <LCD_Fill_Screen+0x44>)
 8001e34:	881b      	ldrh	r3, [r3, #0]
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	461a      	mov	r2, r3
 8001e3a:	4b08      	ldr	r3, [pc, #32]	; (8001e5c <LCD_Fill_Screen+0x48>)
 8001e3c:	881b      	ldrh	r3, [r3, #0]
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	fb03 f302 	mul.w	r3, r3, r2
 8001e44:	461a      	mov	r2, r3
 8001e46:	88fb      	ldrh	r3, [r7, #6]
 8001e48:	4611      	mov	r1, r2
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff ff58 	bl	8001d00 <LCD_Draw_Colour_Burst>
}
 8001e50:	bf00      	nop
 8001e52:	3708      	adds	r7, #8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	20000008 	.word	0x20000008
 8001e5c:	20000006 	.word	0x20000006

08001e60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e64:	f7fe f972 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e68:	f000 f814 	bl	8001e94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e6c:	f000 f90c 	bl	8002088 <MX_GPIO_Init>
  MX_DMA_Init();
 8001e70:	f000 f8ec 	bl	800204c <MX_DMA_Init>
  MX_SPI1_Init();
 8001e74:	f000 f854 	bl	8001f20 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001e78:	f000 f888 	bl	8001f8c <MX_SPI2_Init>
  MX_USART3_UART_Init();
 8001e7c:	f000 f8bc 	bl	8001ff8 <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  LCD_init();
 8001e80:	f7ff fe2c 	bl	8001adc <LCD_init>
  LCD_Fill_Screen(0xFFFF);
 8001e84:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001e88:	f7ff ffc4 	bl	8001e14 <LCD_Fill_Screen>
  HAL_Delay(250);
 8001e8c:	20fa      	movs	r0, #250	; 0xfa
 8001e8e:	f7fe f9bf 	bl	8000210 <HAL_Delay>
  while (1)
 8001e92:	e7fe      	b.n	8001e92 <main+0x32>

08001e94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b090      	sub	sp, #64	; 0x40
 8001e98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e9a:	f107 0318 	add.w	r3, r7, #24
 8001e9e:	2228      	movs	r2, #40	; 0x28
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f000 fb46 	bl	8002534 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ea8:	1d3b      	adds	r3, r7, #4
 8001eaa:	2200      	movs	r2, #0
 8001eac:	601a      	str	r2, [r3, #0]
 8001eae:	605a      	str	r2, [r3, #4]
 8001eb0:	609a      	str	r2, [r3, #8]
 8001eb2:	60da      	str	r2, [r3, #12]
 8001eb4:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001eba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ebe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ec8:	2302      	movs	r3, #2
 8001eca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ecc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ed0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001ed2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ed8:	f107 0318 	add.w	r3, r7, #24
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7fe fd99 	bl	8000a14 <HAL_RCC_OscConfig>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001ee8:	f000 f93c 	bl	8002164 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001eec:	230f      	movs	r3, #15
 8001eee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ef8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001efc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001efe:	2300      	movs	r3, #0
 8001f00:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f02:	1d3b      	adds	r3, r7, #4
 8001f04:	2102      	movs	r1, #2
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7ff f804 	bl	8000f14 <HAL_RCC_ClockConfig>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001f12:	f000 f927 	bl	8002164 <Error_Handler>
  }
}
 8001f16:	bf00      	nop
 8001f18:	3740      	adds	r7, #64	; 0x40
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
	...

08001f20 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001f24:	4b17      	ldr	r3, [pc, #92]	; (8001f84 <MX_SPI1_Init+0x64>)
 8001f26:	4a18      	ldr	r2, [pc, #96]	; (8001f88 <MX_SPI1_Init+0x68>)
 8001f28:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f2a:	4b16      	ldr	r3, [pc, #88]	; (8001f84 <MX_SPI1_Init+0x64>)
 8001f2c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f30:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f32:	4b14      	ldr	r3, [pc, #80]	; (8001f84 <MX_SPI1_Init+0x64>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f38:	4b12      	ldr	r3, [pc, #72]	; (8001f84 <MX_SPI1_Init+0x64>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f3e:	4b11      	ldr	r3, [pc, #68]	; (8001f84 <MX_SPI1_Init+0x64>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f44:	4b0f      	ldr	r3, [pc, #60]	; (8001f84 <MX_SPI1_Init+0x64>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f4a:	4b0e      	ldr	r3, [pc, #56]	; (8001f84 <MX_SPI1_Init+0x64>)
 8001f4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f50:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001f52:	4b0c      	ldr	r3, [pc, #48]	; (8001f84 <MX_SPI1_Init+0x64>)
 8001f54:	2208      	movs	r2, #8
 8001f56:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f58:	4b0a      	ldr	r3, [pc, #40]	; (8001f84 <MX_SPI1_Init+0x64>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f5e:	4b09      	ldr	r3, [pc, #36]	; (8001f84 <MX_SPI1_Init+0x64>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f64:	4b07      	ldr	r3, [pc, #28]	; (8001f84 <MX_SPI1_Init+0x64>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001f6a:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <MX_SPI1_Init+0x64>)
 8001f6c:	220a      	movs	r2, #10
 8001f6e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f70:	4804      	ldr	r0, [pc, #16]	; (8001f84 <MX_SPI1_Init+0x64>)
 8001f72:	f7ff f96b 	bl	800124c <HAL_SPI_Init>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001f7c:	f000 f8f2 	bl	8002164 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f80:	bf00      	nop
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	200000b0 	.word	0x200000b0
 8001f88:	40013000 	.word	0x40013000

08001f8c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001f90:	4b17      	ldr	r3, [pc, #92]	; (8001ff0 <MX_SPI2_Init+0x64>)
 8001f92:	4a18      	ldr	r2, [pc, #96]	; (8001ff4 <MX_SPI2_Init+0x68>)
 8001f94:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001f96:	4b16      	ldr	r3, [pc, #88]	; (8001ff0 <MX_SPI2_Init+0x64>)
 8001f98:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f9c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001f9e:	4b14      	ldr	r3, [pc, #80]	; (8001ff0 <MX_SPI2_Init+0x64>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fa4:	4b12      	ldr	r3, [pc, #72]	; (8001ff0 <MX_SPI2_Init+0x64>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001faa:	4b11      	ldr	r3, [pc, #68]	; (8001ff0 <MX_SPI2_Init+0x64>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fb0:	4b0f      	ldr	r3, [pc, #60]	; (8001ff0 <MX_SPI2_Init+0x64>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001fb6:	4b0e      	ldr	r3, [pc, #56]	; (8001ff0 <MX_SPI2_Init+0x64>)
 8001fb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fbc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fbe:	4b0c      	ldr	r3, [pc, #48]	; (8001ff0 <MX_SPI2_Init+0x64>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fc4:	4b0a      	ldr	r3, [pc, #40]	; (8001ff0 <MX_SPI2_Init+0x64>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fca:	4b09      	ldr	r3, [pc, #36]	; (8001ff0 <MX_SPI2_Init+0x64>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fd0:	4b07      	ldr	r3, [pc, #28]	; (8001ff0 <MX_SPI2_Init+0x64>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001fd6:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <MX_SPI2_Init+0x64>)
 8001fd8:	220a      	movs	r2, #10
 8001fda:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001fdc:	4804      	ldr	r0, [pc, #16]	; (8001ff0 <MX_SPI2_Init+0x64>)
 8001fde:	f7ff f935 	bl	800124c <HAL_SPI_Init>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001fe8:	f000 f8bc 	bl	8002164 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001fec:	bf00      	nop
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	20000030 	.word	0x20000030
 8001ff4:	40003800 	.word	0x40003800

08001ff8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ffc:	4b11      	ldr	r3, [pc, #68]	; (8002044 <MX_USART3_UART_Init+0x4c>)
 8001ffe:	4a12      	ldr	r2, [pc, #72]	; (8002048 <MX_USART3_UART_Init+0x50>)
 8002000:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002002:	4b10      	ldr	r3, [pc, #64]	; (8002044 <MX_USART3_UART_Init+0x4c>)
 8002004:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002008:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800200a:	4b0e      	ldr	r3, [pc, #56]	; (8002044 <MX_USART3_UART_Init+0x4c>)
 800200c:	2200      	movs	r2, #0
 800200e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002010:	4b0c      	ldr	r3, [pc, #48]	; (8002044 <MX_USART3_UART_Init+0x4c>)
 8002012:	2200      	movs	r2, #0
 8002014:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002016:	4b0b      	ldr	r3, [pc, #44]	; (8002044 <MX_USART3_UART_Init+0x4c>)
 8002018:	2200      	movs	r2, #0
 800201a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800201c:	4b09      	ldr	r3, [pc, #36]	; (8002044 <MX_USART3_UART_Init+0x4c>)
 800201e:	220c      	movs	r2, #12
 8002020:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002022:	4b08      	ldr	r3, [pc, #32]	; (8002044 <MX_USART3_UART_Init+0x4c>)
 8002024:	2200      	movs	r2, #0
 8002026:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002028:	4b06      	ldr	r3, [pc, #24]	; (8002044 <MX_USART3_UART_Init+0x4c>)
 800202a:	2200      	movs	r2, #0
 800202c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800202e:	4805      	ldr	r0, [pc, #20]	; (8002044 <MX_USART3_UART_Init+0x4c>)
 8002030:	f7ff fb29 	bl	8001686 <HAL_UART_Init>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800203a:	f000 f893 	bl	8002164 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800203e:	bf00      	nop
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20000108 	.word	0x20000108
 8002048:	40004800 	.word	0x40004800

0800204c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002052:	4b0c      	ldr	r3, [pc, #48]	; (8002084 <MX_DMA_Init+0x38>)
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	4a0b      	ldr	r2, [pc, #44]	; (8002084 <MX_DMA_Init+0x38>)
 8002058:	f043 0301 	orr.w	r3, r3, #1
 800205c:	6153      	str	r3, [r2, #20]
 800205e:	4b09      	ldr	r3, [pc, #36]	; (8002084 <MX_DMA_Init+0x38>)
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	607b      	str	r3, [r7, #4]
 8002068:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800206a:	2200      	movs	r2, #0
 800206c:	2100      	movs	r1, #0
 800206e:	200d      	movs	r0, #13
 8002070:	f7fe f9c7 	bl	8000402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002074:	200d      	movs	r0, #13
 8002076:	f7fe f9e0 	bl	800043a <HAL_NVIC_EnableIRQ>

}
 800207a:	bf00      	nop
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	40021000 	.word	0x40021000

08002088 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b088      	sub	sp, #32
 800208c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800208e:	f107 0310 	add.w	r3, r7, #16
 8002092:	2200      	movs	r2, #0
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	605a      	str	r2, [r3, #4]
 8002098:	609a      	str	r2, [r3, #8]
 800209a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800209c:	4b2e      	ldr	r3, [pc, #184]	; (8002158 <MX_GPIO_Init+0xd0>)
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	4a2d      	ldr	r2, [pc, #180]	; (8002158 <MX_GPIO_Init+0xd0>)
 80020a2:	f043 0320 	orr.w	r3, r3, #32
 80020a6:	6193      	str	r3, [r2, #24]
 80020a8:	4b2b      	ldr	r3, [pc, #172]	; (8002158 <MX_GPIO_Init+0xd0>)
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	f003 0320 	and.w	r3, r3, #32
 80020b0:	60fb      	str	r3, [r7, #12]
 80020b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b4:	4b28      	ldr	r3, [pc, #160]	; (8002158 <MX_GPIO_Init+0xd0>)
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	4a27      	ldr	r2, [pc, #156]	; (8002158 <MX_GPIO_Init+0xd0>)
 80020ba:	f043 0304 	orr.w	r3, r3, #4
 80020be:	6193      	str	r3, [r2, #24]
 80020c0:	4b25      	ldr	r3, [pc, #148]	; (8002158 <MX_GPIO_Init+0xd0>)
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	f003 0304 	and.w	r3, r3, #4
 80020c8:	60bb      	str	r3, [r7, #8]
 80020ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020cc:	4b22      	ldr	r3, [pc, #136]	; (8002158 <MX_GPIO_Init+0xd0>)
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	4a21      	ldr	r2, [pc, #132]	; (8002158 <MX_GPIO_Init+0xd0>)
 80020d2:	f043 0308 	orr.w	r3, r3, #8
 80020d6:	6193      	str	r3, [r2, #24]
 80020d8:	4b1f      	ldr	r3, [pc, #124]	; (8002158 <MX_GPIO_Init+0xd0>)
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	f003 0308 	and.w	r3, r3, #8
 80020e0:	607b      	str	r3, [r7, #4]
 80020e2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TestPin_Pin|LEDPIN_Pin|TFT_CS_Pin|SDCARD_CS_Pin 
 80020e4:	2200      	movs	r2, #0
 80020e6:	f640 4117 	movw	r1, #3095	; 0xc17
 80020ea:	481c      	ldr	r0, [pc, #112]	; (800215c <MX_GPIO_Init+0xd4>)
 80020ec:	f7fe fc7a 	bl	80009e4 <HAL_GPIO_WritePin>
                          |TFT_CD_Pin|TFT_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 80020f0:	2200      	movs	r2, #0
 80020f2:	2101      	movs	r1, #1
 80020f4:	481a      	ldr	r0, [pc, #104]	; (8002160 <MX_GPIO_Init+0xd8>)
 80020f6:	f7fe fc75 	bl	80009e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TestPin_Pin LEDPIN_Pin TFT_CS_Pin SDCARD_CS_Pin 
                           TFT_CD_Pin TFT_RST_Pin */
  GPIO_InitStruct.Pin = TestPin_Pin|LEDPIN_Pin|TFT_CS_Pin|SDCARD_CS_Pin 
 80020fa:	f640 4317 	movw	r3, #3095	; 0xc17
 80020fe:	613b      	str	r3, [r7, #16]
                          |TFT_CD_Pin|TFT_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002100:	2301      	movs	r3, #1
 8002102:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002104:	2300      	movs	r3, #0
 8002106:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002108:	2302      	movs	r3, #2
 800210a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800210c:	f107 0310 	add.w	r3, r7, #16
 8002110:	4619      	mov	r1, r3
 8002112:	4812      	ldr	r0, [pc, #72]	; (800215c <MX_GPIO_Init+0xd4>)
 8002114:	f7fe fb0c 	bl	8000730 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_CS_Pin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 8002118:	2301      	movs	r3, #1
 800211a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800211c:	2301      	movs	r3, #1
 800211e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002120:	2300      	movs	r3, #0
 8002122:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002124:	2302      	movs	r3, #2
 8002126:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 8002128:	f107 0310 	add.w	r3, r7, #16
 800212c:	4619      	mov	r1, r3
 800212e:	480c      	ldr	r0, [pc, #48]	; (8002160 <MX_GPIO_Init+0xd8>)
 8002130:	f7fe fafe 	bl	8000730 <HAL_GPIO_Init>

  /*Configure GPIO pin : SWITCHPIN_Pin */
  GPIO_InitStruct.Pin = SWITCHPIN_Pin;
 8002134:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002138:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800213a:	2300      	movs	r3, #0
 800213c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213e:	2300      	movs	r3, #0
 8002140:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SWITCHPIN_GPIO_Port, &GPIO_InitStruct);
 8002142:	f107 0310 	add.w	r3, r7, #16
 8002146:	4619      	mov	r1, r3
 8002148:	4804      	ldr	r0, [pc, #16]	; (800215c <MX_GPIO_Init+0xd4>)
 800214a:	f7fe faf1 	bl	8000730 <HAL_GPIO_Init>

}
 800214e:	bf00      	nop
 8002150:	3720      	adds	r7, #32
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	40021000 	.word	0x40021000
 800215c:	40010800 	.word	0x40010800
 8002160:	40010c00 	.word	0x40010c00

08002164 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002168:	bf00      	nop
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr

08002170 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002176:	4b15      	ldr	r3, [pc, #84]	; (80021cc <HAL_MspInit+0x5c>)
 8002178:	699b      	ldr	r3, [r3, #24]
 800217a:	4a14      	ldr	r2, [pc, #80]	; (80021cc <HAL_MspInit+0x5c>)
 800217c:	f043 0301 	orr.w	r3, r3, #1
 8002180:	6193      	str	r3, [r2, #24]
 8002182:	4b12      	ldr	r3, [pc, #72]	; (80021cc <HAL_MspInit+0x5c>)
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	60bb      	str	r3, [r7, #8]
 800218c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800218e:	4b0f      	ldr	r3, [pc, #60]	; (80021cc <HAL_MspInit+0x5c>)
 8002190:	69db      	ldr	r3, [r3, #28]
 8002192:	4a0e      	ldr	r2, [pc, #56]	; (80021cc <HAL_MspInit+0x5c>)
 8002194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002198:	61d3      	str	r3, [r2, #28]
 800219a:	4b0c      	ldr	r3, [pc, #48]	; (80021cc <HAL_MspInit+0x5c>)
 800219c:	69db      	ldr	r3, [r3, #28]
 800219e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a2:	607b      	str	r3, [r7, #4]
 80021a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80021a6:	4b0a      	ldr	r3, [pc, #40]	; (80021d0 <HAL_MspInit+0x60>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	4a04      	ldr	r2, [pc, #16]	; (80021d0 <HAL_MspInit+0x60>)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021c2:	bf00      	nop
 80021c4:	3714      	adds	r7, #20
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bc80      	pop	{r7}
 80021ca:	4770      	bx	lr
 80021cc:	40021000 	.word	0x40021000
 80021d0:	40010000 	.word	0x40010000

080021d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b08a      	sub	sp, #40	; 0x28
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021dc:	f107 0318 	add.w	r3, r7, #24
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	605a      	str	r2, [r3, #4]
 80021e6:	609a      	str	r2, [r3, #8]
 80021e8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a4b      	ldr	r2, [pc, #300]	; (800231c <HAL_SPI_MspInit+0x148>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d157      	bne.n	80022a4 <HAL_SPI_MspInit+0xd0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021f4:	4b4a      	ldr	r3, [pc, #296]	; (8002320 <HAL_SPI_MspInit+0x14c>)
 80021f6:	699b      	ldr	r3, [r3, #24]
 80021f8:	4a49      	ldr	r2, [pc, #292]	; (8002320 <HAL_SPI_MspInit+0x14c>)
 80021fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021fe:	6193      	str	r3, [r2, #24]
 8002200:	4b47      	ldr	r3, [pc, #284]	; (8002320 <HAL_SPI_MspInit+0x14c>)
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002208:	617b      	str	r3, [r7, #20]
 800220a:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800220c:	4b44      	ldr	r3, [pc, #272]	; (8002320 <HAL_SPI_MspInit+0x14c>)
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	4a43      	ldr	r2, [pc, #268]	; (8002320 <HAL_SPI_MspInit+0x14c>)
 8002212:	f043 0304 	orr.w	r3, r3, #4
 8002216:	6193      	str	r3, [r2, #24]
 8002218:	4b41      	ldr	r3, [pc, #260]	; (8002320 <HAL_SPI_MspInit+0x14c>)
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	f003 0304 	and.w	r3, r3, #4
 8002220:	613b      	str	r3, [r7, #16]
 8002222:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002224:	23a0      	movs	r3, #160	; 0xa0
 8002226:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002228:	2302      	movs	r3, #2
 800222a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800222c:	2303      	movs	r3, #3
 800222e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002230:	f107 0318 	add.w	r3, r7, #24
 8002234:	4619      	mov	r1, r3
 8002236:	483b      	ldr	r0, [pc, #236]	; (8002324 <HAL_SPI_MspInit+0x150>)
 8002238:	f7fe fa7a 	bl	8000730 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800223c:	2340      	movs	r3, #64	; 0x40
 800223e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002240:	2300      	movs	r3, #0
 8002242:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002244:	2300      	movs	r3, #0
 8002246:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002248:	f107 0318 	add.w	r3, r7, #24
 800224c:	4619      	mov	r1, r3
 800224e:	4835      	ldr	r0, [pc, #212]	; (8002324 <HAL_SPI_MspInit+0x150>)
 8002250:	f7fe fa6e 	bl	8000730 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8002254:	4b34      	ldr	r3, [pc, #208]	; (8002328 <HAL_SPI_MspInit+0x154>)
 8002256:	4a35      	ldr	r2, [pc, #212]	; (800232c <HAL_SPI_MspInit+0x158>)
 8002258:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800225a:	4b33      	ldr	r3, [pc, #204]	; (8002328 <HAL_SPI_MspInit+0x154>)
 800225c:	2210      	movs	r2, #16
 800225e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002260:	4b31      	ldr	r3, [pc, #196]	; (8002328 <HAL_SPI_MspInit+0x154>)
 8002262:	2200      	movs	r2, #0
 8002264:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002266:	4b30      	ldr	r3, [pc, #192]	; (8002328 <HAL_SPI_MspInit+0x154>)
 8002268:	2280      	movs	r2, #128	; 0x80
 800226a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800226c:	4b2e      	ldr	r3, [pc, #184]	; (8002328 <HAL_SPI_MspInit+0x154>)
 800226e:	2200      	movs	r2, #0
 8002270:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002272:	4b2d      	ldr	r3, [pc, #180]	; (8002328 <HAL_SPI_MspInit+0x154>)
 8002274:	2200      	movs	r2, #0
 8002276:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8002278:	4b2b      	ldr	r3, [pc, #172]	; (8002328 <HAL_SPI_MspInit+0x154>)
 800227a:	2220      	movs	r2, #32
 800227c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800227e:	4b2a      	ldr	r3, [pc, #168]	; (8002328 <HAL_SPI_MspInit+0x154>)
 8002280:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002284:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002286:	4828      	ldr	r0, [pc, #160]	; (8002328 <HAL_SPI_MspInit+0x154>)
 8002288:	f7fe f8f2 	bl	8000470 <HAL_DMA_Init>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <HAL_SPI_MspInit+0xc2>
    {
      Error_Handler();
 8002292:	f7ff ff67 	bl	8002164 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a23      	ldr	r2, [pc, #140]	; (8002328 <HAL_SPI_MspInit+0x154>)
 800229a:	649a      	str	r2, [r3, #72]	; 0x48
 800229c:	4a22      	ldr	r2, [pc, #136]	; (8002328 <HAL_SPI_MspInit+0x154>)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80022a2:	e036      	b.n	8002312 <HAL_SPI_MspInit+0x13e>
  else if(hspi->Instance==SPI2)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a21      	ldr	r2, [pc, #132]	; (8002330 <HAL_SPI_MspInit+0x15c>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d131      	bne.n	8002312 <HAL_SPI_MspInit+0x13e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80022ae:	4b1c      	ldr	r3, [pc, #112]	; (8002320 <HAL_SPI_MspInit+0x14c>)
 80022b0:	69db      	ldr	r3, [r3, #28]
 80022b2:	4a1b      	ldr	r2, [pc, #108]	; (8002320 <HAL_SPI_MspInit+0x14c>)
 80022b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022b8:	61d3      	str	r3, [r2, #28]
 80022ba:	4b19      	ldr	r3, [pc, #100]	; (8002320 <HAL_SPI_MspInit+0x14c>)
 80022bc:	69db      	ldr	r3, [r3, #28]
 80022be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022c2:	60fb      	str	r3, [r7, #12]
 80022c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022c6:	4b16      	ldr	r3, [pc, #88]	; (8002320 <HAL_SPI_MspInit+0x14c>)
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	4a15      	ldr	r2, [pc, #84]	; (8002320 <HAL_SPI_MspInit+0x14c>)
 80022cc:	f043 0308 	orr.w	r3, r3, #8
 80022d0:	6193      	str	r3, [r2, #24]
 80022d2:	4b13      	ldr	r3, [pc, #76]	; (8002320 <HAL_SPI_MspInit+0x14c>)
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	f003 0308 	and.w	r3, r3, #8
 80022da:	60bb      	str	r3, [r7, #8]
 80022dc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80022de:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80022e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e4:	2302      	movs	r3, #2
 80022e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022e8:	2303      	movs	r3, #3
 80022ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ec:	f107 0318 	add.w	r3, r7, #24
 80022f0:	4619      	mov	r1, r3
 80022f2:	4810      	ldr	r0, [pc, #64]	; (8002334 <HAL_SPI_MspInit+0x160>)
 80022f4:	f7fe fa1c 	bl	8000730 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80022f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022fe:	2300      	movs	r3, #0
 8002300:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002302:	2300      	movs	r3, #0
 8002304:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002306:	f107 0318 	add.w	r3, r7, #24
 800230a:	4619      	mov	r1, r3
 800230c:	4809      	ldr	r0, [pc, #36]	; (8002334 <HAL_SPI_MspInit+0x160>)
 800230e:	f7fe fa0f 	bl	8000730 <HAL_GPIO_Init>
}
 8002312:	bf00      	nop
 8002314:	3728      	adds	r7, #40	; 0x28
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	40013000 	.word	0x40013000
 8002320:	40021000 	.word	0x40021000
 8002324:	40010800 	.word	0x40010800
 8002328:	20000148 	.word	0x20000148
 800232c:	40020030 	.word	0x40020030
 8002330:	40003800 	.word	0x40003800
 8002334:	40010c00 	.word	0x40010c00

08002338 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b088      	sub	sp, #32
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002340:	f107 0310 	add.w	r3, r7, #16
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	605a      	str	r2, [r3, #4]
 800234a:	609a      	str	r2, [r3, #8]
 800234c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a1c      	ldr	r2, [pc, #112]	; (80023c4 <HAL_UART_MspInit+0x8c>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d131      	bne.n	80023bc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002358:	4b1b      	ldr	r3, [pc, #108]	; (80023c8 <HAL_UART_MspInit+0x90>)
 800235a:	69db      	ldr	r3, [r3, #28]
 800235c:	4a1a      	ldr	r2, [pc, #104]	; (80023c8 <HAL_UART_MspInit+0x90>)
 800235e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002362:	61d3      	str	r3, [r2, #28]
 8002364:	4b18      	ldr	r3, [pc, #96]	; (80023c8 <HAL_UART_MspInit+0x90>)
 8002366:	69db      	ldr	r3, [r3, #28]
 8002368:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800236c:	60fb      	str	r3, [r7, #12]
 800236e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002370:	4b15      	ldr	r3, [pc, #84]	; (80023c8 <HAL_UART_MspInit+0x90>)
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	4a14      	ldr	r2, [pc, #80]	; (80023c8 <HAL_UART_MspInit+0x90>)
 8002376:	f043 0308 	orr.w	r3, r3, #8
 800237a:	6193      	str	r3, [r2, #24]
 800237c:	4b12      	ldr	r3, [pc, #72]	; (80023c8 <HAL_UART_MspInit+0x90>)
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	f003 0308 	and.w	r3, r3, #8
 8002384:	60bb      	str	r3, [r7, #8]
 8002386:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002388:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800238c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800238e:	2302      	movs	r3, #2
 8002390:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002392:	2303      	movs	r3, #3
 8002394:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002396:	f107 0310 	add.w	r3, r7, #16
 800239a:	4619      	mov	r1, r3
 800239c:	480b      	ldr	r0, [pc, #44]	; (80023cc <HAL_UART_MspInit+0x94>)
 800239e:	f7fe f9c7 	bl	8000730 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80023a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023a8:	2300      	movs	r3, #0
 80023aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ac:	2300      	movs	r3, #0
 80023ae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023b0:	f107 0310 	add.w	r3, r7, #16
 80023b4:	4619      	mov	r1, r3
 80023b6:	4805      	ldr	r0, [pc, #20]	; (80023cc <HAL_UART_MspInit+0x94>)
 80023b8:	f7fe f9ba 	bl	8000730 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80023bc:	bf00      	nop
 80023be:	3720      	adds	r7, #32
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40004800 	.word	0x40004800
 80023c8:	40021000 	.word	0x40021000
 80023cc:	40010c00 	.word	0x40010c00

080023d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80023d4:	bf00      	nop
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bc80      	pop	{r7}
 80023da:	4770      	bx	lr

080023dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023e0:	e7fe      	b.n	80023e0 <HardFault_Handler+0x4>

080023e2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023e2:	b480      	push	{r7}
 80023e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023e6:	e7fe      	b.n	80023e6 <MemManage_Handler+0x4>

080023e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023ec:	e7fe      	b.n	80023ec <BusFault_Handler+0x4>

080023ee <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023ee:	b480      	push	{r7}
 80023f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023f2:	e7fe      	b.n	80023f2 <UsageFault_Handler+0x4>

080023f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023f8:	bf00      	nop
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bc80      	pop	{r7}
 80023fe:	4770      	bx	lr

08002400 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002404:	bf00      	nop
 8002406:	46bd      	mov	sp, r7
 8002408:	bc80      	pop	{r7}
 800240a:	4770      	bx	lr

0800240c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002410:	bf00      	nop
 8002412:	46bd      	mov	sp, r7
 8002414:	bc80      	pop	{r7}
 8002416:	4770      	bx	lr

08002418 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800241c:	f7fd fedc 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002420:	bf00      	nop
 8002422:	bd80      	pop	{r7, pc}

08002424 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002428:	4802      	ldr	r0, [pc, #8]	; (8002434 <DMA1_Channel3_IRQHandler+0x10>)
 800242a:	f7fe f87b 	bl	8000524 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800242e:	bf00      	nop
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	20000148 	.word	0x20000148

08002438 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800243c:	4b15      	ldr	r3, [pc, #84]	; (8002494 <SystemInit+0x5c>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a14      	ldr	r2, [pc, #80]	; (8002494 <SystemInit+0x5c>)
 8002442:	f043 0301 	orr.w	r3, r3, #1
 8002446:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002448:	4b12      	ldr	r3, [pc, #72]	; (8002494 <SystemInit+0x5c>)
 800244a:	685a      	ldr	r2, [r3, #4]
 800244c:	4911      	ldr	r1, [pc, #68]	; (8002494 <SystemInit+0x5c>)
 800244e:	4b12      	ldr	r3, [pc, #72]	; (8002498 <SystemInit+0x60>)
 8002450:	4013      	ands	r3, r2
 8002452:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002454:	4b0f      	ldr	r3, [pc, #60]	; (8002494 <SystemInit+0x5c>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a0e      	ldr	r2, [pc, #56]	; (8002494 <SystemInit+0x5c>)
 800245a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800245e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002462:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002464:	4b0b      	ldr	r3, [pc, #44]	; (8002494 <SystemInit+0x5c>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a0a      	ldr	r2, [pc, #40]	; (8002494 <SystemInit+0x5c>)
 800246a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800246e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002470:	4b08      	ldr	r3, [pc, #32]	; (8002494 <SystemInit+0x5c>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	4a07      	ldr	r2, [pc, #28]	; (8002494 <SystemInit+0x5c>)
 8002476:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800247a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800247c:	4b05      	ldr	r3, [pc, #20]	; (8002494 <SystemInit+0x5c>)
 800247e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002482:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002484:	4b05      	ldr	r3, [pc, #20]	; (800249c <SystemInit+0x64>)
 8002486:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800248a:	609a      	str	r2, [r3, #8]
#endif 
}
 800248c:	bf00      	nop
 800248e:	46bd      	mov	sp, r7
 8002490:	bc80      	pop	{r7}
 8002492:	4770      	bx	lr
 8002494:	40021000 	.word	0x40021000
 8002498:	f8ff0000 	.word	0xf8ff0000
 800249c:	e000ed00 	.word	0xe000ed00

080024a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80024a0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80024a2:	e003      	b.n	80024ac <LoopCopyDataInit>

080024a4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80024a4:	4b0b      	ldr	r3, [pc, #44]	; (80024d4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80024a6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80024a8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80024aa:	3104      	adds	r1, #4

080024ac <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80024ac:	480a      	ldr	r0, [pc, #40]	; (80024d8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80024ae:	4b0b      	ldr	r3, [pc, #44]	; (80024dc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80024b0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80024b2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80024b4:	d3f6      	bcc.n	80024a4 <CopyDataInit>
  ldr r2, =_sbss
 80024b6:	4a0a      	ldr	r2, [pc, #40]	; (80024e0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80024b8:	e002      	b.n	80024c0 <LoopFillZerobss>

080024ba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80024ba:	2300      	movs	r3, #0
  str r3, [r2], #4
 80024bc:	f842 3b04 	str.w	r3, [r2], #4

080024c0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80024c0:	4b08      	ldr	r3, [pc, #32]	; (80024e4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80024c2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80024c4:	d3f9      	bcc.n	80024ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80024c6:	f7ff ffb7 	bl	8002438 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024ca:	f000 f80f 	bl	80024ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80024ce:	f7ff fcc7 	bl	8001e60 <main>
  bx lr
 80024d2:	4770      	bx	lr
  ldr r3, =_sidata
 80024d4:	08002590 	.word	0x08002590
  ldr r0, =_sdata
 80024d8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80024dc:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 80024e0:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 80024e4:	2000018c 	.word	0x2000018c

080024e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024e8:	e7fe      	b.n	80024e8 <ADC1_2_IRQHandler>
	...

080024ec <__libc_init_array>:
 80024ec:	b570      	push	{r4, r5, r6, lr}
 80024ee:	2500      	movs	r5, #0
 80024f0:	4e0c      	ldr	r6, [pc, #48]	; (8002524 <__libc_init_array+0x38>)
 80024f2:	4c0d      	ldr	r4, [pc, #52]	; (8002528 <__libc_init_array+0x3c>)
 80024f4:	1ba4      	subs	r4, r4, r6
 80024f6:	10a4      	asrs	r4, r4, #2
 80024f8:	42a5      	cmp	r5, r4
 80024fa:	d109      	bne.n	8002510 <__libc_init_array+0x24>
 80024fc:	f000 f822 	bl	8002544 <_init>
 8002500:	2500      	movs	r5, #0
 8002502:	4e0a      	ldr	r6, [pc, #40]	; (800252c <__libc_init_array+0x40>)
 8002504:	4c0a      	ldr	r4, [pc, #40]	; (8002530 <__libc_init_array+0x44>)
 8002506:	1ba4      	subs	r4, r4, r6
 8002508:	10a4      	asrs	r4, r4, #2
 800250a:	42a5      	cmp	r5, r4
 800250c:	d105      	bne.n	800251a <__libc_init_array+0x2e>
 800250e:	bd70      	pop	{r4, r5, r6, pc}
 8002510:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002514:	4798      	blx	r3
 8002516:	3501      	adds	r5, #1
 8002518:	e7ee      	b.n	80024f8 <__libc_init_array+0xc>
 800251a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800251e:	4798      	blx	r3
 8002520:	3501      	adds	r5, #1
 8002522:	e7f2      	b.n	800250a <__libc_init_array+0x1e>
 8002524:	08002588 	.word	0x08002588
 8002528:	08002588 	.word	0x08002588
 800252c:	08002588 	.word	0x08002588
 8002530:	0800258c 	.word	0x0800258c

08002534 <memset>:
 8002534:	4603      	mov	r3, r0
 8002536:	4402      	add	r2, r0
 8002538:	4293      	cmp	r3, r2
 800253a:	d100      	bne.n	800253e <memset+0xa>
 800253c:	4770      	bx	lr
 800253e:	f803 1b01 	strb.w	r1, [r3], #1
 8002542:	e7f9      	b.n	8002538 <memset+0x4>

08002544 <_init>:
 8002544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002546:	bf00      	nop
 8002548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800254a:	bc08      	pop	{r3}
 800254c:	469e      	mov	lr, r3
 800254e:	4770      	bx	lr

08002550 <_fini>:
 8002550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002552:	bf00      	nop
 8002554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002556:	bc08      	pop	{r3}
 8002558:	469e      	mov	lr, r3
 800255a:	4770      	bx	lr
